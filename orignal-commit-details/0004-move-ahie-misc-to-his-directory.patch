From f3dba1bc70567fd7b89da24a76c9c8cfbf117165 Mon Sep 17 00:00:00 2001
From: Lutts Cao <lutts.cao@gmail.com>
Date: Sun, 23 Sep 2012 18:05:49 +0800
Subject: [PATCH 04/58] move ahie-misc to his directory

---
 ahei-elisp/ahei-misc.el | 95 +++++++++++++++++++++++++++++++++++++++++++++++++
 my-elisp/ahei-misc.el   | 95 -------------------------------------------------
 2 files changed, 95 insertions(+), 95 deletions(-)
 create mode 100644 ahei-elisp/ahei-misc.el
 delete mode 100644 my-elisp/ahei-misc.el

diff --git a/ahei-elisp/ahei-misc.el b/ahei-elisp/ahei-misc.el
new file mode 100644
index 0000000..6e83c23
--- /dev/null
+++ b/ahei-elisp/ahei-misc.el
@@ -0,0 +1,95 @@
+;;; ahei-misc.el --- Some basic utility function of ahei
+;; -*- Emacs-Lisp -*-
+
+;; Time-stamp: <2010-09-11 09:53:02 Saturday by taoshanwen>
+
+;; This  file is free  software; you  can redistribute  it and/or
+;; modify it under the terms of the GNU General Public License as
+;; published by  the Free Software Foundation;  either version 3,
+;; or (at your option) any later version.
+
+;; This file is  distributed in the hope that  it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR  A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+
+;; You  should have  received a  copy of  the GNU  General Public
+;; License along with  GNU Emacs; see the file  COPYING.  If not,
+;; write  to  the Free  Software  Foundation,  Inc., 51  Franklin
+;; Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+
+;;; Commentary:
+;; 
+
+;;; Code:
+
+(when (>= 21 emacs-major-version)
+  (defalias 'move-beginning-of-line 'beginning-of-line)
+  (defalias 'move-end-of-line       'end-of-line))
+
+;;;###autoload
+(defun am-add-hooks (hooks function &optional append local)
+  "Call `add-hook' on hook list HOOKS use arguments FUNCTION, APPEND, LOCAL.
+
+HOOKS can be one list or just a hook."
+  (if (listp hooks)
+      (mapc
+       `(lambda (hook)
+          (add-hook hook ',function append local))
+       hooks)
+    (add-hook hooks function append local)))
+
+;;;###autoload
+(defun am-intern (&rest strings)
+  "`intern' use STRINGS."
+  (intern
+   (apply
+    'concat
+    (mapcar
+     (lambda (element)
+       (if (stringp element) element (symbol-name element)))
+     strings))))
+
+;;;###autoload
+(defun am-variable-is-t (symbol)
+  "Return SYMBOL's value is t or not."
+  (and (boundp symbol) (symbol-value symbol)))
+
+;;;###autoload
+(defmacro am-def-active-fun (symbol &optional fun-name)
+  "Make definition of function judge variable is active or not."
+  `(defun ,(if fun-name fun-name symbol) ()
+     ,(concat "`" (symbol-name symbol) "' is t or not.")
+     (am-variable-is-t ',symbol)))
+
+;;;###autoload
+(defun am-forward-word-or-to-word ()
+  "`forward-word' or `forward-to-word'.
+If after excute `forward-to-word', current position
+is at next line, then rollback and excute `forward-word'"
+  (interactive)
+  (let ((noo (line-number-at-pos)) no)
+    (save-excursion
+      (forward-to-word 1)
+      (setq no (line-number-at-pos)))
+    (if (> no noo)
+        (forward-word)
+      (forward-to-word 1))))
+
+;;;###autoload
+(defmacro am-with-temp-mode (mode &rest body)
+  "Create a temporary buffer with mode MODE, and evaluate BODY there like `progn'.
+See also `with-temp-buffer'."
+  `(with-temp-buffer
+     (funcall ,mode)
+     ,@body))
+
+;;;###autoload
+(defun am-equal-ignore-case (str1 str2)
+  "STR1 equal ignore case to STR2 or not."
+  (string= (downcase str1) (downcase str2)))
+
+(provide 'ahei-misc)
+
+;;; ahei-misc.el ends here
diff --git a/my-elisp/ahei-misc.el b/my-elisp/ahei-misc.el
deleted file mode 100644
index 6e83c23..0000000
--- a/my-elisp/ahei-misc.el
+++ /dev/null
@@ -1,95 +0,0 @@
-;;; ahei-misc.el --- Some basic utility function of ahei
-;; -*- Emacs-Lisp -*-
-
-;; Time-stamp: <2010-09-11 09:53:02 Saturday by taoshanwen>
-
-;; This  file is free  software; you  can redistribute  it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by  the Free Software Foundation;  either version 3,
-;; or (at your option) any later version.
-
-;; This file is  distributed in the hope that  it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR  A PARTICULAR PURPOSE.  See the
-;; GNU General Public License for more details.
-
-;; You  should have  received a  copy of  the GNU  General Public
-;; License along with  GNU Emacs; see the file  COPYING.  If not,
-;; write  to  the Free  Software  Foundation,  Inc., 51  Franklin
-;; Street, Fifth Floor, Boston, MA 02110-1301, USA.
-
-
-;;; Commentary:
-;; 
-
-;;; Code:
-
-(when (>= 21 emacs-major-version)
-  (defalias 'move-beginning-of-line 'beginning-of-line)
-  (defalias 'move-end-of-line       'end-of-line))
-
-;;;###autoload
-(defun am-add-hooks (hooks function &optional append local)
-  "Call `add-hook' on hook list HOOKS use arguments FUNCTION, APPEND, LOCAL.
-
-HOOKS can be one list or just a hook."
-  (if (listp hooks)
-      (mapc
-       `(lambda (hook)
-          (add-hook hook ',function append local))
-       hooks)
-    (add-hook hooks function append local)))
-
-;;;###autoload
-(defun am-intern (&rest strings)
-  "`intern' use STRINGS."
-  (intern
-   (apply
-    'concat
-    (mapcar
-     (lambda (element)
-       (if (stringp element) element (symbol-name element)))
-     strings))))
-
-;;;###autoload
-(defun am-variable-is-t (symbol)
-  "Return SYMBOL's value is t or not."
-  (and (boundp symbol) (symbol-value symbol)))
-
-;;;###autoload
-(defmacro am-def-active-fun (symbol &optional fun-name)
-  "Make definition of function judge variable is active or not."
-  `(defun ,(if fun-name fun-name symbol) ()
-     ,(concat "`" (symbol-name symbol) "' is t or not.")
-     (am-variable-is-t ',symbol)))
-
-;;;###autoload
-(defun am-forward-word-or-to-word ()
-  "`forward-word' or `forward-to-word'.
-If after excute `forward-to-word', current position
-is at next line, then rollback and excute `forward-word'"
-  (interactive)
-  (let ((noo (line-number-at-pos)) no)
-    (save-excursion
-      (forward-to-word 1)
-      (setq no (line-number-at-pos)))
-    (if (> no noo)
-        (forward-word)
-      (forward-to-word 1))))
-
-;;;###autoload
-(defmacro am-with-temp-mode (mode &rest body)
-  "Create a temporary buffer with mode MODE, and evaluate BODY there like `progn'.
-See also `with-temp-buffer'."
-  `(with-temp-buffer
-     (funcall ,mode)
-     ,@body))
-
-;;;###autoload
-(defun am-equal-ignore-case (str1 str2)
-  "STR1 equal ignore case to STR2 or not."
-  (string= (downcase str1) (downcase str2)))
-
-(provide 'ahei-misc)
-
-;;; ahei-misc.el ends here
-- 
2.0.4

