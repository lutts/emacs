From 241198864527dd9273958b024effb95f0fb560fa Mon Sep 17 00:00:00 2001
From: Lutts Cao <lutts.cao@gmail.com>
Date: Sun, 30 Sep 2012 17:56:34 +0800
Subject: [PATCH 13/58] fix cedet semantic-symref open all buffers bug

---
 .emacs                                             |   15 +-
 elisp/cedet-1.1/cogre/cogre-ascii.elc              |  Bin 3774 -> 3780 bytes
 elisp/cedet-1.1/cogre/cogre-convert.elc            |  Bin 10533 -> 10539 bytes
 elisp/cedet-1.1/cogre/cogre-dot-mode.elc           |  Bin 2635 -> 2641 bytes
 elisp/cedet-1.1/cogre/cogre-layout.elc             |  Bin 2178 -> 2184 bytes
 elisp/cedet-1.1/cogre/cogre-load.elc               |  Bin 686 -> 692 bytes
 elisp/cedet-1.1/cogre/cogre-loaddefs.el            |    4 +-
 elisp/cedet-1.1/cogre/cogre-mode.elc               |  Bin 25052 -> 25058 bytes
 elisp/cedet-1.1/cogre/cogre-periodic.elc           |  Bin 3708 -> 3714 bytes
 elisp/cedet-1.1/cogre/cogre-semantic.elc           |  Bin 10360 -> 10366 bytes
 elisp/cedet-1.1/cogre/cogre-srecode.elc            |  Bin 4527 -> 4533 bytes
 elisp/cedet-1.1/cogre/cogre-uml.elc                |  Bin 11847 -> 11853 bytes
 elisp/cedet-1.1/cogre/cogre-utest.elc              |  Bin 3133 -> 3139 bytes
 elisp/cedet-1.1/cogre/cogre.elc                    |  Bin 30130 -> 30136 bytes
 elisp/cedet-1.1/cogre/picture-hack.elc             |  Bin 6586 -> 6592 bytes
 elisp/cedet-1.1/cogre/wisent-dot-wy.el~            |  281 ---
 elisp/cedet-1.1/cogre/wisent-dot.elc               |  Bin 2103 -> 2109 bytes
 elisp/cedet-1.1/common/cedet-android.elc           |  Bin 8856 -> 8862 bytes
 elisp/cedet-1.1/common/cedet-autogen.elc           |  Bin 6277 -> 6283 bytes
 elisp/cedet-1.1/common/cedet-compat.elc            |  Bin 5841 -> 5847 bytes
 elisp/cedet-1.1/common/cedet-cscope.elc            |  Bin 4493 -> 4499 bytes
 elisp/cedet-1.1/common/cedet-edebug.elc            |  Bin 3093 -> 3099 bytes
 elisp/cedet-1.1/common/cedet-files.elc             |  Bin 4687 -> 4693 bytes
 elisp/cedet-1.1/common/cedet-global.elc            |  Bin 5120 -> 5126 bytes
 elisp/cedet-1.1/common/cedet-graphviz.elc          |  Bin 3149 -> 3155 bytes
 elisp/cedet-1.1/common/cedet-idutils.elc           |  Bin 5397 -> 5403 bytes
 elisp/cedet-1.1/common/cedet-java.elc              |  Bin 7307 -> 7313 bytes
 elisp/cedet-1.1/common/cedet-load.elc              |  Bin 721 -> 727 bytes
 elisp/cedet-1.1/common/cedet-loaddefs.el           |    2 +-
 elisp/cedet-1.1/common/cedet-m3.elc                |  Bin 5502 -> 5508 bytes
 elisp/cedet-1.1/common/cedet-utests.elc            |  Bin 10524 -> 10530 bytes
 elisp/cedet-1.1/common/cedet.elc                   |  Bin 6772 -> 6779 bytes
 elisp/cedet-1.1/common/data-debug.elc              |  Bin 27652 -> 27658 bytes
 elisp/cedet-1.1/common/ezimage.elc                 |  Bin 10894 -> 10900 bytes
 elisp/cedet-1.1/common/fame.elc                    |  Bin 12195 -> 12201 bytes
 elisp/cedet-1.1/common/inversion.elc               |  Bin 14949 -> 14955 bytes
 elisp/cedet-1.1/common/mode-local.elc              |  Bin 28137 -> 28143 bytes
 elisp/cedet-1.1/common/pprint.elc                  |  Bin 14223 -> 14229 bytes
 elisp/cedet-1.1/common/pulse.elc                   |  Bin 11121 -> 11127 bytes
 elisp/cedet-1.1/common/working.elc                 |  Bin 19559 -> 19565 bytes
 elisp/cedet-1.1/contrib/cedet-contrib-load.elc     |  Bin 714 -> 720 bytes
 elisp/cedet-1.1/contrib/cedet-contrib.elc          |  Bin 715 -> 721 bytes
 elisp/cedet-1.1/contrib/contrib-loaddefs.el        |    2 +-
 elisp/cedet-1.1/contrib/eassist.elc                |  Bin 18388 -> 18394 bytes
 elisp/cedet-1.1/contrib/ede-gnustep.elc            |  Bin 34926 -> 34932 bytes
 elisp/cedet-1.1/contrib/semantic-ectag-scala.elc   |  Bin 4122 -> 4128 bytes
 elisp/cedet-1.1/contrib/semantic-tag-folding.elc   |  Bin 24269 -> 24275 bytes
 elisp/cedet-1.1/contrib/wisent-csharp-wy.el~       |  Bin 25039 -> 0 bytes
 elisp/cedet-1.1/contrib/wisent-csharp.elc          |  Bin 19237 -> 19243 bytes
 elisp/cedet-1.1/contrib/wisent-php-wy.el~          |  841 --------
 elisp/cedet-1.1/contrib/wisent-php.elc             |  Bin 3752 -> 3758 bytes
 elisp/cedet-1.1/contrib/wisent-ruby-wy.el~         |  612 ------
 elisp/cedet-1.1/contrib/wisent-ruby.elc            |  Bin 28925 -> 28931 bytes
 elisp/cedet-1.1/ede/autoconf-compat.elc            |  Bin 4000 -> 4006 bytes
 elisp/cedet-1.1/ede/autoconf-edit.elc              |  Bin 12634 -> 12640 bytes
 elisp/cedet-1.1/ede/ede-android.elc                |  Bin 14196 -> 14202 bytes
 elisp/cedet-1.1/ede/ede-arduino.elc                |  Bin 16434 -> 16440 bytes
 elisp/cedet-1.1/ede/ede-auto.elc                   |  Bin 8649 -> 8655 bytes
 elisp/cedet-1.1/ede/ede-base.elc                   |  Bin 16283 -> 16289 bytes
 elisp/cedet-1.1/ede/ede-cpp-root.elc               |  Bin 10367 -> 10373 bytes
 elisp/cedet-1.1/ede/ede-custom.elc                 |  Bin 5294 -> 5300 bytes
 elisp/cedet-1.1/ede/ede-dired.elc                  |  Bin 2965 -> 2971 bytes
 elisp/cedet-1.1/ede/ede-emacs.elc                  |  Bin 7762 -> 7768 bytes
 elisp/cedet-1.1/ede/ede-files.elc                  |  Bin 13343 -> 13349 bytes
 elisp/cedet-1.1/ede/ede-generic.elc                |  Bin 12879 -> 12885 bytes
 elisp/cedet-1.1/ede/ede-linux.elc                  |  Bin 8191 -> 8197 bytes
 elisp/cedet-1.1/ede/ede-load.elc                   |  Bin 701 -> 707 bytes
 elisp/cedet-1.1/ede/ede-loaddefs.el                |    4 +-
 elisp/cedet-1.1/ede/ede-locate.elc                 |  Bin 11683 -> 11689 bytes
 elisp/cedet-1.1/ede/ede-m3.elc                     |  Bin 1430 -> 1436 bytes
 elisp/cedet-1.1/ede/ede-make.elc                   |  Bin 2523 -> 2529 bytes
 elisp/cedet-1.1/ede/ede-pconf.elc                  |  Bin 4980 -> 4986 bytes
 elisp/cedet-1.1/ede/ede-pmake.elc                  |  Bin 18328 -> 18334 bytes
 elisp/cedet-1.1/ede/ede-proj-archive.elc           |  Bin 2233 -> 2239 bytes
 elisp/cedet-1.1/ede/ede-proj-aux.elc               |  Bin 1231 -> 1237 bytes
 elisp/cedet-1.1/ede/ede-proj-comp.elc              |  Bin 11525 -> 11531 bytes
 elisp/cedet-1.1/ede/ede-proj-elisp.elc             |  Bin 14586 -> 14592 bytes
 elisp/cedet-1.1/ede/ede-proj-info.elc              |  Bin 5880 -> 5886 bytes
 elisp/cedet-1.1/ede/ede-proj-misc.elc              |  Bin 2416 -> 2422 bytes
 elisp/cedet-1.1/ede/ede-proj-obj.elc               |  Bin 8538 -> 8544 bytes
 elisp/cedet-1.1/ede/ede-proj-prog.elc              |  Bin 4726 -> 4732 bytes
 elisp/cedet-1.1/ede/ede-proj-scheme.elc            |  Bin 1232 -> 1238 bytes
 elisp/cedet-1.1/ede/ede-proj-shared.elc            |  Bin 5669 -> 5675 bytes
 elisp/cedet-1.1/ede/ede-proj.elc                   |  Bin 23188 -> 23194 bytes
 elisp/cedet-1.1/ede/ede-shell.elc                  |  Bin 1617 -> 1623 bytes
 elisp/cedet-1.1/ede/ede-source.elc                 |  Bin 4648 -> 4654 bytes
 elisp/cedet-1.1/ede/ede-speedbar.elc               |  Bin 11516 -> 11522 bytes
 elisp/cedet-1.1/ede/ede-srecode.elc                |  Bin 2599 -> 2605 bytes
 elisp/cedet-1.1/ede/ede-system.elc                 |  Bin 3203 -> 3209 bytes
 elisp/cedet-1.1/ede/ede-util.elc                   |  Bin 2773 -> 2779 bytes
 elisp/cedet-1.1/ede/ede.elc                        |  Bin 42503 -> 42510 bytes
 elisp/cedet-1.1/ede/makefile-edit.elc              |  Bin 2960 -> 2966 bytes
 elisp/cedet-1.1/ede/project-am.elc                 |  Bin 30938 -> 30944 bytes
 elisp/cedet-1.1/eieio/chart.elc                    |  Bin 19638 -> 19644 bytes
 elisp/cedet-1.1/eieio/eieio-base.elc               |  Bin 13343 -> 13349 bytes
 elisp/cedet-1.1/eieio/eieio-comp.elc               |  Bin 4193 -> 4199 bytes
 elisp/cedet-1.1/eieio/eieio-custom.elc             |  Bin 12308 -> 12314 bytes
 elisp/cedet-1.1/eieio/eieio-datadebug.elc          |  Bin 3911 -> 3917 bytes
 elisp/cedet-1.1/eieio/eieio-doc.elc                |  Bin 10428 -> 10434 bytes
 elisp/cedet-1.1/eieio/eieio-load.elc               |  Bin 686 -> 692 bytes
 elisp/cedet-1.1/eieio/eieio-loaddefs.el            |    2 +-
 elisp/cedet-1.1/eieio/eieio-opt.elc                |  Bin 20960 -> 20966 bytes
 elisp/cedet-1.1/eieio/eieio-speedbar.elc           |  Bin 12778 -> 12784 bytes
 elisp/cedet-1.1/eieio/eieio.elc                    |  Bin 89664 -> 89670 bytes
 elisp/cedet-1.1/eieio/linemark.elc                 |  Bin 11009 -> 11015 bytes
 elisp/cedet-1.1/eieio/lmcompile.elc                |  Bin 4162 -> 4168 bytes
 elisp/cedet-1.1/semantic/bovine/bovine-debug.elc   |  Bin 4143 -> 4149 bytes
 .../semantic/bovine/bovine-grammar-macros.elc      |  Bin 5491 -> 5423 bytes
 elisp/cedet-1.1/semantic/bovine/bovine-grammar.elc |  Bin 10461 -> 10467 bytes
 .../cedet-1.1/semantic/bovine/semantic-bovine.elc  |  Bin 5419 -> 5425 bytes
 elisp/cedet-1.1/semantic/bovine/semantic-c-by.el~  | 2224 --------------------
 elisp/cedet-1.1/semantic/bovine/semantic-c.elc     |  Bin 104503 -> 104509 bytes
 elisp/cedet-1.1/semantic/bovine/semantic-clang.elc |  Bin 9210 -> 9216 bytes
 elisp/cedet-1.1/semantic/bovine/semantic-el.elc    |  Bin 38582 -> 38488 bytes
 .../semantic/bovine/semantic-erlang-by.el~         | 1824 ----------------
 .../cedet-1.1/semantic/bovine/semantic-erlang.elc  |  Bin 7291 -> 7097 bytes
 .../cedet-1.1/semantic/bovine/semantic-f90-by.el~  |  573 -----
 elisp/cedet-1.1/semantic/bovine/semantic-f90.elc   |  Bin 36357 -> 36163 bytes
 elisp/cedet-1.1/semantic/bovine/semantic-gcc.elc   |  Bin 11853 -> 11859 bytes
 elisp/cedet-1.1/semantic/bovine/semantic-java.elc  |  Bin 16750 -> 16556 bytes
 .../cedet-1.1/semantic/bovine/semantic-make-by.el~ |  398 ----
 elisp/cedet-1.1/semantic/bovine/semantic-make.elc  |  Bin 16707 -> 16413 bytes
 .../cedet-1.1/semantic/bovine/semantic-scm-by.el~  |  203 --
 elisp/cedet-1.1/semantic/bovine/semantic-scm.elc   |  Bin 9865 -> 9671 bytes
 .../semantic/ctags/semantic-ectag-lang.elc         |  Bin 8017 -> 8023 bytes
 .../semantic/ctags/semantic-ectag-lang2.elc        |  Bin 6934 -> 6740 bytes
 .../semantic/ctags/semantic-ectag-parse.elc        |  Bin 12027 -> 12033 bytes
 .../semantic/ctags/semantic-ectag-util.elc         |  Bin 4479 -> 4485 bytes
 .../cedet-1.1/semantic/ctags/semanticdb-ectag.elc  |  Bin 1869 -> 1875 bytes
 elisp/cedet-1.1/semantic/semantic-adebug.elc       |  Bin 10156 -> 10162 bytes
 .../semantic/semantic-analyze-complete.elc         |  Bin 7508 -> 7514 bytes
 .../cedet-1.1/semantic/semantic-analyze-debug.elc  |  Bin 16974 -> 16980 bytes
 elisp/cedet-1.1/semantic/semantic-analyze-fcn.elc  |  Bin 10472 -> 10478 bytes
 elisp/cedet-1.1/semantic/semantic-analyze-refs.elc |  Bin 9829 -> 9835 bytes
 elisp/cedet-1.1/semantic/semantic-analyze.elc      |  Bin 21882 -> 21888 bytes
 elisp/cedet-1.1/semantic/semantic-ast.elc          |  Bin 2820 -> 2826 bytes
 elisp/cedet-1.1/semantic/semantic-chart.elc        |  Bin 4507 -> 4513 bytes
 elisp/cedet-1.1/semantic/semantic-complete.elc     |  Bin 62340 -> 62346 bytes
 elisp/cedet-1.1/semantic/semantic-ctxt.elc         |  Bin 34807 -> 34813 bytes
 elisp/cedet-1.1/semantic/semantic-custom.elc       |  Bin 5903 -> 5909 bytes
 elisp/cedet-1.1/semantic/semantic-debug.elc        |  Bin 15567 -> 15574 bytes
 .../semantic/semantic-decorate-include.elc         |  Bin 29537 -> 29543 bytes
 .../cedet-1.1/semantic/semantic-decorate-mode.elc  |  Bin 26758 -> 26764 bytes
 elisp/cedet-1.1/semantic/semantic-decorate.elc     |  Bin 10390 -> 10396 bytes
 elisp/cedet-1.1/semantic/semantic-dep.elc          |  Bin 8100 -> 8106 bytes
 elisp/cedet-1.1/semantic/semantic-doc.elc          |  Bin 4285 -> 4291 bytes
 elisp/cedet-1.1/semantic/semantic-edit.elc         |  Bin 20934 -> 20940 bytes
 elisp/cedet-1.1/semantic/semantic-elp.elc          |  Bin 19212 -> 19218 bytes
 elisp/cedet-1.1/semantic/semantic-find.elc         |  Bin 30282 -> 30094 bytes
 elisp/cedet-1.1/semantic/semantic-fmt-utest.elc    |  Bin 3124 -> 3130 bytes
 elisp/cedet-1.1/semantic/semantic-format.elc       |  Bin 37022 -> 37028 bytes
 elisp/cedet-1.1/semantic/semantic-fw.elc           |  Bin 14515 -> 14521 bytes
 elisp/cedet-1.1/semantic/semantic-grammar-wy.el~   |  514 -----
 elisp/cedet-1.1/semantic/semantic-grammar.elc      |  Bin 73670 -> 73575 bytes
 elisp/cedet-1.1/semantic/semantic-html.elc         |  Bin 8129 -> 8135 bytes
 elisp/cedet-1.1/semantic/semantic-ia-sb.elc        |  Bin 9424 -> 9430 bytes
 elisp/cedet-1.1/semantic/semantic-ia-utest.elc     |  Bin 10313 -> 10319 bytes
 elisp/cedet-1.1/semantic/semantic-ia.elc           |  Bin 10596 -> 10602 bytes
 elisp/cedet-1.1/semantic/semantic-idle.elc         |  Bin 53135 -> 53044 bytes
 elisp/cedet-1.1/semantic/semantic-imenu.elc        |  Bin 14455 -> 14461 bytes
 elisp/cedet-1.1/semantic/semantic-lex-spp.elc      |  Bin 30920 -> 30926 bytes
 elisp/cedet-1.1/semantic/semantic-lex.elc          |  Bin 81237 -> 81243 bytes
 elisp/cedet-1.1/semantic/semantic-load.elc         |  Bin 7414 -> 7420 bytes
 elisp/cedet-1.1/semantic/semantic-loaddefs.el      |    4 +-
 elisp/cedet-1.1/semantic/semantic-m3.elc           |  Bin 6928 -> 6934 bytes
 elisp/cedet-1.1/semantic/semantic-mru-bookmark.elc |  Bin 12417 -> 12423 bytes
 elisp/cedet-1.1/semantic/semantic-regtest.elc      |  Bin 29397 -> 29403 bytes
 elisp/cedet-1.1/semantic/semantic-sb.elc           |  Bin 11533 -> 11539 bytes
 elisp/cedet-1.1/semantic/semantic-scope.elc        |  Bin 23653 -> 23659 bytes
 elisp/cedet-1.1/semantic/semantic-sort.elc         |  Bin 20587 -> 20498 bytes
 elisp/cedet-1.1/semantic/semantic-tag-file.elc     |  Bin 6790 -> 6602 bytes
 elisp/cedet-1.1/semantic/semantic-tag-ls.elc       |  Bin 22589 -> 22498 bytes
 elisp/cedet-1.1/semantic/semantic-tag-write.elc    |  Bin 4638 -> 4547 bytes
 elisp/cedet-1.1/semantic/semantic-tag.elc          |  Bin 60748 -> 60754 bytes
 elisp/cedet-1.1/semantic/semantic-texi.elc         |  Bin 21681 -> 21687 bytes
 elisp/cedet-1.1/semantic/semantic-utest-c.elc      |  Bin 3651 -> 3657 bytes
 elisp/cedet-1.1/semantic/semantic-utest.elc        |  Bin 23159 -> 23165 bytes
 elisp/cedet-1.1/semantic/semantic-util-modes.elc   |  Bin 37173 -> 37179 bytes
 elisp/cedet-1.1/semantic/semantic-util.elc         |  Bin 10548 -> 10366 bytes
 elisp/cedet-1.1/semantic/semantic.elc              |  Bin 30269 -> 30275 bytes
 elisp/cedet-1.1/semantic/semanticdb-cscope.elc     |  Bin 8527 -> 8533 bytes
 elisp/cedet-1.1/semantic/semanticdb-debug.elc      |  Bin 2941 -> 2948 bytes
 elisp/cedet-1.1/semantic/semanticdb-ebrowse.elc    |  Bin 19471 -> 19377 bytes
 elisp/cedet-1.1/semantic/semanticdb-el.elc         |  Bin 11326 -> 11232 bytes
 elisp/cedet-1.1/semantic/semanticdb-file.elc       |  Bin 13173 -> 13179 bytes
 elisp/cedet-1.1/semantic/semanticdb-find.elc       |  Bin 42720 -> 42726 bytes
 elisp/cedet-1.1/semantic/semanticdb-global.elc     |  Bin 8651 -> 8657 bytes
 elisp/cedet-1.1/semantic/semanticdb-javap.elc      |  Bin 30919 -> 30925 bytes
 elisp/cedet-1.1/semantic/semanticdb-javascript.elc |  Bin 9096 -> 9002 bytes
 elisp/cedet-1.1/semantic/semanticdb-mk.elc         |  Bin 1297 -> 1303 bytes
 elisp/cedet-1.1/semantic/semanticdb-mode.elc       |  Bin 6283 -> 6289 bytes
 elisp/cedet-1.1/semantic/semanticdb-ref.elc        |  Bin 4093 -> 4099 bytes
 elisp/cedet-1.1/semantic/semanticdb-search.elc     |  Bin 16450 -> 16456 bytes
 elisp/cedet-1.1/semantic/semanticdb-typecache.elc  |  Bin 16567 -> 16573 bytes
 elisp/cedet-1.1/semantic/semanticdb.elc            |  Bin 32268 -> 32274 bytes
 elisp/cedet-1.1/semantic/senator.elc               |  Bin 84683 -> 84689 bytes
 .../semantic/symref/semantic-symref-cscope.elc     |  Bin 2309 -> 2315 bytes
 .../semantic/symref/semantic-symref-filter.elc     |  Bin 4475 -> 4481 bytes
 .../semantic/symref/semantic-symref-global.elc     |  Bin 1971 -> 1977 bytes
 .../semantic/symref/semantic-symref-grep.elc       |  Bin 5065 -> 5071 bytes
 .../semantic/symref/semantic-symref-idutils.elc    |  Bin 2049 -> 2055 bytes
 .../semantic/symref/semantic-symref-list.el        |    2 +-
 .../semantic/symref/semantic-symref-list.elc       |  Bin 14857 -> 14856 bytes
 .../cedet-1.1/semantic/symref/semantic-symref.elc  |  Bin 12996 -> 13002 bytes
 elisp/cedet-1.1/semantic/wisent/bison-wisent.elc   |  Bin 3960 -> 3966 bytes
 .../cedet-1.1/semantic/wisent/semantic-wisent.elc  |  Bin 8354 -> 8360 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-awk-wy.el~  |  357 ----
 elisp/cedet-1.1/semantic/wisent/wisent-calc-wy.el~ |  144 --
 elisp/cedet-1.1/semantic/wisent/wisent-calc.elc    |  Bin 6159 -> 6165 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-cim-wy.el~  |  711 -------
 elisp/cedet-1.1/semantic/wisent/wisent-comp.elc    |  Bin 84738 -> 84744 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-debug.elc   |  Bin 4459 -> 4465 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-expr.elc    |  Bin 3375 -> 3381 bytes
 .../semantic/wisent/wisent-grammar-macros.elc      |  Bin 9931 -> 9863 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-grammar.elc |  Bin 7578 -> 7584 bytes
 .../semantic/wisent/wisent-java-tags-wy.el~        |  Bin 19501 -> 0 bytes
 .../cedet-1.1/semantic/wisent/wisent-java-tags.elc |  Bin 4208 -> 4214 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-java-wy.el~ |  Bin 46736 -> 0 bytes
 elisp/cedet-1.1/semantic/wisent/wisent-java.elc    |  Bin 3881 -> 3887 bytes
 .../semantic/wisent/wisent-javascript-jv-wy.el~    |  499 -----
 .../semantic/wisent/wisent-javascript.elc          |  Bin 3174 -> 3180 bytes
 .../cedet-1.1/semantic/wisent/wisent-python-wy.el~ |  795 -------
 elisp/cedet-1.1/semantic/wisent/wisent-python.elc  |  Bin 26465 -> 26375 bytes
 elisp/cedet-1.1/semantic/wisent/wisent.elc         |  Bin 14387 -> 14393 bytes
 elisp/cedet-1.1/speedbar/dframe.elc                |  Bin 25582 -> 25588 bytes
 elisp/cedet-1.1/speedbar/speedbar-load.elc         |  Bin 701 -> 707 bytes
 elisp/cedet-1.1/speedbar/speedbar-loaddefs.el      |    2 +-
 elisp/cedet-1.1/speedbar/speedbar.elc              |  Bin 120163 -> 120169 bytes
 elisp/cedet-1.1/srecode/srecode-android.elc        |  Bin 1277 -> 1283 bytes
 elisp/cedet-1.1/srecode/srecode-args.elc           |  Bin 4306 -> 4312 bytes
 elisp/cedet-1.1/srecode/srecode-compile.elc        |  Bin 14025 -> 14031 bytes
 elisp/cedet-1.1/srecode/srecode-cpp.elc            |  Bin 5136 -> 5142 bytes
 elisp/cedet-1.1/srecode/srecode-ctxt.elc           |  Bin 6197 -> 6203 bytes
 elisp/cedet-1.1/srecode/srecode-dictionary.elc     |  Bin 16288 -> 16294 bytes
 elisp/cedet-1.1/srecode/srecode-document-vars.elc  |  Bin 7246 -> 7252 bytes
 elisp/cedet-1.1/srecode/srecode-document.elc       |  Bin 14083 -> 14089 bytes
 elisp/cedet-1.1/srecode/srecode-el.elc             |  Bin 2765 -> 2771 bytes
 elisp/cedet-1.1/srecode/srecode-expandproto.elc    |  Bin 2273 -> 2279 bytes
 elisp/cedet-1.1/srecode/srecode-extract.elc        |  Bin 6396 -> 6402 bytes
 elisp/cedet-1.1/srecode/srecode-fields.elc         |  Bin 16677 -> 16683 bytes
 elisp/cedet-1.1/srecode/srecode-filters.elc        |  Bin 1272 -> 1278 bytes
 elisp/cedet-1.1/srecode/srecode-find.elc           |  Bin 7926 -> 7932 bytes
 elisp/cedet-1.1/srecode/srecode-getset.elc         |  Bin 8266 -> 8272 bytes
 elisp/cedet-1.1/srecode/srecode-insert.elc         |  Bin 28753 -> 28759 bytes
 elisp/cedet-1.1/srecode/srecode-java.elc           |  Bin 1577 -> 1583 bytes
 elisp/cedet-1.1/srecode/srecode-load.elc           |  Bin 674 -> 680 bytes
 elisp/cedet-1.1/srecode/srecode-loaddefs.el        |    2 +-
 elisp/cedet-1.1/srecode/srecode-m3.elc             |  Bin 1203 -> 1209 bytes
 elisp/cedet-1.1/srecode/srecode-map.elc            |  Bin 10213 -> 10219 bytes
 elisp/cedet-1.1/srecode/srecode-mode.elc           |  Bin 9749 -> 9755 bytes
 elisp/cedet-1.1/srecode/srecode-semantic.elc       |  Bin 11323 -> 11329 bytes
 elisp/cedet-1.1/srecode/srecode-srt.elc            |  Bin 3150 -> 3156 bytes
 elisp/cedet-1.1/srecode/srecode-table.elc          |  Bin 7670 -> 7676 bytes
 elisp/cedet-1.1/srecode/srecode-template-mode.elc  |  Bin 23416 -> 23422 bytes
 elisp/cedet-1.1/srecode/srecode-template-wy.el~    |  309 ---
 elisp/cedet-1.1/srecode/srecode-template.elc       |  Bin 2054 -> 2060 bytes
 elisp/cedet-1.1/srecode/srecode-test-getset.elc    |  Bin 3662 -> 3668 bytes
 elisp/cedet-1.1/srecode/srecode-test.elc           |  Bin 7646 -> 7652 bytes
 elisp/cedet-1.1/srecode/srecode-texi.elc           |  Bin 9119 -> 9125 bytes
 elisp/cedet-1.1/srecode/srecode.elc                |  Bin 1036 -> 1042 bytes
 elisp/cedet-1.1/tests/cedet-integ-test.elc         |  Bin 9145 -> 9151 bytes
 elisp/cedet-1.1/tests/cit-android.elc              |  Bin 1600 -> 1606 bytes
 elisp/cedet-1.1/tests/cit-arduino.elc              |  Bin 3247 -> 3253 bytes
 elisp/cedet-1.1/tests/cit-cpp.elc                  |  Bin 7120 -> 7126 bytes
 elisp/cedet-1.1/tests/cit-dist.elc                 |  Bin 1400 -> 1406 bytes
 elisp/cedet-1.1/tests/cit-el.elc                   |  Bin 3388 -> 3394 bytes
 elisp/cedet-1.1/tests/cit-externaldb.elc           |  Bin 3730 -> 3736 bytes
 elisp/cedet-1.1/tests/cit-gnustep.elc              |  Bin 2689 -> 2695 bytes
 elisp/cedet-1.1/tests/cit-load.elc                 |  Bin 1178 -> 1184 bytes
 elisp/cedet-1.1/tests/cit-projvar.elc              |  Bin 2056 -> 2062 bytes
 elisp/cedet-1.1/tests/cit-srec.elc                 |  Bin 1156 -> 1162 bytes
 elisp/cedet-1.1/tests/cit-symref.elc               |  Bin 2053 -> 2059 bytes
 elisp/cedet-1.1/tests/cit-texi.elc                 |  Bin 2333 -> 2339 bytes
 elisp/cedet-1.1/tests/cit-uml.elc                  |  Bin 1697 -> 1703 bytes
 rc/emacs-rc-cedet.el                               |    2 +
 275 files changed, 28 insertions(+), 10298 deletions(-)
 delete mode 100644 elisp/cedet-1.1/cogre/wisent-dot-wy.el~
 delete mode 100644 elisp/cedet-1.1/contrib/wisent-csharp-wy.el~
 delete mode 100644 elisp/cedet-1.1/contrib/wisent-php-wy.el~
 delete mode 100644 elisp/cedet-1.1/contrib/wisent-ruby-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/bovine/semantic-c-by.el~
 delete mode 100644 elisp/cedet-1.1/semantic/bovine/semantic-erlang-by.el~
 delete mode 100644 elisp/cedet-1.1/semantic/bovine/semantic-f90-by.el~
 delete mode 100644 elisp/cedet-1.1/semantic/bovine/semantic-make-by.el~
 delete mode 100644 elisp/cedet-1.1/semantic/bovine/semantic-scm-by.el~
 delete mode 100644 elisp/cedet-1.1/semantic/semantic-grammar-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-awk-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-calc-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-cim-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-java-tags-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-java-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-javascript-jv-wy.el~
 delete mode 100644 elisp/cedet-1.1/semantic/wisent/wisent-python-wy.el~
 delete mode 100644 elisp/cedet-1.1/srecode/srecode-template-wy.el~

diff --git a/.emacs b/.emacs
index d20c02f..1c0400c 100755
--- a/.emacs
+++ b/.emacs
@@ -19,7 +19,6 @@
  '(ecb-layout-name "lutts")
  '(ecb-layout-window-sizes (quote (("lutts" (0.23684210526315788 . 0.4791666666666667) (0.23684210526315788 . 0.5) (0.19473684210526315 . 0.9791666666666666)) ("left-symboldef" (0.3263157894736842 . 0.2916666666666667) (0.3263157894736842 . 0.22916666666666666) (0.3263157894736842 . 0.22916666666666666) (0.3263157894736842 . 0.22916666666666666)))))
  '(ecb-options-version "2.40")
- '(ede-project-directories (quote ("/home/lutts/android/disk2/linux/4780/linux-2.6.31.3")))
  '(menu-bar-mode t)
  '(scroll-bar-mode nil)
  '(tool-bar-mode nil)
@@ -310,3 +309,17 @@ Equivalent to beginning-of-line, open-line."
 (global-set-key (kbd "<C-f5>") 'bm-toggle)
 (global-set-key (kbd "<f5>")   'bm-next)
 (global-set-key (kbd "<S-f5>") 'bm-previous)
+
+;;increase max-specpdl-size this big to start the debugger 
+(setq max-specpdl-size  5000)
+
+
+(ede-cpp-root-project "fpga-jz4780"
+		      :name "fpga-jz4780"
+		      :file "~/android/disk2/linux/4780/fpga-jz4780/Makefile"
+		      :include-path '("/include")
+		      :system-include-path '("/opt/mipseltools-gcc412-glibc261/mipsel-linux/include")
+		      :spp-files '( "linux/autoconf.h" )
+;;		      :spp-table '(("isUnix" . "")
+;;				   ("BOOST_TEST_DYN_LINK" . ""))
+)
diff --git a/elisp/cedet-1.1/cogre/cogre-ascii.elc b/elisp/cedet-1.1/cogre/cogre-ascii.elc
index 5b60824..9b670d6 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-ascii.elc and b/elisp/cedet-1.1/cogre/cogre-ascii.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-convert.elc b/elisp/cedet-1.1/cogre/cogre-convert.elc
index e42e775..07da9e4 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-convert.elc and b/elisp/cedet-1.1/cogre/cogre-convert.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-dot-mode.elc b/elisp/cedet-1.1/cogre/cogre-dot-mode.elc
index ceb5fdf..48fa91d 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-dot-mode.elc and b/elisp/cedet-1.1/cogre/cogre-dot-mode.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-layout.elc b/elisp/cedet-1.1/cogre/cogre-layout.elc
index e656a37..f1c0b90 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-layout.elc and b/elisp/cedet-1.1/cogre/cogre-layout.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-load.elc b/elisp/cedet-1.1/cogre/cogre-load.elc
index c43f80b..ef79e54 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-load.elc and b/elisp/cedet-1.1/cogre/cogre-load.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-loaddefs.el b/elisp/cedet-1.1/cogre/cogre-loaddefs.el
index 1a382f7..fdd14b7 100644
--- a/elisp/cedet-1.1/cogre/cogre-loaddefs.el
+++ b/elisp/cedet-1.1/cogre/cogre-loaddefs.el
@@ -267,8 +267,8 @@ Setup buffer for parse.
 
 ;;;***
 
-;;;### (autoloads nil nil ("cogre-load.el" "wisent-dot-wy.el") (20565
-;;;;;;  26918 943280))
+;;;### (autoloads nil nil ("cogre-load.el" "wisent-dot-wy.el") (20584
+;;;;;;  5768 903853))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/cogre/cogre-mode.elc b/elisp/cedet-1.1/cogre/cogre-mode.elc
index 5671d50..0afdfd4 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-mode.elc and b/elisp/cedet-1.1/cogre/cogre-mode.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-periodic.elc b/elisp/cedet-1.1/cogre/cogre-periodic.elc
index 9e7c3d2..e24e794 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-periodic.elc and b/elisp/cedet-1.1/cogre/cogre-periodic.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-semantic.elc b/elisp/cedet-1.1/cogre/cogre-semantic.elc
index e40e21b..2c5bec8 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-semantic.elc and b/elisp/cedet-1.1/cogre/cogre-semantic.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-srecode.elc b/elisp/cedet-1.1/cogre/cogre-srecode.elc
index 78cd2d1..4323d16 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-srecode.elc and b/elisp/cedet-1.1/cogre/cogre-srecode.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-uml.elc b/elisp/cedet-1.1/cogre/cogre-uml.elc
index a1a8e1d..e4075e8 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-uml.elc and b/elisp/cedet-1.1/cogre/cogre-uml.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre-utest.elc b/elisp/cedet-1.1/cogre/cogre-utest.elc
index 84d2196..07fc509 100644
Binary files a/elisp/cedet-1.1/cogre/cogre-utest.elc and b/elisp/cedet-1.1/cogre/cogre-utest.elc differ
diff --git a/elisp/cedet-1.1/cogre/cogre.elc b/elisp/cedet-1.1/cogre/cogre.elc
index 2e71e1e..3c87a3c 100644
Binary files a/elisp/cedet-1.1/cogre/cogre.elc and b/elisp/cedet-1.1/cogre/cogre.elc differ
diff --git a/elisp/cedet-1.1/cogre/picture-hack.elc b/elisp/cedet-1.1/cogre/picture-hack.elc
index 500e130..827f109 100644
Binary files a/elisp/cedet-1.1/cogre/picture-hack.elc and b/elisp/cedet-1.1/cogre/picture-hack.elc differ
diff --git a/elisp/cedet-1.1/cogre/wisent-dot-wy.el~ b/elisp/cedet-1.1/cogre/wisent-dot-wy.el~
deleted file mode 100644
index 0ced0ec..0000000
--- a/elisp/cedet-1.1/cogre/wisent-dot-wy.el~
+++ /dev/null
@@ -1,281 +0,0 @@
-;;; wisent-dot-wy.el --- Generated parser support file
-
-;; Copyright (C) 2003, 2004, 2009 Eric M. Ludlam
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:43-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-dot.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-dot-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("digraph" . DIGRAPH)
-     ("graph" . GRAPH)
-     ("subgraph" . SUBGRAPH)
-     ("node" . NODE))
-   '(("node" summary "node [<attribute>...];")
-     ("subgraph" summary "subgraph <name> { <graph elements> ... }")
-     ("graph" summary "graph <name> { <graph elements> ... }")
-     ("digraph" summary "digraph <name> { <graph elements> ... }")))
-  "Table of language keywords.")
-
-(defconst wisent-dot-wy--token-table
-  (semantic-lex-make-type-table
-   '(("number"
-      (number))
-     ("string"
-      (string))
-     ("symbol"
-      (symbol))
-     ("close-paren"
-      (RPAREN . ")")
-      (RBRACKET . "]")
-      (RBRACE . "}"))
-     ("open-paren"
-      (LPAREN . "(")
-      (LBRACKET . "[")
-      (LBRACE . "{"))
-     ("block"
-      (PAREN_BLOCK . "(LPAREN RPAREN)")
-      (BRACE_BLOCK . "(LBRACE RBRACE)")
-      (BRACKET_BLOCK . "(LBRACKET RBRACKET)"))
-     ("punctuation"
-      (COMMA . ",")
-      (SEMI . ";")
-      (EQUAL . "=")
-      (LINK . "--")
-      (DILINK . "->")))
-   '(("number" :declared t)
-     ("string" :declared t)
-     ("symbol" :declared t)
-     ("block" :declared t)
-     ("punctuation" syntax "\\s.+")
-     ("punctuation" :declared t)
-     ("keyword" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst wisent-dot-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((DIGRAPH GRAPH SUBGRAPH NODE DILINK LINK EQUAL SEMI COMMA BRACKET_BLOCK BRACE_BLOCK PAREN_BLOCK LBRACE RBRACE LBRACKET RBRACKET LPAREN RPAREN symbol string number)
-       nil
-       (dot_file
-	((digraph))
-	((graph)))
-       (digraph
-	((DIGRAPH symbol BRACE_BLOCK)
-	 (wisent-raw-tag
-	  (semantic-tag $2 'digraph :members
-			(semantic-parse-region
-			 (car $region3)
-			 (cdr $region3)
-			 'graph-contents 1)))))
-       (graph
-	((GRAPH symbol BRACE_BLOCK)
-	 (wisent-raw-tag
-	  (semantic-tag $2 'graph :members
-			(semantic-parse-region
-			 (car $region3)
-			 (cdr $region3)
-			 'graph-contents 1)))))
-       (graph-contents
-	((LBRACE)
-	 nil)
-	((RBRACE)
-	 nil)
-	((graph-attributes))
-	((subgraph))
-	((node))
-	((graphgeneric))
-	((named-node))
-	((links)))
-       (subgraph
-	((SUBGRAPH symbol BRACE_BLOCK)
-	 (wisent-raw-tag
-	  (semantic-tag $2 'graph :members
-			(semantic-parse-region
-			 (car $region3)
-			 (cdr $region3)
-			 'graph-contents 1)))))
-       (graphgeneric
-	((GRAPH BRACKET_BLOCK SEMI)
-	 (wisent-raw-tag
-	  (semantic-tag "GRAPH" 'generic-graph :attributes
-			(semantic-parse-region
-			 (car $region2)
-			 (cdr $region2)
-			 'attribute-block 1)))))
-       (node
-	((NODE BRACKET_BLOCK SEMI)
-	 (wisent-raw-tag
-	  (semantic-tag "NODE" 'generic-node :attributes
-			(semantic-parse-region
-			 (car $region2)
-			 (cdr $region2)
-			 'attribute-block 1)))))
-       (graph-attributes
-	((GRAPH BRACKET_BLOCK SEMI)
-	 (wisent-raw-tag
-	  (semantic-tag "GRAPH" 'graph-attributes :attributes
-			(semantic-parse-region
-			 (car $region2)
-			 (cdr $region2)
-			 'attribute-block 1)))))
-       (named-node
-	((name BRACKET_BLOCK SEMI)
-	 (wisent-raw-tag
-	  (semantic-tag $1 'node :attributes
-			(semantic-parse-region
-			 (car $region2)
-			 (cdr $region2)
-			 'attribute-block 1)))))
-       (links
-	((name DILINK name opt-link-attributes opt-semi)
-	 (wisent-raw-tag
-	  (semantic-tag $1 'link :to $3 :attributes $4)))
-	((name LINK name opt-link-attributes opt-semi)
-	 (wisent-raw-tag
-	  (semantic-tag $1 'link :to $3 :attributes $4))))
-       (name
-	((symbol)
-	 (identity $1))
-	((string)
-	 (read $1)))
-       (attribute-block
-	((LBRACKET)
-	 nil)
-	((RBRACKET)
-	 nil)
-	((COMMA)
-	 nil)
-	((symbol EQUAL name)
-	 (wisent-raw-tag
-	  (semantic-tag $1 'attribute :value $3))))
-       (opt-semi
-	((SEMI)
-	 nil)
-	(nil))
-       (opt-link-attributes
-	((BRACKET_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'attribute-block 1))
-	(nil)))
-     '(dot_file graph-contents attribute-block)))
-  "Parser table.")
-
-(defun wisent-dot-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-dot-wy--parse-table
-	semantic-debug-parser-source "wisent-dot.wy"
-	semantic-flex-keywords-obarray wisent-dot-wy--keyword-table
-	semantic-lex-types-obarray wisent-dot-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-keyword-type-analyzer wisent-dot-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-block-type-analyzer wisent-dot-wy--<block>-block-analyzer
-  "block analyzer for <block> tokens."
-  "\\s(\\|\\s)"
-  '((("[" LBRACKET BRACKET_BLOCK)
-     ("{" LBRACE BRACE_BLOCK)
-     ("(" LPAREN PAREN_BLOCK))
-    ("]" RBRACKET)
-    ("}" RBRACE)
-    (")" RPAREN))
-  )
-
-(define-lex-regex-type-analyzer wisent-dot-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  "\\(\\sw\\|\\s_\\)+"
-  nil
-  'symbol)
-
-(define-lex-sexp-type-analyzer wisent-dot-wy--<string>-sexp-analyzer
-  "sexp analyzer for <string> tokens."
-  "\\s\""
-  'string)
-
-(define-lex-regex-type-analyzer wisent-dot-wy--<number>-regexp-analyzer
-  "regexp analyzer for <number> tokens."
-  semantic-lex-number-expression
-  nil
-  'number)
-
-(define-lex-string-type-analyzer wisent-dot-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\s.+"
-  '((COMMA . ",")
-    (SEMI . ";")
-    (EQUAL . "=")
-    (LINK . "--")
-    (DILINK . "->"))
-  'punctuation)
-
-
-;;; Epilogue
-;;
-(define-lex wisent-dot-lexer
-  "Lexical analyzer that handles DOT buffers.
-It ignores whitespace, newlines and comments."
-  semantic-lex-ignore-whitespace
-  semantic-lex-ignore-newline
-  semantic-lex-ignore-comments
-  wisent-dot-wy--<keyword>-keyword-analyzer
-  wisent-dot-wy--<symbol>-regexp-analyzer
-  wisent-dot-wy--<block>-block-analyzer
-  ;; ?? semantic-lex-close-paren
-  wisent-dot-wy--<number>-regexp-analyzer
-  wisent-dot-wy--<string>-sexp-analyzer
-  wisent-dot-wy--<punctuation>-string-analyzer
-  semantic-lex-default-action
-  )
-
-(provide 'wisent-dot-wy)
-
-;;; wisent-dot-wy.el ends here
diff --git a/elisp/cedet-1.1/cogre/wisent-dot.elc b/elisp/cedet-1.1/cogre/wisent-dot.elc
index dbf4d47..24aed1b 100644
Binary files a/elisp/cedet-1.1/cogre/wisent-dot.elc and b/elisp/cedet-1.1/cogre/wisent-dot.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-android.elc b/elisp/cedet-1.1/common/cedet-android.elc
index 7a73aa0..2296ef7 100644
Binary files a/elisp/cedet-1.1/common/cedet-android.elc and b/elisp/cedet-1.1/common/cedet-android.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-autogen.elc b/elisp/cedet-1.1/common/cedet-autogen.elc
index d8c9162..9550f94 100644
Binary files a/elisp/cedet-1.1/common/cedet-autogen.elc and b/elisp/cedet-1.1/common/cedet-autogen.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-compat.elc b/elisp/cedet-1.1/common/cedet-compat.elc
index 48512f1..5f5e4f5 100644
Binary files a/elisp/cedet-1.1/common/cedet-compat.elc and b/elisp/cedet-1.1/common/cedet-compat.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-cscope.elc b/elisp/cedet-1.1/common/cedet-cscope.elc
index 59c3fa0..d3dba30 100644
Binary files a/elisp/cedet-1.1/common/cedet-cscope.elc and b/elisp/cedet-1.1/common/cedet-cscope.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-edebug.elc b/elisp/cedet-1.1/common/cedet-edebug.elc
index 9904f67..5c751df 100644
Binary files a/elisp/cedet-1.1/common/cedet-edebug.elc and b/elisp/cedet-1.1/common/cedet-edebug.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-files.elc b/elisp/cedet-1.1/common/cedet-files.elc
index 70122f5..3754291 100644
Binary files a/elisp/cedet-1.1/common/cedet-files.elc and b/elisp/cedet-1.1/common/cedet-files.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-global.elc b/elisp/cedet-1.1/common/cedet-global.elc
index d262288..7baaa25 100644
Binary files a/elisp/cedet-1.1/common/cedet-global.elc and b/elisp/cedet-1.1/common/cedet-global.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-graphviz.elc b/elisp/cedet-1.1/common/cedet-graphviz.elc
index 734744b..e627c39 100644
Binary files a/elisp/cedet-1.1/common/cedet-graphviz.elc and b/elisp/cedet-1.1/common/cedet-graphviz.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-idutils.elc b/elisp/cedet-1.1/common/cedet-idutils.elc
index 674b16c..597a3de 100644
Binary files a/elisp/cedet-1.1/common/cedet-idutils.elc and b/elisp/cedet-1.1/common/cedet-idutils.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-java.elc b/elisp/cedet-1.1/common/cedet-java.elc
index 8b3aff7..44edf0d 100644
Binary files a/elisp/cedet-1.1/common/cedet-java.elc and b/elisp/cedet-1.1/common/cedet-java.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-load.elc b/elisp/cedet-1.1/common/cedet-load.elc
index c13ebcb..57fda1e 100644
Binary files a/elisp/cedet-1.1/common/cedet-load.elc and b/elisp/cedet-1.1/common/cedet-load.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-loaddefs.el b/elisp/cedet-1.1/common/cedet-loaddefs.el
index 9ef6778..a949a2a 100644
--- a/elisp/cedet-1.1/common/cedet-loaddefs.el
+++ b/elisp/cedet-1.1/common/cedet-loaddefs.el
@@ -592,7 +592,7 @@ Only pulses the line if `pulse-command-advice-flag' is non-nil.
 ;;;***
 
 ;;;### (autoloads nil nil ("cedet-load.el" "cedet.el" "ezimage.el"
-;;;;;;  "working.el") (20565 26887 904219))
+;;;;;;  "working.el") (20584 5746 830855))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/common/cedet-m3.elc b/elisp/cedet-1.1/common/cedet-m3.elc
index 7e61ca2..96eb5ce 100644
Binary files a/elisp/cedet-1.1/common/cedet-m3.elc and b/elisp/cedet-1.1/common/cedet-m3.elc differ
diff --git a/elisp/cedet-1.1/common/cedet-utests.elc b/elisp/cedet-1.1/common/cedet-utests.elc
index a1f8c3a..91efaa3 100644
Binary files a/elisp/cedet-1.1/common/cedet-utests.elc and b/elisp/cedet-1.1/common/cedet-utests.elc differ
diff --git a/elisp/cedet-1.1/common/cedet.elc b/elisp/cedet-1.1/common/cedet.elc
index b36a979..b6937e5 100644
Binary files a/elisp/cedet-1.1/common/cedet.elc and b/elisp/cedet-1.1/common/cedet.elc differ
diff --git a/elisp/cedet-1.1/common/data-debug.elc b/elisp/cedet-1.1/common/data-debug.elc
index 6924c39..0dee2f9 100644
Binary files a/elisp/cedet-1.1/common/data-debug.elc and b/elisp/cedet-1.1/common/data-debug.elc differ
diff --git a/elisp/cedet-1.1/common/ezimage.elc b/elisp/cedet-1.1/common/ezimage.elc
index c8962c0..2c46d00 100644
Binary files a/elisp/cedet-1.1/common/ezimage.elc and b/elisp/cedet-1.1/common/ezimage.elc differ
diff --git a/elisp/cedet-1.1/common/fame.elc b/elisp/cedet-1.1/common/fame.elc
index 36fd9c8..3c202f2 100644
Binary files a/elisp/cedet-1.1/common/fame.elc and b/elisp/cedet-1.1/common/fame.elc differ
diff --git a/elisp/cedet-1.1/common/inversion.elc b/elisp/cedet-1.1/common/inversion.elc
index 3fc2200..fd11614 100644
Binary files a/elisp/cedet-1.1/common/inversion.elc and b/elisp/cedet-1.1/common/inversion.elc differ
diff --git a/elisp/cedet-1.1/common/mode-local.elc b/elisp/cedet-1.1/common/mode-local.elc
index 75cde76..d626d9d 100644
Binary files a/elisp/cedet-1.1/common/mode-local.elc and b/elisp/cedet-1.1/common/mode-local.elc differ
diff --git a/elisp/cedet-1.1/common/pprint.elc b/elisp/cedet-1.1/common/pprint.elc
index e5ce2b2..2e4cfd7 100644
Binary files a/elisp/cedet-1.1/common/pprint.elc and b/elisp/cedet-1.1/common/pprint.elc differ
diff --git a/elisp/cedet-1.1/common/pulse.elc b/elisp/cedet-1.1/common/pulse.elc
index 0508e2a..134da12 100644
Binary files a/elisp/cedet-1.1/common/pulse.elc and b/elisp/cedet-1.1/common/pulse.elc differ
diff --git a/elisp/cedet-1.1/common/working.elc b/elisp/cedet-1.1/common/working.elc
index e5147e9..38a3a79 100644
Binary files a/elisp/cedet-1.1/common/working.elc and b/elisp/cedet-1.1/common/working.elc differ
diff --git a/elisp/cedet-1.1/contrib/cedet-contrib-load.elc b/elisp/cedet-1.1/contrib/cedet-contrib-load.elc
index 23a4130..a3cc57d 100644
Binary files a/elisp/cedet-1.1/contrib/cedet-contrib-load.elc and b/elisp/cedet-1.1/contrib/cedet-contrib-load.elc differ
diff --git a/elisp/cedet-1.1/contrib/cedet-contrib.elc b/elisp/cedet-1.1/contrib/cedet-contrib.elc
index eb19c76..1f42af9 100644
Binary files a/elisp/cedet-1.1/contrib/cedet-contrib.elc and b/elisp/cedet-1.1/contrib/cedet-contrib.elc differ
diff --git a/elisp/cedet-1.1/contrib/contrib-loaddefs.el b/elisp/cedet-1.1/contrib/contrib-loaddefs.el
index e3ed461..82c489b 100644
--- a/elisp/cedet-1.1/contrib/contrib-loaddefs.el
+++ b/elisp/cedet-1.1/contrib/contrib-loaddefs.el
@@ -102,7 +102,7 @@ Use the alternate LALR(1) parser.
 
 ;;;### (autoloads nil nil ("cedet-contrib-load.el" "cedet-contrib.el"
 ;;;;;;  "semantic-ectag-scala.el" "wisent-csharp-wy.el" "wisent-php-wy.el"
-;;;;;;  "wisent-ruby-wy.el" "wisent-ruby.el") (20565 26921 62201))
+;;;;;;  "wisent-ruby-wy.el" "wisent-ruby.el") (20584 5771 96039))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/contrib/eassist.elc b/elisp/cedet-1.1/contrib/eassist.elc
index 2b222f7..060d3c2 100644
Binary files a/elisp/cedet-1.1/contrib/eassist.elc and b/elisp/cedet-1.1/contrib/eassist.elc differ
diff --git a/elisp/cedet-1.1/contrib/ede-gnustep.elc b/elisp/cedet-1.1/contrib/ede-gnustep.elc
index 6b0a294..e9e50ff 100644
Binary files a/elisp/cedet-1.1/contrib/ede-gnustep.elc and b/elisp/cedet-1.1/contrib/ede-gnustep.elc differ
diff --git a/elisp/cedet-1.1/contrib/semantic-ectag-scala.elc b/elisp/cedet-1.1/contrib/semantic-ectag-scala.elc
index 60532dd..8b718f8 100644
Binary files a/elisp/cedet-1.1/contrib/semantic-ectag-scala.elc and b/elisp/cedet-1.1/contrib/semantic-ectag-scala.elc differ
diff --git a/elisp/cedet-1.1/contrib/semantic-tag-folding.elc b/elisp/cedet-1.1/contrib/semantic-tag-folding.elc
index 3214499..4eae158 100644
Binary files a/elisp/cedet-1.1/contrib/semantic-tag-folding.elc and b/elisp/cedet-1.1/contrib/semantic-tag-folding.elc differ
diff --git a/elisp/cedet-1.1/contrib/wisent-csharp-wy.el~ b/elisp/cedet-1.1/contrib/wisent-csharp-wy.el~
deleted file mode 100644
index 7abe982..0000000
Binary files a/elisp/cedet-1.1/contrib/wisent-csharp-wy.el~ and /dev/null differ
diff --git a/elisp/cedet-1.1/contrib/wisent-csharp.elc b/elisp/cedet-1.1/contrib/wisent-csharp.elc
index 3ecbb63..0b63e56 100644
Binary files a/elisp/cedet-1.1/contrib/wisent-csharp.elc and b/elisp/cedet-1.1/contrib/wisent-csharp.elc differ
diff --git a/elisp/cedet-1.1/contrib/wisent-php-wy.el~ b/elisp/cedet-1.1/contrib/wisent-php-wy.el~
deleted file mode 100644
index e616e2e..0000000
--- a/elisp/cedet-1.1/contrib/wisent-php-wy.el~
+++ /dev/null
@@ -1,841 +0,0 @@
-;;; wisent-php-wy.el --- Generated parser support file
-
-;; Copyright (C) 2008 Free Software Foundation
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:47-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-php.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-php-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("exit" . T_EXIT)
-     ("die" . T_EXIT)
-     ("function" . T_FUNCTION)
-     ("const" . T_CONST)
-     ("return" . T_RETURN)
-     ("try" . T_TRY)
-     ("catch" . T_CATCH)
-     ("throw" . T_THROW)
-     ("if" . T_IF)
-     ("elseif" . T_ELSEIF)
-     ("endif" . T_ENDIF)
-     ("else" . T_ELSE)
-     ("while" . T_WHILE)
-     ("endwhile" . T_ENDWHILE)
-     ("do" . T_DO)
-     ("for" . T_FOR)
-     ("endfor" . T_ENDFOR)
-     ("foreach" . T_FOREACH)
-     ("endforeach" . T_ENDFOREACH)
-     ("declare" . T_DECLARE)
-     ("enddeclare" . T_ENDDECLARE)
-     ("instanceof" . T_INSTANCEOF)
-     ("int" . INT)
-     ("as" . T_AS)
-     ("switch" . T_SWITCH)
-     ("endswitch" . T_ENDSWITCH)
-     ("case" . T_CASE)
-     ("default" . T_DEFAULT)
-     ("break" . T_BREAK)
-     ("continue" . T_CONTINUE)
-     ("echo" . T_ECHO)
-     ("print" . T_PRINT)
-     ("class" . T_CLASS)
-     ("interface" . T_INTERFACE)
-     ("extends" . T_EXTENDS)
-     ("implements" . T_IMPLEMENTS)
-     ("new" . T_NEW)
-     ("package" . PACKAGE)
-     ("clone" . T_CLONE)
-     ("var" . T_VAR)
-     ("eval" . T_EVAL)
-     ("include" . T_INCLUDE)
-     ("include_once" . T_INCLUDE_ONCE)
-     ("require" . T_REQUIRE)
-     ("require_once" . T_REQUIRE_ONCE)
-     ("use" . T_USE)
-     ("global" . T_GLOBAL)
-     ("isset" . T_ISSET)
-     ("empty" . T_EMPTY)
-     ("__halt_compiler" . T_HALT_COMPILER)
-     ("static" . T_STATIC)
-     ("abstract" . T_ABSTRACT)
-     ("final" . T_FINAL)
-     ("private" . T_PRIVATE)
-     ("protected" . T_PROTECTED)
-     ("public" . T_PUBLIC)
-     ("unset" . T_UNSET)
-     ("list" . T_LIST)
-     ("array" . T_ARRAY)
-     ("or" . T_LOGICAL_OR)
-     ("and" . T_LOGICAL_AND)
-     ("xor" . T_LOGICAL_XOR)
-     ("__CLASS__" . T_CLASS_C)
-     ("__FUNCTION__" . T_FUNC_C)
-     ("__METHOD__" . T_METHOD_C)
-     ("__LINE__" . T_LINE)
-     ("__FILE__" . T_FILE)
-     ("@author" . _AUTHOR)
-     ("@version" . _VERSION)
-     ("@param" . _PARAM)
-     ("@return" . _RETURN)
-     ("@exception" . _EXCEPTION)
-     ("@throws" . _THROWS)
-     ("@see" . _SEE)
-     ("@since" . _SINCE)
-     ("@serial" . _SERIAL)
-     ("@serialData" . _SERIALDATA)
-     ("@serialField" . _SERIALFIELD)
-     ("@deprecated" . _DEPRECATED))
-   '(("@deprecated" phpdoc
-      (seq 12 usage
-	   (type function variable)
-	   opt t))
-     ("@serialField" phpdoc
-      (seq 11 usage
-	   (variable)
-	   opt t))
-     ("@serialData" phpdoc
-      (seq 10 usage
-	   (function)
-	   opt t))
-     ("@serial" phpdoc
-      (seq 9 usage
-	   (variable)
-	   opt t))
-     ("@since" phpdoc
-      (seq 8 usage
-	   (type function variable)
-	   opt t))
-     ("@see" phpdoc
-      (seq 7 usage
-	   (type function variable)
-	   opt t with-ref t))
-     ("@throws" phpdoc
-      (seq 6 usage
-	   (function)
-	   with-name t))
-     ("@exception" phpdoc
-      (seq 5 usage
-	   (function)
-	   with-name t))
-     ("@return" phpdoc
-      (seq 4 usage
-	   (function)))
-     ("@param" phpdoc
-      (seq 3 usage
-	   (function)
-	   with-name t))
-     ("@version" phpdoc
-      (seq 2 usage
-	   (type)))
-     ("@author" phpdoc
-      (seq 1 usage
-	   (type)))
-     ("public" summary "Access level modifier: public {class|interface|<type>} <name> ...")
-     ("protected" summary "Access level modifier: protected {class|interface|<type>} <name> ...")
-     ("private" summary "Access level modifier: private {class|interface|<type>} <name> ...")
-     ("final" summary "Class|Member declaration modifier: final {class|<type>} <name> ...")
-     ("abstract" summary "Class|Method declaration modifier: abstract {class|<type>} <name> ...")
-     ("static" summary "Declaration modifier: static {class|interface|<type>} <name> ...")
-     ("implements" summary "Class SuperInterfaces declaration: implements <name> [, ...]")
-     ("extends" summary "SuperClass|SuperInterfaces declaration: extends <name> [, ...]")
-     ("interface" summary "Interface declaration: interface <name>")
-     ("class" summary "Class declaration: class <name>")
-     ("continue" summary "continue [<label>] ;")
-     ("break" summary "break [<label>] ;")
-     ("default" summary "switch(<expr>) { ... default: <stmts>}")
-     ("case" summary "switch(<expr>) {case <const-expr>: <stmts> ... }")
-     ("for" summary "for ([<init-expr>]; [<expr>]; [<update-expr>]) <stmt>")
-     ("do" summary "do <stmt> while (<expr>);")
-     ("while" summary "while (<expr>) <stmt> | do <stmt> while (<expr>);")
-     ("else" summary "if (<expr>) <stmt> else <stmt>")
-     ("if" summary "if (<expr>) <stmt> [else <stmt>]")
-     ("catch" summary "try {<stmts>} catch(<parm>) {<stmts>} ... ")
-     ("try" summary "try {<stmts>} [catch(<parm>) {<stmts>} ...] [finally {<stmts>}]")
-     ("return" summary "return [<expr>] ;")
-     ("const" summary "Unused reserved word")))
-  "Table of language keywords.")
-
-(defconst wisent-php-wy--token-table
-  (semantic-lex-make-type-table
-   '(("<no-type>"
-      (T_IF)
-      (T_EXIT))
-     ("code"
-      (EPILOGUE)
-      (PROLOGUE))
-     ("number"
-      (NUMBER_LITERAL))
-     ("string"
-      (STRING_LITERAL))
-     ("symbol"
-      (IDENTIFIER))
-     ("punctuation"
-      (T_DOLLER . "$")
-      (T_ASTERISK . "@")
-      (T_COMP . "~")
-      (T_OR . "|")
-      (T_XOR . "^")
-      (T_QUESTION . "?")
-      (T_URSHIFTEQ . ">>>=")
-      (T_URSHIFT . ">>>")
-      (T_GT . ">")
-      (T_EQ . "=")
-      (T_LT . "<")
-      (T_SEMI . ";")
-      (T_COLON . ":")
-      (T_DIV . "/")
-      (T_DOT . ".")
-      (T_MINUS . "-")
-      (T_COMMA . ",")
-      (T_PLUS . "+")
-      (T_MULT . "*")
-      (T_AND . "&")
-      (T_MOD . "%")
-      (T_NOT . "!")
-      (T_HEREDOC . "<<<")
-      (T_DOUBLE_ARROW . "=>")
-      (T_SR . ">>")
-      (T_SL . "<<")
-      (T_BOOLEAN_AND . "&&")
-      (T_BOOLEAN_OR . "||")
-      (T_XOR_EQUAL . "^=")
-      (T_OR_EQUAL . "|=")
-      (T_AND_EQUAL . "&=")
-      (T_SR_EQUAL . ">>=")
-      (T_SL_EQUAL . "<<=")
-      (T_MOD_EQUAL . "%=")
-      (T_CONCAT_EQUAL . ".=")
-      (T_DIV_EQUAL . "/=")
-      (T_MUL_EQUAL . "*=")
-      (T_MINUS_EQUAL . "-=")
-      (T_PLUS_EQUAL . "+=")
-      (T_IS_GREATER_OR_EQUAL . ">=")
-      (T_IS_SMALLER_OR_EQUAL . "<=")
-      (T_IS_NOT_EQUAL . "<>")
-      (T_IS_NOT_EQUAL . "!=")
-      (T_IS_EQUAL . "==")
-      (T_IS_NOT_IDENTICAL . "!==")
-      (T_IS_IDENTICAL . "===")
-      (T_DEC . "--")
-      (T_INC . "++")
-      (T_PAAMAYIM_NEKUDOTAYIM . "::")
-      (T_DEREF . "->"))
-     ("close-paren"
-      (RBRACK . "]")
-      (RBRACE . "}")
-      (RPAREN . ")"))
-     ("open-paren"
-      (LBRACK . "[")
-      (LBRACE . "{")
-      (LPAREN . "("))
-     ("block"
-      (BRACK_BLOCK . "(LBRACK RBRACK)")
-      (BRACE_BLOCK . "(LBRACE RBRACE)")
-      (PAREN_BLOCK . "(LPAREN RPAREN)")))
-   '(("keyword" :declared t)
-     ("code" :declared t)
-     ("number" :declared t)
-     ("string" :declared t)
-     ("symbol" :declared t)
-     ("punctuation" :declared t)
-     ("block" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst wisent-php-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK T_DEREF T_PAAMAYIM_NEKUDOTAYIM T_INC T_DEC T_IS_IDENTICAL T_IS_NOT_IDENTICAL T_IS_EQUAL T_IS_NOT_EQUAL T_IS_SMALLER_OR_EQUAL T_IS_GREATER_OR_EQUAL T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_SL_EQUAL T_SR_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_BOOLEAN_OR T_BOOLEAN_AND T_SL T_SR T_DOUBLE_ARROW T_HEREDOC T_NOT T_MOD T_AND T_MULT T_PLUS T_COMMA T_MINUS T_DOT T_DIV T_COLON T_SEMI T_LT T_EQ T_GT T_URSHIFT T_URSHIFTEQ T_QUESTION T_XOR T_OR T_COMP T_ASTERISK T_DOLLER IDENTIFIER STRING_LITERAL NUMBER_LITERAL PROLOGUE EPILOGUE T_EXIT T_FUNCTION T_CONST T_RETURN T_TRY T_CATCH T_THROW T_IF T_ELSEIF T_ENDIF T_ELSE T_WHILE T_ENDWHILE T_DO T_FOR T_ENDFOR T_FOREACH T_ENDFOREACH T_DECLARE T_ENDDECLARE T_INSTANCEOF INT T_AS T_SWITCH T_ENDSWITCH T_CASE T_DEFAULT T_BREAK T_CONTINUE T_ECHO T_PRINT T_CLASS T_INTERFACE T_EXTENDS T_IMPLEMENTS T_NEW PACKAGE T_CLONE T_VAR T_EVAL T_INCLUDE T_INCLUDE_ONCE T_REQUIRE T_REQUIRE_ONCE T_USE T_GLOBAL T_ISSET T_EMPTY T_HALT_COMPILER T_STATIC T_ABSTRACT T_FINAL T_PRIVATE T_PROTECTED T_PUBLIC T_UNSET T_LIST T_ARRAY T_LOGICAL_OR T_LOGICAL_AND T_LOGICAL_XOR T_CLASS_C T_FUNC_C T_METHOD_C T_LINE T_FILE _AUTHOR _VERSION _PARAM _RETURN _EXCEPTION _THROWS _SEE _SINCE _SERIAL _SERIALDATA _SERIALFIELD _DEPRECATED)
-       ((left T_INCLUDE T_INCLUDE_ONCE T_EVAL T_REQUIRE T_REQUIRE_ONCE)
-	(left T_COMMA)
-	(left T_LOGICAL_OR)
-	(left T_LOGICAL_XOR)
-	(left T_LOGICAL_AND)
-	(right T_PRINT)
-	(left T_EQ T_PLUS_EQUAL T_MINUS_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL T_SL_EQUAL T_SR_EQUAL)
-	(left T_QUESTION T_COLON)
-	(left T_BOOLEAN_OR)
-	(left T_BOOLEAN_AND)
-	(left T_OR)
-	(left T_XOR)
-	(left T_AND)
-	(nonassoc T_IS_EQUAL T_IS_NOT_EQUAL T_IS_IDENTICAL T_IS_NOT_IDENTICAL)
-	(nonassoc T_LT T_IS_SMALLER_OR_EQUAL 62 T_IS_GREATER_OR_EQUAL)
-	(left T_SL T_SR)
-	(left T_PLUS T_MINUS T_DOT)
-	(left T_MULT T_DIV T_MOD)
-	(right T_NOT)
-	(nonassoc T_INSTANCEOF)
-	(right T_COMP T_INC T_DEC T_INT_CAST T_DOUBLE_CAST T_STRING_CAST T_ARRAY_CAST T_OBJECT_CAST T_BOOL_CAST T_UNSET_CAST T_ASTERISK)
-	(right LBRACK)
-	(nonassoc T_NEW T_CLONE)
-	(left T_ELSEIF)
-	(left T_ELSE)
-	(left T_ENDIF))
-       (start
-	((PROLOGUE compilation_units EPILOGUE)
-	 (identity $2))
-	((PROLOGUE compilation_units)
-	 (identity $2)))
-       (compilation_units
-	(nil)
-	((compilation_unit compilation_units)
-	 (if $2
-	     (append $2
-		     (wisent-cook-tag $1))
-	   (wisent-cook-tag $1))))
-       (compilation_unit
-	((include_declaration))
-	((type_declaration)))
-       (include_declaration
-	((T_USE require_expr T_SEMI)
-	 (identity $2))
-	((T_REQUIRE require_expr T_SEMI)
-	 (identity $2))
-	((T_REQUIRE_ONCE require_expr T_SEMI)
-	 (identity $2))
-	((T_INCLUDE require_expr T_SEMI)
-	 (identity $2))
-	((T_INCLUDE_ONCE require_expr T_SEMI)
-	 (identity $2)))
-       (require_expr
-	((STRING_LITERAL)
-	 (wisent-raw-tag
-	  (semantic-tag-new-include $1 nil)))
-	((PAREN_BLOCK)
-	 (wisent-raw-tag
-	  (semantic-tag-new-include $1 nil))))
-       (type_declaration
-	((function_declaration))
-	((class_declaration))
-	((interface_declaration)))
-       (class_declaration
-	((class_modifiers_opt T_CLASS IDENTIFIER superc_opt interfaces_opt class_body)
-	 (wisent-raw-tag
-	  (semantic-tag-new-type $3 $2 $6
-				 (if
-				     (or $4 $5)
-				     (cons $4 $5))
-				 :typemodifiers $1))))
-       (superc_opt
-	(nil)
-	((T_EXTENDS IDENTIFIER)
-	 (identity $2)))
-       (interfaces_opt
-	(nil)
-	((T_IMPLEMENTS identifier_list)
-	 (nreverse $2)))
-       (class_body
-	((BRACE_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'class_member_declaration 1)))
-       (class_member_declaration
-	((LBRACE)
-	 nil)
-	((RBRACE)
-	 nil)
-	((block)
-	 nil)
-	((interface_declaration))
-	((class_declaration))
-	((method_declaration))
-	((field_declaration)))
-       (interface_declaration
-	((class_modifiers_opt T_INTERFACE IDENTIFIER extends_interfaces_opt interface_body)
-	 (wisent-raw-tag
-	  (semantic-tag-new-type $3 $2 $5
-				 (if $4
-				     (cons nil $4))
-				 :typemodifiers $1))))
-       (extends_interfaces_opt
-	(nil)
-	((T_EXTENDS identifier_list)
-	 (identity $2)))
-       (interface_body
-	((BRACE_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'interface_member_declaration 1)))
-       (interface_member_declaration
-	((LBRACE)
-	 nil)
-	((RBRACE)
-	 nil)
-	((interface_declaration))
-	((class_declaration))
-	((method_declaration))
-	((field_declaration)))
-       (function_declaration
-	((method_declarator method_body)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function
-	   (car $1)
-	   nil
-	   (cdr $1)))))
-       (method_declaration
-	((method_modifiers_opt method_declarator method_body)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function
-	   (car $2)
-	   nil
-	   (cdr $2)
-	   :typemodifiers $1))))
-       (method_declarator
-	((T_FUNCTION reference_opt IDENTIFIER formal_parameter_list)
-	 (cons $3 $4)))
-       (identifier_list
-	((identifier_list T_COMMA IDENTIFIER)
-	 (cons $3 $1))
-	((IDENTIFIER)
-	 (list $1)))
-       (method_body
-	((T_SEMI))
-	((block)))
-       (block
-	   ((BRACE_BLOCK)))
-       (formal_parameter_list
-	((PAREN_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'formal_parameters 1)))
-       (formal_parameters
-	((LPAREN)
-	 nil)
-	((RPAREN)
-	 nil)
-	((formal_parameter T_COMMA))
-	((formal_parameter RPAREN)))
-       (formal_parameter
-	((variable_declarator_id T_EQ expression)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil $region3)))
-	((variable_declarator_id)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil))))
-       (field_declaration
-	((field_modifiers_opt variable_declarators T_SEMI)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil nil :typemodifiers $1))))
-       (variable_declarators
-	((variable_declarators T_COMMA variable_declarator)
-	 (cons $3 $1))
-	((variable_declarator)
-	 (list $1)))
-       (variable_declarator
-	((variable_declarator_id T_EQ variable_initializer)
-	 (list $1 nil nil $3))
-	((variable_declarator_id)
-	 (list $1)))
-       (variable_declarator_id
-	((reference_opt IDENTIFIER dims_opt)
-	 (concat $2 $3)))
-       (reference_opt
-	(nil)
-	((T_AND)))
-       (variable_initializer
-	((expression)))
-       (expression
-	((expression term))
-	((term)))
-       (term
-	((literal))
-	((operator))
-	((IDENTIFIER))
-	((BRACK_BLOCK))
-	((PAREN_BLOCK))
-	((BRACE_BLOCK))
-	((T_NEW))
-	((T_CLONE))
-	((T_ARRAY)))
-       (literal
-	((STRING_LITERAL))
-	((NUMBER_LITERAL)))
-       (operator
-	((T_DEREF))
-	((T_PAAMAYIM_NEKUDOTAYIM))
-	((T_INC))
-	((T_DEC))
-	((T_IS_IDENTICAL))
-	((T_IS_NOT_IDENTICAL))
-	((T_IS_EQUAL))
-	((T_IS_NOT_EQUAL))
-	((T_IS_NOT_EQUAL))
-	((T_IS_SMALLER_OR_EQUAL))
-	((T_IS_GREATER_OR_EQUAL))
-	((T_PLUS_EQUAL))
-	((T_MINUS_EQUAL))
-	((T_MUL_EQUAL))
-	((T_DIV_EQUAL))
-	((T_CONCAT_EQUAL))
-	((T_MOD_EQUAL))
-	((T_SL_EQUAL))
-	((T_SR_EQUAL))
-	((T_AND_EQUAL))
-	((T_OR_EQUAL))
-	((T_XOR_EQUAL))
-	((T_BOOLEAN_OR))
-	((T_BOOLEAN_AND))
-	((T_SL))
-	((T_SR))
-	((T_DOUBLE_ARROW))
-	((T_HEREDOC))
-	((T_NOT))
-	((T_MOD))
-	((T_AND))
-	((T_MULT))
-	((T_PLUS))
-	((T_COMMA))
-	((T_MINUS))
-	((T_DOT))
-	((T_DIV))
-	((T_COLON))
-	((T_LT))
-	((T_EQ))
-	((T_GT))
-	((T_URSHIFT))
-	((T_URSHIFTEQ))
-	((T_QUESTION))
-	((T_XOR))
-	((T_OR))
-	((T_COMP))
-	((T_ASTERISK))
-	((T_LIST))
-	((T_ARRAY))
-	((T_LOGICAL_OR))
-	((T_LOGICAL_AND))
-	((T_LOGICAL_XOR)))
-       (class_modifiers_opt
-	(nil)
-	((class_modifiers)
-	 (nreverse $1)))
-       (class_modifiers
-	((class_modifiers class_modifier)
-	 (cons $2 $1))
-	((class_modifier)
-	 (list $1)))
-       (class_modifier
-	((T_FINAL))
-	((T_ABSTRACT)))
-       (method_modifiers_opt
-	(nil)
-	((method_modifiers)
-	 (nreverse $1)))
-       (method_modifiers
-	((method_modifiers method_modifier)
-	 (cons $2 $1))
-	((method_modifier)
-	 (list $1)))
-       (method_modifier
-	((T_FINAL))
-	((T_ABSTRACT))
-	((T_STATIC))
-	((T_PRIVATE))
-	((T_PROTECTED))
-	((T_PUBLIC)))
-       (field_modifiers_opt
-	(nil)
-	((field_modifiers)
-	 (nreverse $1)))
-       (field_modifiers
-	((field_modifiers field_modifier)
-	 (cons $2 $1))
-	((field_modifier)
-	 (list $1)))
-       (field_modifier
-	((method_modifier))
-	((T_VAR)))
-       (dims_opt
-	(nil
-	 (identity ""))
-	((dims)))
-       (dims
-	((dims BRACK_BLOCK)
-	 (concat $1 "[]"))
-	((BRACK_BLOCK)
-	 (identity "[]"))))
-     '(start compilation_units compilation_unit include_declaration require_expr type_declaration class_declaration class_body class_member_declaration interface_declaration interface_body interface_member_declaration method_declaration method_declarator identifier_list method_body block formal_parameter_list formal_parameters formal_parameter field_declaration variable_declarators variable_declarator variable_declarator_id variable_initializer class_modifiers class_modifier method_modifiers method_modifier field_modifiers field_modifier)))
-  "Parser table.")
-
-(defun wisent-php-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-php-wy--parse-table
-	semantic-debug-parser-source "wisent-php.wy"
-	semantic-flex-keywords-obarray wisent-php-wy--keyword-table
-	semantic-lex-types-obarray wisent-php-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-keyword-type-analyzer wisent-php-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-block-type-analyzer wisent-php-wy--<block>-block-analyzer
-  "block analyzer for <block> tokens."
-  "\\s(\\|\\s)"
-  '((("(" LPAREN PAREN_BLOCK)
-     ("{" LBRACE BRACE_BLOCK)
-     ("[" LBRACK BRACK_BLOCK))
-    (")" RPAREN)
-    ("}" RBRACE)
-    ("]" RBRACK))
-  )
-
-(define-lex-regex-type-analyzer wisent-php-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  "\\(\\sw\\|\\s_\\)+"
-  nil
-  'IDENTIFIER)
-
-(define-lex-sexp-type-analyzer wisent-php-wy--<string>-sexp-analyzer
-  "sexp analyzer for <string> tokens."
-  "\\s\""
-  'STRING_LITERAL)
-
-(define-lex-regex-type-analyzer wisent-php-wy--<number>-regexp-analyzer
-  "regexp analyzer for <number> tokens."
-  semantic-lex-number-expression
-  nil
-  'NUMBER_LITERAL)
-
-(define-lex-string-type-analyzer wisent-php-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\(\\s.\\|\\s$\\|\\s'\\)+"
-  '((T_DOLLER . "$")
-    (T_ASTERISK . "@")
-    (T_COMP . "~")
-    (T_OR . "|")
-    (T_XOR . "^")
-    (T_QUESTION . "?")
-    (T_URSHIFTEQ . ">>>=")
-    (T_URSHIFT . ">>>")
-    (T_GT . ">")
-    (T_EQ . "=")
-    (T_LT . "<")
-    (T_SEMI . ";")
-    (T_COLON . ":")
-    (T_DIV . "/")
-    (T_DOT . ".")
-    (T_MINUS . "-")
-    (T_COMMA . ",")
-    (T_PLUS . "+")
-    (T_MULT . "*")
-    (T_AND . "&")
-    (T_MOD . "%")
-    (T_NOT . "!")
-    (T_HEREDOC . "<<<")
-    (T_DOUBLE_ARROW . "=>")
-    (T_SR . ">>")
-    (T_SL . "<<")
-    (T_BOOLEAN_AND . "&&")
-    (T_BOOLEAN_OR . "||")
-    (T_XOR_EQUAL . "^=")
-    (T_OR_EQUAL . "|=")
-    (T_AND_EQUAL . "&=")
-    (T_SR_EQUAL . ">>=")
-    (T_SL_EQUAL . "<<=")
-    (T_MOD_EQUAL . "%=")
-    (T_CONCAT_EQUAL . ".=")
-    (T_DIV_EQUAL . "/=")
-    (T_MUL_EQUAL . "*=")
-    (T_MINUS_EQUAL . "-=")
-    (T_PLUS_EQUAL . "+=")
-    (T_IS_GREATER_OR_EQUAL . ">=")
-    (T_IS_SMALLER_OR_EQUAL . "<=")
-    (T_IS_NOT_EQUAL . "<>")
-    (T_IS_NOT_EQUAL . "!=")
-    (T_IS_EQUAL . "==")
-    (T_IS_NOT_IDENTICAL . "!==")
-    (T_IS_IDENTICAL . "===")
-    (T_DEC . "--")
-    (T_INC . "++")
-    (T_PAAMAYIM_NEKUDOTAYIM . "::")
-    (T_DEREF . "->"))
-  'punctuation)
-
-
-;;; Epilogue
-;;
-(defconst semantic-php-number-regexp
-  (eval-when-compile
-    (concat "\\("
-            "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>"
-            "\\|"
-            "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>"
-            "\\|"
-            "\\<[0-9]+[.][fFdD]\\>"
-            "\\|"
-            "\\<[0-9]+[.]"
-            "\\|"
-            "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>"
-            "\\|"
-            "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>"
-            "\\|"
-            "\\<0[xX][0-9a-fA-F]+[lL]?\\>"
-            "\\|"
-            "\\<[0-9]+[lLfFdD]?\\>"
-            "\\)"
-            ))
-  "Lexer regexp to match Java number terminals.
-Following is the specification of Java number literals.
-
-DECIMAL_LITERAL:
-    [1-9][0-9]*
-  ;
-HEX_LITERAL:
-    0[xX][0-9a-fA-F]+
-  ;
-OCTAL_LITERAL:
-    0[0-7]*
-  ;
-INTEGER_LITERAL:
-    <DECIMAL_LITERAL>[lL]?
-  | <HEX_LITERAL>[lL]?
-  | <OCTAL_LITERAL>[lL]?
-  ;
-EXPONENT:
-    [eE][+-]?[09]+
-  ;
-FLOATING_POINT_LITERAL:
-    [0-9]+[.][0-9]*<EXPONENT>?[fFdD]?
-  | [.][0-9]+<EXPONENT>?[fFdD]?
-  | [0-9]+<EXPONENT>[fFdD]?
-  | [0-9]+<EXPONENT>?[fFdD]
-  ;")
-
-(defconst wisent-php-label-regex
-  "[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*")
-
-(defvar wisent-in-php nil
-  "State variable tracking parsing in/out of PHP code.")
-
-(defun wisent-php--move-to-php-beginning ()
-  (if (re-search-forward "<[%?]" nil t)
-      (cond
-       ((or (looking-at "\\(php\\)?$")
-	    (looking-at "\\(php\\)?[[:space:]])"))
-	(goto-char (match-end 0))
-	'T_NONPHP)
-       ((or (looking-at "=$")
-	    (looking-at "=[[:space:]]"))
-	'T_ECHO_BLOCK)
-       (t
-	(wisent-php--move-to-php-beginning)))
-    (goto-char (point-max))
-    nil))
-
-(define-lex-regex-analyzer wisent-php-lex-prologue
-  "Detect and create a prologue token."
-  "<[?%]\\(php\\)?\\([[:space:]]+\\|$\\)"
-  ;; Zing to the end of this brace block.
-  (let ((start (match-beginning 0))
-        (end   (match-end 0)))
-    (semantic-lex-push-token
-     (semantic-lex-token 'PROLOGUE start end))))
-
-(define-lex-regex-analyzer wisent-php-lex-epilogue
-  "Detect and create an epilogue or percent-percent token."
-  "[%?]>"
-  (let ((start (match-beginning 0))
-        (end   (match-end 0)))
-    (semantic-lex-push-token
-     (semantic-lex-token 'EPILOGUE start end))))
-
-  
-(define-lex-regex-analyzer wisent-php-lex-heredoc
-  "Detect and create an epilogue or percent-percent token."
-  (concat "<<<[[:blank:]]*\\(" wisent-php-label-regex "\\)$")
-  (let ((start (match-beginning 0))
-        (end   (progn
-		 (re-search-forward (concat "^" (match-string 1) ";") nil t)
-		 (match-end 0))))
-    (semantic-lex-push-token
-     (semantic-lex-token 'STRING_LITERAL start end))
-    (setq semantic-lex-end-point end)))
-
-(define-lex-analyzer wisent-php-lex-out-of-php
-  "Detect and create python indentation tokens at beginning of line."
-  (progn
-    (and wisent-in-php
-	 (looking-at "[[:space:]\n]*[%?]>")
-	 (setq wisent-in-php nil))
-    (when (not wisent-in-php)
-      (let ((last-pos (point))
-	    (token (wisent-php--move-to-php-beginning)))
-	(setq semantic-lex-end-point (point))
-	(when token
-	  (setq wisent-in-php t)))
-;;	  (semantic-lex-push-token
-;;	   (semantic-lex-token token last-pos (point)))))
-      t)))
-
-;; Define the lexer for this grammar
-(define-lex wisent-php-lexer
-  "Lexical analyzer that handles php buffers.
-It ignores whitespaces, newlines and comments."
-  semantic-lex-ignore-whitespace
-  semantic-lex-ignore-newline
-  semantic-lex-ignore-comments
-  wisent-php-lex-prologue
-  wisent-php-lex-epilogue
-  wisent-php-lex-heredoc
-  ;;;; Auto-generated analyzers.
-  wisent-php-wy--<number>-regexp-analyzer
-  wisent-php-wy--<string>-sexp-analyzer
-  ;; Must detect keywords before other symbols
-  wisent-php-wy--<keyword>-keyword-analyzer
-  wisent-php-wy--<symbol>-regexp-analyzer
-  wisent-php-wy--<punctuation>-string-analyzer
-  wisent-php-wy--<block>-block-analyzer
-  ;;;;
-  semantic-lex-default-action)
-
-(provide 'wisent-php-wy)
-
-;;; wisent-php-wy.el ends here
diff --git a/elisp/cedet-1.1/contrib/wisent-php.elc b/elisp/cedet-1.1/contrib/wisent-php.elc
index 56a4ffc..6fec34d 100644
Binary files a/elisp/cedet-1.1/contrib/wisent-php.elc and b/elisp/cedet-1.1/contrib/wisent-php.elc differ
diff --git a/elisp/cedet-1.1/contrib/wisent-ruby-wy.el~ b/elisp/cedet-1.1/contrib/wisent-ruby-wy.el~
deleted file mode 100644
index 1b69181..0000000
--- a/elisp/cedet-1.1/contrib/wisent-ruby-wy.el~
+++ /dev/null
@@ -1,612 +0,0 @@
-;;; wisent-ruby-wy.el --- Generated parser support file
-
-;;; Copyright (C) 2007 Daniel Debertin (debertin@gmail.com)
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:46-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-ruby.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-ruby-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("__FILE__" . FILE)
-     ("__LINE__" . LINE)
-     ("BEGIN" . BEGIN_BLOCK)
-     ("END" . END_BLOCK)
-     ("alias" . ALIAS)
-     ("and" . AND)
-     ("begin" . BEGIN)
-     ("break" . BREAK)
-     ("case" . CASE)
-     ("class" . CLASS)
-     ("def" . DEF)
-     ("defined?" . DEFINED_P)
-     ("do" . DO)
-     ("else" . ELSE)
-     ("elsif" . ELSIF)
-     ("end" . END)
-     ("ensure" . ENSURE)
-     ("false" . FALSE)
-     ("for" . FOR)
-     ("if" . IF)
-     ("in" . IN)
-     ("module" . MODULE)
-     ("next" . NEXT)
-     ("nil" . NIL)
-     ("not" . NOT)
-     ("or" . OR)
-     ("redo" . REDO)
-     ("rescue" . RESCUE)
-     ("retry" . RETRY)
-     ("return" . RETURN)
-     ("self" . SELF)
-     ("super" . SUPER)
-     ("then" . THEN)
-     ("true" . TRUE)
-     ("undef" . UNDEF)
-     ("unless" . UNLESS)
-     ("until" . UNTIL)
-     ("when" . WHEN)
-     ("while" . WHILE)
-     ("yield" . YIELD)
-     ("require" . REQUIRE)
-     ("attr_reader" . ATTR_READER)
-     ("attr_writer" . ATTR_WRITER)
-     ("attr_accessor" . ATTR_ACCESSOR)
-     ("include" . INCLUDE)
-     ("extend" . EXTEND)
-     ("public" . PROT_PUBLIC)
-     ("protected" . PROT_PROTECTED)
-     ("private" . PROT_PRIVATE)
-     ("loop" . LOOP)
-     ("raise" . RAISE)
-     ("catch" . CATCH)
-     ("throw" . THROW)
-     ("proc" . PROC)
-     ("lambda" . LAMBDA))
-   '(("lambda" summary "lambda { [<|args|>] ... }")
-     ("proc" summary "proc { [<|args|>] ... }")
-     ("throw" summary "THROW <anchor>[, <retval>]")
-     ("catch" summary "CATCH <tag> do ...[throw <tag>] ... end")
-     ("raise" summary "RAISE [<exception_type>] [<message>]")
-     ("loop" summary "loop .... end")
-     ("private" summary "private: instance-level protection")
-     ("protected" summary "protected: class-level protection")
-     ("public" summary "public: public protection")
-     ("extend" summary "EXTEND <module_name>")
-     ("include" summary "INCLUDE <module_name>")
-     ("attr_accessor" summary "attr_accessor <symbol_list>")
-     ("attr_writer" summary "attr_writer <symbol_list>")
-     ("attr_reader" summary "attr_reader <symbol_list>")
-     ("require" summary "require <file>")
-     ("yield" summary "yield: return control to the caller until called again")
-     ("while" summary "WHILE(<expression>) ... end")
-     ("when" summary "case <lhs> WHEN <rhs> ... end")
-     ("until" summary "UNTIL(<expression>) ... end")
-     ("unless" summary "UNLESS(<expression>) ... end")
-     ("undef" summary "I have no idea what this does")
-     ("true" summary "true: true value")
-     ("then" summary "if(<expression>) THEN ... end")
-     ("super" summary "super: the superclass method")
-     ("self" summary "self: the current instance")
-     ("return" summary "return: return control to the caller permanently")
-     ("retry" summary "begin ... rescue [exception] ... RETRY ... end")
-     ("rescue" summary "begin ... RESCUE [exception_name] <body> end")
-     ("redo" summary "redo: try current iteration again")
-     ("or" summary "or: logical OR")
-     ("not" summary "not: logical NOT")
-     ("nil" summary "nil: no value")
-     ("next" summary "next: continue to next block iteration")
-     ("module" summary "MODULE <module_name> <module_body> end")
-     ("in" summary "for x IN y ... end")
-     ("if" summary "IF(<expression>) ... end")
-     ("for" summary "FOR x in y ... end")
-     ("false" summary "false: false value")
-     ("ensure" summary "begin ... ENSURE ... end")
-     ("end" summary "end: block end")
-     ("elsif" summary "if(<expression>) ... ELSIF(<expression>) ... end")
-     ("else" summary "if(<expression>) ... ELSE ... end")
-     ("do" summary "DO <body> end")
-     ("defined?" summary "defined?(<value>)")
-     ("def" summary "DEF <method_name> ([method_args]) <method_body> end")
-     ("class" summary "CLASS <classname> [< parentclass] ... end")
-     ("case" summary "CASE <lhs> when <rhs> ... when <rhs> ... end")
-     ("break" summary "break: terminate current block")
-     ("begin" summary "BEGIN ... [rescue,ensure] ... end")
-     ("and" summary "and: logical AND")
-     ("alias" summary "ALIAS method1 method2")
-     ("END" summary "END { ... }")
-     ("BEGIN" summary "BEGIN { ... }")
-     ("__LINE__" summary "__LINE__: The current line")
-     ("__FILE__" summary "__FILE__: The current file")))
-  "Table of language keywords.")
-
-(defconst wisent-ruby-wy--token-table
-  (semantic-lex-make-type-table
-   '(("punctuation"
-      (HASH_REF . "=>")
-      (OBJ_EQ . "===")
-      (NAMESPACE_DEREF . "::")
-      (LOGOR_EQ . "||=")
-      (LOGAND_EQ . "&&=")
-      (LOG_OR . "||")
-      (LOG_AND . "&&")
-      (SEMICOLON . ";")
-      (DIV_EQ . "/=")
-      (DIV . "/")
-      (BACKQUOTE . "`")
-      (HEREDOC . "<<-")
-      (GTGT_EQ . ">>=")
-      (LTLT_EQ . "<<=")
-      (GTGT . ">>")
-      (LTLT . "<<")
-      (GTEQ . ">=")
-      (LTEQ . "<=")
-      (GT . ">")
-      (LT . "<")
-      (TERNARY_COND . "?")
-      (COLON . ":")
-      (REGEX_EQ . "=~")
-      (COMPLEMENT . "~")
-      (MINUS_EQ . "-=")
-      (MINUS . "-")
-      (EXP_EQ . "**=")
-      (EXP . "**")
-      (MULT_EQ . "*=")
-      (MULT . "*")
-      (BITAND_EQ . "&=")
-      (BITAND . "&")
-      (BITOR_EQ . "|=")
-      (BITOR . "|")
-      (BITXOR_EQ . "^=")
-      (BITXOR . "^")
-      (MOD_EQ . "%=")
-      (MODULUS . "%")
-      (BANG . "!")
-      (COMMA . ",")
-      (PLUS_EQ . "+=")
-      (PLUS . "+")
-      (NEQUAL . "!=")
-      (EQUAL . "==")
-      (PERIOD . ".")
-      (EQUALS . "="))
-     ("close-paren"
-      (RPAREN . ")")
-      (RBRACK . "]"))
-     ("open-paren"
-      (RBRACE . "}")
-      (LBRACE . "{")
-      (LPAREN . "(")
-      (LBRACK . "["))
-     ("newline"
-      (NEWLINE))
-     ("rubyblock"
-      (RUBY_BLOCK))
-     ("braceblock"
-      (BRACE_BLOCK))
-     ("parenblock"
-      (PAREN_BLOCK))
-     ("rubylvar"
-      (VAR_LOCAL))
-     ("rubyconst"
-      (CONSTANT))
-     ("rubygvar"
-      (VAR_GLOBAL))
-     ("rubycvar"
-      (VAR_CLASS))
-     ("rubyivar"
-      (VAR_INSTANCE))
-     ("rubysymbol"
-      (SYMBOL_LITERAL))
-     ("rubyhash"
-      (HASH_LITERAL))
-     ("rubyrange"
-      (RANGE_LITERAL))
-     ("rubynumber"
-      (INTEGER_LITERAL))
-     ("rubycmd"
-      (SHELL_COMMAND_LITERAL))
-     ("rubyregexp"
-      (REGEXP_LITERAL))
-     ("rubyarray"
-      (ARRAY_LITERAL))
-     ("rubystring"
-      (STRING_LITERAL))
-     ("identifier"
-      (IDENTIFIER)))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst wisent-ruby-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((IDENTIFIER STRING_LITERAL ARRAY_LITERAL REGEXP_LITERAL SHELL_COMMAND_LITERAL INTEGER_LITERAL RANGE_LITERAL HASH_LITERAL SYMBOL_LITERAL VAR_INSTANCE VAR_CLASS VAR_GLOBAL CONSTANT VAR_LOCAL PAREN_BLOCK BRACE_BLOCK RUBY_BLOCK NEWLINE FILE LINE BEGIN_BLOCK END_BLOCK ALIAS AND BEGIN BREAK CASE CLASS DEF DEFINED_P DO ELSE ELSIF END ENSURE FALSE FOR IF IN MODULE NEXT NIL NOT OR REDO RESCUE RETRY RETURN SELF SUPER THEN TRUE UNDEF UNLESS UNTIL WHEN WHILE YIELD REQUIRE ATTR_READER ATTR_WRITER ATTR_ACCESSOR INCLUDE EXTEND PROT_PUBLIC PROT_PROTECTED PROT_PRIVATE LOOP RAISE CATCH THROW PROC LAMBDA LBRACK RBRACK LPAREN RPAREN LBRACE RBRACE EQUALS PERIOD EQUAL NEQUAL PLUS PLUS_EQ COMMA BANG MODULUS MOD_EQ BITXOR BITXOR_EQ BITOR BITOR_EQ BITAND BITAND_EQ MULT MULT_EQ EXP EXP_EQ MINUS MINUS_EQ COMPLEMENT REGEX_EQ COLON TERNARY_COND LT GT LTEQ GTEQ LTLT GTGT LTLT_EQ GTGT_EQ HEREDOC BACKQUOTE DIV DIV_EQ SEMICOLON LOG_AND LOG_OR LOGAND_EQ LOGOR_EQ NAMESPACE_DEREF OBJ_EQ HASH_REF)
-       nil
-       (stmts
-	(nil)
-	((stmt))
-	((stmt separators stmts)))
-       (stmt
-	((expression))
-	((definition))
-	((simple_stmt)))
-       (opt_cond
-	(nil)
-	((conditional_exp)))
-       (separator
-	((NEWLINE))
-	((SEMICOLON)))
-       (separators
-	((separator))
-	((separator separators)))
-       (definition
-	 ((method_def))
-	 ((class_def))
-	 ((module_def)))
-       (simple_stmt
-	((require))
-	((super))
-	((alias))
-	((attr_decl))
-	((mixin))
-	((access_decl))
-	((loop_control))
-	((return))
-	((exception)))
-       (require
-	((REQUIRE STRING_LITERAL)
-	 (wisent-raw-tag
-	  (semantic-tag-new-include $2 nil))))
-       (super
-	((SUPER opt_args)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "super" nil))))
-       (opt_args
-	(nil)
-	((PAREN_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'parameters 1)))
-       (parameters
-	(nil)
-	((LPAREN))
-	((RPAREN))
-	((parameter COMMA)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil)))
-	((parameter RPAREN)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil))))
-       (parameter
-	((expression_term))
-	((expression_term EQUALS literal)))
-       (alias
-	((ALIAS IDENTIFIER IDENTIFIER)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function $2 "alias" nil nil))))
-       (attr_decl
-	((ATTR_READER symbol_list)
-	 (wisent-raw-tag
-	  (semantic-tag "reader" 'attribute :symbols $2)))
-	((ATTR_WRITER symbol_list)
-	 (wisent-raw-tag
-	  (semantic-tag "writer" 'attribute :symbols $2)))
-	((ATTR_ACCESSOR symbol_list)
-	 (wisent-raw-tag
-	  (semantic-tag "accessor" 'attribute :symbols $2))))
-       (symbol_list
-	((SYMBOL_LITERAL)
-	 (list $1))
-	((SYMBOL_LITERAL COMMA symbol_list)
-	 (append
-	  (list $1)
-	  $3)))
-       (mixin
-	((INCLUDE CONSTANT)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "mixin" nil)))
-	((EXTEND CONSTANT)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "mixin" nil))))
-       (protection
-	((PROT_PUBLIC))
-	((PROT_PROTECTED))
-	((PROT_PRIVATE)))
-       (access_decl
-	((protection)
-	 (set-current-protection-context $1))
-	((protection symbol_list)
-	 (dolist
-	     (sym $2)
-	   (set-tag-protection sym $1))))
-       (loop_control
-	((BREAK opt_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "loop_control" 'break :value $2)))
-	((NEXT opt_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "loop_control" 'next :value $2)))
-	((REDO)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "loop_control" 'redo)))
-	((RETRY)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "loop_control" 'retry)))
-	((THROW SYMBOL_LITERAL opt_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "throw" $2 :value $3))))
-       (opt_exp
-	(nil)
-	((expression)))
-       (return
-	((RETURN opt_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "return" nil))))
-       (expression_term
-	((literal))
-	((varref))
-	((methodcall)))
-       (literal
-	((STRING_LITERAL))
-	((ARRAY_LITERAL))
-	((REGEXP_LITERAL))
-	((SHELL_COMMAND_LITERAL))
-	((INTEGER_LITERAL))
-	((HASH_LITERAL))
-	((SYMBOL_LITERAL))
-	((boolean_literal))
-	((NIL)))
-       (boolean_literal
-	((TRUE))
-	((FALSE)))
-       (varref
-	((VAR_INSTANCE))
-	((VAR_CLASS))
-	((VAR_GLOBAL))
-	((CONSTANT))
-	((VAR_LOCAL)))
-       (method_head
-	((receiver IDENTIFIER))
-	((IDENTIFIER)))
-       (methodcall
-	((method_head))
-	((method_head PAREN_BLOCK))
-	((method_head code_block))
-	((method_head PAREN_BLOCK code_block)))
-       (receiver
-	((CONSTANT PERIOD))
-	((IDENTIFIER PERIOD))
-	((literal PERIOD)))
-       (code_block
-	((BRACE_BLOCK))
-	((DO RUBY_BLOCK)))
-       (expression
-	((operator_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "expression" nil)))
-	((assignment_exp)
-	 (progn
-	   (process-assignment-variables $1)
-	   (wisent-raw-tag
-	    (semantic-tag-new-code "assignment" nil))))
-	((block_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "block_expression" nil)))
-	((conditional_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "cond_exp" nil)))
-	((case_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "case" nil)))
-	((iteration_exp)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code "iteration" nil)))
-	((expression_term)
-	 (if
-	     (member $1 semantic-lex-ruby-assigned-vars)
-	     (wisent-raw-tag
-	      (semantic-tag-new-code "expression_term" nil))
-	   (wisent-raw-tag
-	    (semantic-tag-new-code "methodcall" nil)))))
-       (expressions
-	((expression))
-	((expression bool_op expressions)))
-       (operator_exp
-	((expression_term cmp_op expression_term))
-	((expression_term cmp_op operator_exp)))
-       (assignment_exp
-	((expression_term assn_op expression_term)
-	 (list $1))
-	((expression_term assn_op assignment_exp)
-	 (append
-	  (list $1)
-	  $3)))
-       (block_exp
-	((BEGIN inner_block END)))
-       (inner_block
-	((RUBY_BLOCK))
-	((RUBY_BLOCK rescues))
-	((RUBY_BLOCK ENSURE RUBY_BLOCK))
-	((RUBY_BLOCK rescues ENSURE RUBY_BLOCK)))
-       (rescues
-	((RESCUE RUBY_BLOCK))
-	((RESCUE exception_catch RUBY_BLOCK))
-	((RESCUE exception_catch RUBY_BLOCK rescues)))
-       (exception_catch
-	((CONSTANT))
-	((CONSTANT HASH_REF IDENTIFIER)))
-       (conditional_exp_arg
-	((expression))
-	((PAREN_BLOCK)))
-       (aux_cond
-	((ELSIF conditional_exp_arg opt_then RUBY_BLOCK))
-	((ELSIF conditional_exp_arg opt_then RUBY_BLOCK aux_cond))
-	((ELSE RUBY_BLOCK END)))
-       (conditional_exp
-	((cond_kw conditional_exp_arg opt_then RUBY_BLOCK END))
-	((cond_kw conditional_exp_arg opt_then RUBY_BLOCK aux_cond END)))
-       (cond_kw
-	((IF))
-	((UNLESS)))
-       (opt_then
-	(nil)
-	((THEN)))
-       (ternary_exp
-	((expression TERNARY_COND expression_term COLON expression_term)))
-       (case_exp
-	((CASE IDENTIFIER when_blocks END)))
-       (when_blocks
-	((WHEN IDENTIFIER RUBY_BLOCK))
-	((WHEN IDENTIFIER RUBY_BLOCK when_blocks))
-	((ELSE RUBY_BLOCK)))
-       (iteration_exp
-	((cond_iter_kw conditional_exp_arg RUBY_BLOCK END))
-	((FOR RUBY_BLOCK END))
-	((LOOP DO RUBY_BLOCK END))
-	((LOOP BRACE_BLOCK)))
-       (cond_iter_kw
-	((WHILE))
-	((UNTIL)))
-       (method_def
-	((DEF IDENTIFIER opt_args RUBY_BLOCK END)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function $2 "method"
-				     (if $3
-					 (semantic-parse-region
-					  (car $region3)
-					  (cdr $region3)
-					  'parameters 1)
-				       nil)))))
-       (class_def
-	((CLASS CONSTANT RUBY_BLOCK END)
-	 (wisent-raw-tag
-	  (semantic-tag-new-type $2 $1
-				 (semantic-parse-region
-				  (car $region3)
-				  (cdr $region3)
-				  'stmts 1)
-				 nil)))
-	((CLASS CONSTANT LT CONSTANT RUBY_BLOCK END)
-	 (wisent-raw-tag
-	  (semantic-tag-new-type $2 $1
-				 (semantic-parse-region
-				  (car $region5)
-				  (cdr $region5)
-				  'stmts 1)
-				 (cons $4 nil)))))
-       (module_def
-	((MODULE CONSTANT RUBY_BLOCK END)
-	 (wisent-raw-tag
-	  (semantic-tag-new-type $2 "module"
-				 (semantic-parse-region
-				  (car $region3)
-				  (cdr $region3)
-				  'stmts 1)
-				 nil))))
-       (exception
-	((RAISE))
-	((RAISE CONSTANT))
-	((RAISE CONSTANT STRING_LITERAL))
-	((RAISE STRING_LITERAL)))
-       (cmp_op
-	((EQUAL))
-	((NEQUAL))
-	((PLUS))
-	((MODULUS))
-	((BITXOR))
-	((BITOR))
-	((BITAND))
-	((MULT))
-	((EXP))
-	((MINUS))
-	((COMPLEMENT))
-	((REGEX_EQ))
-	((LT))
-	((GT))
-	((LTEQ))
-	((GTEQ))
-	((LTLT))
-	((GTGT))
-	((DIV))
-	((OBJ_EQ)))
-       (bool_op
-	((AND))
-	((OR))
-	((LOG_AND))
-	((LOG_OR)))
-       (assn_op
-	((EQUALS))
-	((PLUS_EQ))
-	((MOD_EQ))
-	((BITXOR_EQ))
-	((BITOR_EQ))
-	((BITAND_EQ))
-	((MULT_EQ))
-	((EXP_EQ))
-	((MINUS_EQ))
-	((LTLT_EQ))
-	((GTGT_EQ))
-	((DIV_EQ))
-	((LOGAND_EQ))
-	((LOGOR_EQ))))
-     '(stmts parameters)))
-  "Parser table.")
-
-(defun wisent-ruby-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-ruby-wy--parse-table
-	semantic-debug-parser-source "wisent-ruby.wy"
-	semantic-flex-keywords-obarray wisent-ruby-wy--keyword-table
-	semantic-lex-types-obarray wisent-ruby-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'wisent-ruby-wy)
-
-;;; wisent-ruby-wy.el ends here
diff --git a/elisp/cedet-1.1/contrib/wisent-ruby.elc b/elisp/cedet-1.1/contrib/wisent-ruby.elc
index 0aab0eb..eceb029 100644
Binary files a/elisp/cedet-1.1/contrib/wisent-ruby.elc and b/elisp/cedet-1.1/contrib/wisent-ruby.elc differ
diff --git a/elisp/cedet-1.1/ede/autoconf-compat.elc b/elisp/cedet-1.1/ede/autoconf-compat.elc
index f159e0c..cb41f7e 100644
Binary files a/elisp/cedet-1.1/ede/autoconf-compat.elc and b/elisp/cedet-1.1/ede/autoconf-compat.elc differ
diff --git a/elisp/cedet-1.1/ede/autoconf-edit.elc b/elisp/cedet-1.1/ede/autoconf-edit.elc
index 843ddcc..77221e4 100644
Binary files a/elisp/cedet-1.1/ede/autoconf-edit.elc and b/elisp/cedet-1.1/ede/autoconf-edit.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-android.elc b/elisp/cedet-1.1/ede/ede-android.elc
index accd416..acf1894 100644
Binary files a/elisp/cedet-1.1/ede/ede-android.elc and b/elisp/cedet-1.1/ede/ede-android.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-arduino.elc b/elisp/cedet-1.1/ede/ede-arduino.elc
index 06f6b36..d95195f 100644
Binary files a/elisp/cedet-1.1/ede/ede-arduino.elc and b/elisp/cedet-1.1/ede/ede-arduino.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-auto.elc b/elisp/cedet-1.1/ede/ede-auto.elc
index e21d33b..b7d7ad5 100644
Binary files a/elisp/cedet-1.1/ede/ede-auto.elc and b/elisp/cedet-1.1/ede/ede-auto.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-base.elc b/elisp/cedet-1.1/ede/ede-base.elc
index 95cc4b8..0ab41ea 100644
Binary files a/elisp/cedet-1.1/ede/ede-base.elc and b/elisp/cedet-1.1/ede/ede-base.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-cpp-root.elc b/elisp/cedet-1.1/ede/ede-cpp-root.elc
index 481ac0d..eac8945 100644
Binary files a/elisp/cedet-1.1/ede/ede-cpp-root.elc and b/elisp/cedet-1.1/ede/ede-cpp-root.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-custom.elc b/elisp/cedet-1.1/ede/ede-custom.elc
index adfca9c..a78a7ad 100644
Binary files a/elisp/cedet-1.1/ede/ede-custom.elc and b/elisp/cedet-1.1/ede/ede-custom.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-dired.elc b/elisp/cedet-1.1/ede/ede-dired.elc
index 8920578..f9904eb 100644
Binary files a/elisp/cedet-1.1/ede/ede-dired.elc and b/elisp/cedet-1.1/ede/ede-dired.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-emacs.elc b/elisp/cedet-1.1/ede/ede-emacs.elc
index 9d49631..fe6451f 100644
Binary files a/elisp/cedet-1.1/ede/ede-emacs.elc and b/elisp/cedet-1.1/ede/ede-emacs.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-files.elc b/elisp/cedet-1.1/ede/ede-files.elc
index 6c61dcf..a2d5497 100644
Binary files a/elisp/cedet-1.1/ede/ede-files.elc and b/elisp/cedet-1.1/ede/ede-files.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-generic.elc b/elisp/cedet-1.1/ede/ede-generic.elc
index ca16206..f318b25 100644
Binary files a/elisp/cedet-1.1/ede/ede-generic.elc and b/elisp/cedet-1.1/ede/ede-generic.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-linux.elc b/elisp/cedet-1.1/ede/ede-linux.elc
index 2d36e2c..5516f84 100644
Binary files a/elisp/cedet-1.1/ede/ede-linux.elc and b/elisp/cedet-1.1/ede/ede-linux.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-load.elc b/elisp/cedet-1.1/ede/ede-load.elc
index 9d0a83c..bc2a821 100644
Binary files a/elisp/cedet-1.1/ede/ede-load.elc and b/elisp/cedet-1.1/ede/ede-load.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-loaddefs.el b/elisp/cedet-1.1/ede/ede-loaddefs.el
index d886a5c..cf43ea2 100644
--- a/elisp/cedet-1.1/ede/ede-loaddefs.el
+++ b/elisp/cedet-1.1/ede/ede-loaddefs.el
@@ -443,8 +443,8 @@ Argument NEWVERSION is the version number to use in the current project.
 ;;;;;;  "ede-proj-elisp.el" "ede-proj-info.el" "ede-proj-misc.el"
 ;;;;;;  "ede-proj-obj.el" "ede-proj-prog.el" "ede-proj-scheme.el"
 ;;;;;;  "ede-proj-shared.el" "ede-proj-skel.el" "ede-source.el" "ede-speedbar.el"
-;;;;;;  "ede-system.el" "makefile-edit.el" "project-am.el") (20565
-;;;;;;  26915 21979))
+;;;;;;  "ede-system.el" "makefile-edit.el" "project-am.el") (20584
+;;;;;;  5765 119792))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/ede/ede-locate.elc b/elisp/cedet-1.1/ede/ede-locate.elc
index 1f046dd..02bd624 100644
Binary files a/elisp/cedet-1.1/ede/ede-locate.elc and b/elisp/cedet-1.1/ede/ede-locate.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-m3.elc b/elisp/cedet-1.1/ede/ede-m3.elc
index f743861..d0f8495 100644
Binary files a/elisp/cedet-1.1/ede/ede-m3.elc and b/elisp/cedet-1.1/ede/ede-m3.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-make.elc b/elisp/cedet-1.1/ede/ede-make.elc
index ff51687..5f61430 100644
Binary files a/elisp/cedet-1.1/ede/ede-make.elc and b/elisp/cedet-1.1/ede/ede-make.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-pconf.elc b/elisp/cedet-1.1/ede/ede-pconf.elc
index a5c09e7..e440a45 100644
Binary files a/elisp/cedet-1.1/ede/ede-pconf.elc and b/elisp/cedet-1.1/ede/ede-pconf.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-pmake.elc b/elisp/cedet-1.1/ede/ede-pmake.elc
index fa503a6..289dec8 100644
Binary files a/elisp/cedet-1.1/ede/ede-pmake.elc and b/elisp/cedet-1.1/ede/ede-pmake.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-archive.elc b/elisp/cedet-1.1/ede/ede-proj-archive.elc
index 13d70a8..3960188 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-archive.elc and b/elisp/cedet-1.1/ede/ede-proj-archive.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-aux.elc b/elisp/cedet-1.1/ede/ede-proj-aux.elc
index bb4c708..9d7f0e1 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-aux.elc and b/elisp/cedet-1.1/ede/ede-proj-aux.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-comp.elc b/elisp/cedet-1.1/ede/ede-proj-comp.elc
index a00a264..d0f1d00 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-comp.elc and b/elisp/cedet-1.1/ede/ede-proj-comp.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-elisp.elc b/elisp/cedet-1.1/ede/ede-proj-elisp.elc
index 65d6a0f..b182a61 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-elisp.elc and b/elisp/cedet-1.1/ede/ede-proj-elisp.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-info.elc b/elisp/cedet-1.1/ede/ede-proj-info.elc
index 9af0b75..689c8e4 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-info.elc and b/elisp/cedet-1.1/ede/ede-proj-info.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-misc.elc b/elisp/cedet-1.1/ede/ede-proj-misc.elc
index a612c16..aac5c5e 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-misc.elc and b/elisp/cedet-1.1/ede/ede-proj-misc.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-obj.elc b/elisp/cedet-1.1/ede/ede-proj-obj.elc
index 4d6c112..fc2d250 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-obj.elc and b/elisp/cedet-1.1/ede/ede-proj-obj.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-prog.elc b/elisp/cedet-1.1/ede/ede-proj-prog.elc
index 7d1be83..2151c13 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-prog.elc and b/elisp/cedet-1.1/ede/ede-proj-prog.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-scheme.elc b/elisp/cedet-1.1/ede/ede-proj-scheme.elc
index 7681f03..111e2e8 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-scheme.elc and b/elisp/cedet-1.1/ede/ede-proj-scheme.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj-shared.elc b/elisp/cedet-1.1/ede/ede-proj-shared.elc
index a37ce11..5e7683f 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj-shared.elc and b/elisp/cedet-1.1/ede/ede-proj-shared.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-proj.elc b/elisp/cedet-1.1/ede/ede-proj.elc
index b34859f..d364339 100644
Binary files a/elisp/cedet-1.1/ede/ede-proj.elc and b/elisp/cedet-1.1/ede/ede-proj.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-shell.elc b/elisp/cedet-1.1/ede/ede-shell.elc
index 11bdf30..092bff2 100644
Binary files a/elisp/cedet-1.1/ede/ede-shell.elc and b/elisp/cedet-1.1/ede/ede-shell.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-source.elc b/elisp/cedet-1.1/ede/ede-source.elc
index 53ff352..b4fae21 100644
Binary files a/elisp/cedet-1.1/ede/ede-source.elc and b/elisp/cedet-1.1/ede/ede-source.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-speedbar.elc b/elisp/cedet-1.1/ede/ede-speedbar.elc
index f9b6625..d56c91a 100644
Binary files a/elisp/cedet-1.1/ede/ede-speedbar.elc and b/elisp/cedet-1.1/ede/ede-speedbar.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-srecode.elc b/elisp/cedet-1.1/ede/ede-srecode.elc
index e8a33f6..cc7102f 100644
Binary files a/elisp/cedet-1.1/ede/ede-srecode.elc and b/elisp/cedet-1.1/ede/ede-srecode.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-system.elc b/elisp/cedet-1.1/ede/ede-system.elc
index 5baae20..247cb50 100644
Binary files a/elisp/cedet-1.1/ede/ede-system.elc and b/elisp/cedet-1.1/ede/ede-system.elc differ
diff --git a/elisp/cedet-1.1/ede/ede-util.elc b/elisp/cedet-1.1/ede/ede-util.elc
index b773a1c..a55cf51 100644
Binary files a/elisp/cedet-1.1/ede/ede-util.elc and b/elisp/cedet-1.1/ede/ede-util.elc differ
diff --git a/elisp/cedet-1.1/ede/ede.elc b/elisp/cedet-1.1/ede/ede.elc
index b1cbe8d..2af9bbf 100644
Binary files a/elisp/cedet-1.1/ede/ede.elc and b/elisp/cedet-1.1/ede/ede.elc differ
diff --git a/elisp/cedet-1.1/ede/makefile-edit.elc b/elisp/cedet-1.1/ede/makefile-edit.elc
index cf35f91..1b262cd 100644
Binary files a/elisp/cedet-1.1/ede/makefile-edit.elc and b/elisp/cedet-1.1/ede/makefile-edit.elc differ
diff --git a/elisp/cedet-1.1/ede/project-am.elc b/elisp/cedet-1.1/ede/project-am.elc
index 932597e..dc9176e 100644
Binary files a/elisp/cedet-1.1/ede/project-am.elc and b/elisp/cedet-1.1/ede/project-am.elc differ
diff --git a/elisp/cedet-1.1/eieio/chart.elc b/elisp/cedet-1.1/eieio/chart.elc
index 6d2c73f..5f5252f 100644
Binary files a/elisp/cedet-1.1/eieio/chart.elc and b/elisp/cedet-1.1/eieio/chart.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-base.elc b/elisp/cedet-1.1/eieio/eieio-base.elc
index 70b7862..59d039f 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-base.elc and b/elisp/cedet-1.1/eieio/eieio-base.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-comp.elc b/elisp/cedet-1.1/eieio/eieio-comp.elc
index a052c0a..f8763b2 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-comp.elc and b/elisp/cedet-1.1/eieio/eieio-comp.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-custom.elc b/elisp/cedet-1.1/eieio/eieio-custom.elc
index 6ec57e1..cc2a49e 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-custom.elc and b/elisp/cedet-1.1/eieio/eieio-custom.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-datadebug.elc b/elisp/cedet-1.1/eieio/eieio-datadebug.elc
index 8561503..f893321 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-datadebug.elc and b/elisp/cedet-1.1/eieio/eieio-datadebug.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-doc.elc b/elisp/cedet-1.1/eieio/eieio-doc.elc
index b043bfd..94fc4df 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-doc.elc and b/elisp/cedet-1.1/eieio/eieio-doc.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-load.elc b/elisp/cedet-1.1/eieio/eieio-load.elc
index d163e55..0de0e09 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-load.elc and b/elisp/cedet-1.1/eieio/eieio-load.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-loaddefs.el b/elisp/cedet-1.1/eieio/eieio-loaddefs.el
index 754a0b0..77febac 100644
--- a/elisp/cedet-1.1/eieio/eieio-loaddefs.el
+++ b/elisp/cedet-1.1/eieio/eieio-loaddefs.el
@@ -126,7 +126,7 @@ Works on grep, compile, or other type mode.
 ;;;### (autoloads nil nil ("eieio-base.el" "eieio-comp.el" "eieio-custom.el"
 ;;;;;;  "eieio-doc.el" "eieio-load.el" "eieio-speedbar.el" "eieio-test-methodinvoke.el"
 ;;;;;;  "eieio-test-mro.el" "eieio-test-persist.el" "eieio-tests.el"
-;;;;;;  "eieio.el") (20565 26890 349991))
+;;;;;;  "eieio.el") (20584 5749 139310))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/eieio/eieio-opt.elc b/elisp/cedet-1.1/eieio/eieio-opt.elc
index db7d629..d09e98f 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-opt.elc and b/elisp/cedet-1.1/eieio/eieio-opt.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio-speedbar.elc b/elisp/cedet-1.1/eieio/eieio-speedbar.elc
index fc66594..f308cfb 100644
Binary files a/elisp/cedet-1.1/eieio/eieio-speedbar.elc and b/elisp/cedet-1.1/eieio/eieio-speedbar.elc differ
diff --git a/elisp/cedet-1.1/eieio/eieio.elc b/elisp/cedet-1.1/eieio/eieio.elc
index 239c31c..16b109f 100644
Binary files a/elisp/cedet-1.1/eieio/eieio.elc and b/elisp/cedet-1.1/eieio/eieio.elc differ
diff --git a/elisp/cedet-1.1/eieio/linemark.elc b/elisp/cedet-1.1/eieio/linemark.elc
index 4dd741b..a9ca53a 100644
Binary files a/elisp/cedet-1.1/eieio/linemark.elc and b/elisp/cedet-1.1/eieio/linemark.elc differ
diff --git a/elisp/cedet-1.1/eieio/lmcompile.elc b/elisp/cedet-1.1/eieio/lmcompile.elc
index 6893f80..e2ddd39 100644
Binary files a/elisp/cedet-1.1/eieio/lmcompile.elc and b/elisp/cedet-1.1/eieio/lmcompile.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/bovine-debug.elc b/elisp/cedet-1.1/semantic/bovine/bovine-debug.elc
index 59a4deb..78a022f 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/bovine-debug.elc and b/elisp/cedet-1.1/semantic/bovine/bovine-debug.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/bovine-grammar-macros.elc b/elisp/cedet-1.1/semantic/bovine/bovine-grammar-macros.elc
index e4f85f3..4db728e 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/bovine-grammar-macros.elc and b/elisp/cedet-1.1/semantic/bovine/bovine-grammar-macros.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/bovine-grammar.elc b/elisp/cedet-1.1/semantic/bovine/bovine-grammar.elc
index d616b09..fffa15a 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/bovine-grammar.elc and b/elisp/cedet-1.1/semantic/bovine/bovine-grammar.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-bovine.elc b/elisp/cedet-1.1/semantic/bovine/semantic-bovine.elc
index b3216a5..43e7932 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-bovine.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-bovine.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-c-by.el~ b/elisp/cedet-1.1/semantic/bovine/semantic-c-by.el~
deleted file mode 100644
index d9366c3..0000000
--- a/elisp/cedet-1.1/semantic/bovine/semantic-c-by.el~
+++ /dev/null
@@ -1,2224 +0,0 @@
-;;; semantic-c-by.el --- Generated parser support file
-
-;; Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012 Eric M. Ludlam
-
-;; Author: Eric M. Ludlam <eric@siege-engine.com>
-;; Created: 2012-02-16 21:11:23-0500
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file c.by.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst semantic-c-by--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("extern" . EXTERN)
-     ("static" . STATIC)
-     ("const" . CONST)
-     ("volatile" . VOLATILE)
-     ("register" . REGISTER)
-     ("signed" . SIGNED)
-     ("unsigned" . UNSIGNED)
-     ("inline" . INLINE)
-     ("virtual" . VIRTUAL)
-     ("mutable" . MUTABLE)
-     ("explicit" . EXPLICIT)
-     ("struct" . STRUCT)
-     ("union" . UNION)
-     ("enum" . ENUM)
-     ("typedef" . TYPEDEF)
-     ("class" . CLASS)
-     ("typename" . TYPENAME)
-     ("namespace" . NAMESPACE)
-     ("using" . USING)
-     ("new" . NEW)
-     ("delete" . DELETE)
-     ("template" . TEMPLATE)
-     ("throw" . THROW)
-     ("reentrant" . REENTRANT)
-     ("try" . TRY)
-     ("catch" . CATCH)
-     ("operator" . OPERATOR)
-     ("public" . PUBLIC)
-     ("private" . PRIVATE)
-     ("protected" . PROTECTED)
-     ("friend" . FRIEND)
-     ("if" . IF)
-     ("else" . ELSE)
-     ("do" . DO)
-     ("while" . WHILE)
-     ("for" . FOR)
-     ("switch" . SWITCH)
-     ("case" . CASE)
-     ("default" . DEFAULT)
-     ("return" . RETURN)
-     ("break" . BREAK)
-     ("continue" . CONTINUE)
-     ("sizeof" . SIZEOF)
-     ("void" . VOID)
-     ("char" . CHAR)
-     ("wchar_t" . WCHAR)
-     ("short" . SHORT)
-     ("int" . INT)
-     ("long" . LONG)
-     ("float" . FLOAT)
-     ("double" . DOUBLE)
-     ("bool" . BOOL)
-     ("_P" . UNDERP)
-     ("__P" . UNDERUNDERP))
-   '(("__P" summary "Common macro to eliminate prototype compatibility on some compilers")
-     ("_P" summary "Common macro to eliminate prototype compatibility on some compilers")
-     ("bool" summary "Primitive boolean type")
-     ("double" summary "Primitive floating-point type (double-precision 64-bit IEEE 754)")
-     ("float" summary "Primitive floating-point type (single-precision 32-bit IEEE 754)")
-     ("long" summary "Integral primitive type (-9223372036854775808 to 9223372036854775807)")
-     ("int" summary "Integral Primitive Type: (-2147483648 to 2147483647)")
-     ("short" summary "Integral Primitive Type: (-32768 to 32767)")
-     ("wchar_t" summary "Wide Character Type")
-     ("char" summary "Integral Character Type: (0 to 256)")
-     ("void" summary "Built in typeless type: void")
-     ("sizeof" summary "Compile time macro: sizeof(<type or variable>) // size in bytes")
-     ("continue" summary "Non-local continue within a loop (for, do/while): continue;")
-     ("break" summary "Non-local exit within a loop or switch (for, do/while, switch): break;")
-     ("return" summary "return <value>;")
-     ("default" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }")
-     ("case" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }")
-     ("switch" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }")
-     ("for" summary "for(<init>; <condition>; <increment>) { code }")
-     ("while" summary "do { code } while (<condition>); or while (<condition>) { code };")
-     ("do" summary " do { code } while (<condition>);")
-     ("else" summary "if (<condition>) { code } [ else { code } ]")
-     ("if" summary "if (<condition>) { code } [ else { code } ]")
-     ("friend" summary "friend class <CLASSNAME>")
-     ("catch" summary "try { <body> } catch { <catch code> }")
-     ("try" summary "try { <body> } catch { <catch code> }")
-     ("reentrant" summary "<type> <methoddef> (<method args>) reentrant ...")
-     ("throw" summary "<type> <methoddef> (<method args>) throw (<exception>) ...")
-     ("template" summary "template <class TYPE ...> TYPE_OR_FUNCTION")
-     ("delete" summary "delete <object>;")
-     ("new" summary "new <classname>();")
-     ("using" summary "using <namespace>;")
-     ("namespace" summary "Namespace Declaration: namespace <name> { ... };")
-     ("typename" summary "typename is used to handle a qualified name as a typename;")
-     ("class" summary "Class Declaration: class <name>[:parents] { ... };")
-     ("typedef" summary "Arbitrary Type Declaration: typedef <typedeclaration> <name>;")
-     ("enum" summary "Enumeration Type Declaration: enum [name] { ... };")
-     ("union" summary "Union Type Declaration: union [name] { ... };")
-     ("struct" summary "Structure Type Declaration: struct [name] { ... };")
-     ("explicit" summary "Forbids implicit type conversion: explicit <constructor>")
-     ("mutable" summary "Member Declaration Modifier: mutable <type> <name> ...")
-     ("virtual" summary "Method Modifier: virtual <type> <name>(...) ...")
-     ("inline" summary "Function Modifier: inline <return  type> <name>(...) {...};")
-     ("unsigned" summary "Numeric Type Modifier: unsigned <numeric type> <name> ...")
-     ("signed" summary "Numeric Type Modifier: signed <numeric type> <name> ...")
-     ("register" summary "Declaration Modifier: register <type> <name> ...")
-     ("volatile" summary "Declaration Modifier: volatile <type> <name> ...")
-     ("const" summary "Declaration Modifier: const <type> <name> ...")
-     ("static" summary "Declaration Modifier: static <type> <name> ...")
-     ("extern" summary "Declaration Modifier: extern <type> <name> ...")))
-  "Table of language keywords.")
-
-(defconst semantic-c-by--token-table
-  (semantic-lex-make-type-table
-   '(("semantic-list"
-      (BRACKETS . "\\[\\]")
-      (PARENS . "()")
-      (VOID_BLCK . "^(void)$")
-      (BRACE_BLCK . "^{")
-      (PAREN_BLCK . "^(")
-      (BRACK_BLCK . "\\[.*\\]$"))
-     ("close-paren"
-      (RBRACE . "}")
-      (RPAREN . ")"))
-     ("open-paren"
-      (LBRACE . "{")
-      (LPAREN . "("))
-     ("symbol"
-      (RESTRICT . "\\<\\(__\\)?restrict\\>"))
-     ("number"
-      (ZERO . "^0$"))
-     ("string"
-      (CPP . "\"C\\+\\+\"")
-      (C . "\"C\""))
-     ("punctuation"
-      (OR . "\\`[|]\\'")
-      (HAT . "\\`\\^\\'")
-      (MOD . "\\`[%]\\'")
-      (TILDE . "\\`[~]\\'")
-      (COMA . "\\`[,]\\'")
-      (GREATER . "\\`[>]\\'")
-      (LESS . "\\`[<]\\'")
-      (EQUAL . "\\`[=]\\'")
-      (BANG . "\\`[!]\\'")
-      (MINUS . "\\`[-]\\'")
-      (PLUS . "\\`[+]\\'")
-      (DIVIDE . "\\`[/]\\'")
-      (AMPERSAND . "\\`[&]\\'")
-      (STAR . "\\`[*]\\'")
-      (SEMICOLON . "\\`[;]\\'")
-      (COLON . "\\`[:]\\'")
-      (PERIOD . "\\`[.]\\'")
-      (HASH . "\\`[#]\\'")))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst semantic-c-by--parse-table
-  `(
-    (bovine-toplevel
-     (declaration)
-     ) ;; end bovine-toplevel
-
-    (bovine-inner-scope
-     (codeblock)
-     ) ;; end bovine-inner-scope
-
-    (declaration
-     (macro)
-     (type)
-     (define)
-     (var-or-fun)
-     (extern-c)
-     (template)
-     (using)
-     ) ;; end declaration
-
-    (codeblock
-     (define)
-     (codeblock-var-or-fun)
-     (type)
-     (using)
-     ) ;; end codeblock
-
-    (extern-c-contents
-     (open-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     (declaration)
-     (close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end extern-c-contents
-
-    (extern-c
-     (EXTERN
-      string
-      "\"C\""
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 "C"
-	 'extern :members
-	 (semantic-parse-region
-	  (car
-	   (nth 2 vals))
-	  (cdr
-	   (nth 2 vals))
-	  'extern-c-contents
-	  1)))
-      )
-     (EXTERN
-      string
-      "\"C\\+\\+\""
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 "C"
-	 'extern :members
-	 (semantic-parse-region
-	  (car
-	   (nth 2 vals))
-	  (cdr
-	   (nth 2 vals))
-	  'extern-c-contents
-	  1)))
-      )
-     (EXTERN
-      string
-      "\"C\""
-      ,(semantic-lambda
-	(list nil))
-      )
-     (EXTERN
-      string
-      "\"C\\+\\+\""
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end extern-c
-
-    (macro
-     (spp-macro-def
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil nil :constant-flag t))
-      )
-     (spp-system-include
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (nth 0 vals) t))
-      )
-     (spp-include
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (nth 0 vals) nil))
-      )
-     ) ;; end macro
-
-    (define
-      (spp-macro-def
-       ,(semantic-lambda
-	 (semantic-tag-new-variable
-	  (nth 0 vals) nil nil :constant-flag t))
-       )
-      (spp-macro-undef
-       ,(semantic-lambda
-	 (list nil))
-       )
-      ) ;; end define
-
-    (unionparts
-     (semantic-list
-      ,(semantic-lambda
-	(semantic-parse-region
-	 (car
-	  (nth 0 vals))
-	 (cdr
-	  (nth 0 vals))
-	 'classsubparts
-	 1))
-      )
-     ) ;; end unionparts
-
-    (opt-symbol
-     (symbol)
-     ( ;;EMPTY
-      )
-     ) ;; end opt-symbol
-
-    (classsubparts
-     (open-paren
-      "{"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      "}"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (class-protection
-      opt-symbol
-      punctuation
-      "\\`[:]\\'"
-      ,(semantic-lambda
-	(semantic-tag
-	 (car
-	  (nth 0 vals))
-	 'label))
-      )
-     (var-or-fun)
-     (FRIEND
-      func-decl
-      ,(semantic-lambda
-	(semantic-tag
-	 (car
-	  (nth 1 vals))
-	 'friend))
-      )
-     (FRIEND
-      CLASS
-      symbol
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 2 vals)
-	 'friend))
-      )
-     (type)
-     (define)
-     (template)
-     ( ;;EMPTY
-      )
-     ) ;; end classsubparts
-
-    (opt-class-parents
-     (punctuation
-      "\\`[:]\\'"
-      class-parents
-      opt-template-specifier
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end opt-class-parents
-
-    (one-class-parent
-     (opt-class-protection
-      opt-class-declmods
-      namespace-symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 "class" nil nil :protection
-	 (car
-	  (nth 0 vals))))
-      )
-     (opt-class-declmods
-      opt-class-protection
-      namespace-symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 "class" nil nil :protection
-	 (car
-	  (nth 1 vals))))
-      )
-     ) ;; end one-class-parent
-
-    (class-parents
-     (one-class-parent
-      punctuation
-      "\\`[,]\\'"
-      class-parents
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (one-class-parent
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end class-parents
-
-    (opt-class-declmods
-     (class-declmods
-      opt-class-declmods
-      ,(semantic-lambda
-	(list nil))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end opt-class-declmods
-
-    (class-declmods
-     (VIRTUAL)
-     ) ;; end class-declmods
-
-    (class-protection
-     (PUBLIC)
-     (PRIVATE)
-     (PROTECTED)
-     ) ;; end class-protection
-
-    (opt-class-protection
-     (class-protection
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list
-	 "unspecified"))
-      )
-     ) ;; end opt-class-protection
-
-    (namespaceparts
-     (semantic-list
-      ,(semantic-lambda
-	(semantic-parse-region
-	 (car
-	  (nth 0 vals))
-	 (cdr
-	  (nth 0 vals))
-	 'namespacesubparts
-	 1))
-      )
-     ) ;; end namespaceparts
-
-    (namespacesubparts
-     (open-paren
-      "{"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      "}"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (type)
-     (var-or-fun)
-     (define)
-     (class-protection
-      punctuation
-      "\\`[:]\\'"
-      ,(semantic-lambda
-	(semantic-tag
-	 (car
-	  (nth 0 vals))
-	 'label))
-      )
-     (template)
-     (using)
-     (spp-include
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 0 vals)
-	 'include :inside-ns t))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end namespacesubparts
-
-    (enumparts
-     (semantic-list
-      ,(semantic-lambda
-	(semantic-parse-region
-	 (car
-	  (nth 0 vals))
-	 (cdr
-	  (nth 0 vals))
-	 'enumsubparts
-	 1))
-      )
-     ) ;; end enumparts
-
-    (enumsubparts
-     (symbol
-      opt-assign
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals)
-	 "int"
-	 (car
-	  (nth 1 vals)) :constant-flag t))
-      )
-     (open-paren
-      "{"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      "}"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (punctuation
-      "\\`[,]\\'"
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end enumsubparts
-
-    (opt-name
-     (symbol)
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list
-	 ""))
-      )
-     ) ;; end opt-name
-
-    (typesimple
-     (struct-or-class
-      opt-class
-      opt-name
-      opt-template-specifier
-      opt-class-parents
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 (car
-	  (nth 0 vals))
-	 (let
-	     (
-	      (semantic-c-classname
-	       (cons
-		(car
-		 (nth 2 vals))
-		(car
-		 (nth 0 vals)))))
-	   (semantic-parse-region
-	    (car
-	     (nth 5 vals))
-	    (cdr
-	     (nth 5 vals))
-	    'classsubparts
-	    1))
-	 (nth 4 vals) :template-specifier
-	 (nth 3 vals) :parent
-	 (car
-	  (nth 1 vals))))
-      )
-     (struct-or-class
-      opt-class
-      opt-name
-      opt-template-specifier
-      opt-class-parents
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 (car
-	  (nth 0 vals)) nil
-	 (nth 4 vals) :template-specifier
-	 (nth 3 vals) :prototype t :parent
-	 (car
-	  (nth 1 vals))))
-      )
-     (UNION
-      opt-class
-      opt-name
-      unionparts
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 (nth 0 vals)
-	 (nth 3 vals) nil :parent
-	 (car
-	  (nth 1 vals))))
-      )
-     (ENUM
-      opt-class
-      opt-name
-      enumparts
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 2 vals))
-	 (nth 0 vals)
-	 (nth 3 vals) nil :parent
-	 (car
-	  (nth 1 vals))))
-      )
-     (TYPEDEF
-      declmods
-      typeformbase
-      cv-declmods
-      typedef-symbol-list
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 4 vals)
-	 (nth 0 vals) nil
-	 (list
-	  (nth 2 vals))))
-      )
-     ) ;; end typesimple
-
-    (typedef-symbol-list
-     (typedefname
-      punctuation
-      "\\`[,]\\'"
-      typedef-symbol-list
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (typedefname
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end typedef-symbol-list
-
-    (typedefname
-     (opt-stars
-      symbol
-      opt-bits
-      opt-array
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)
-	 (nth 1 vals)))
-      )
-     ) ;; end typedefname
-
-    (struct-or-class
-     (STRUCT)
-     (CLASS)
-     ) ;; end struct-or-class
-
-    (type
-     (typesimple
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (NAMESPACE
-      symbol
-      namespaceparts
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 (nth 0 vals)
-	 (nth 2 vals) nil))
-      )
-     (NAMESPACE
-      namespaceparts
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 "unnamed"
-	 (nth 0 vals)
-	 (nth 1 vals) nil))
-      )
-     (NAMESPACE
-      symbol
-      punctuation
-      "\\`[=]\\'"
-      typeformbase
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 (nth 0 vals)
-	 (list
-	  (semantic-tag-new-type
-	   (car
-	    (nth 3 vals))
-	   (nth 0 vals) nil nil)) nil :kind
-	 'alias))
-      )
-     ) ;; end type
-
-    (using
-     (USING
-      usingname
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(semantic-tag
-	 (car
-	  (nth 1 vals))
-	 'using :type
-	 (nth 1 vals)))
-      )
-     ) ;; end using
-
-    (usingname
-     (typeformbase
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 0 vals))
-	 "class" nil nil :prototype t))
-      )
-     (NAMESPACE
-      typeformbase
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 1 vals))
-	 "namespace" nil nil :prototype t))
-      )
-     ) ;; end usingname
-
-    (template
-     (TEMPLATE
-      template-specifier
-      opt-friend
-      template-definition
-      ,(semantic-lambda
-	(semantic-c-reconstitute-template
-	 (nth 3 vals)
-	 (nth 1 vals)))
-      )
-     ) ;; end template
-
-    (opt-friend
-     (FRIEND)
-     ( ;;EMPTY
-      )
-     ) ;; end opt-friend
-
-    (opt-template-specifier
-     (template-specifier
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end opt-template-specifier
-
-    (template-specifier
-     (punctuation
-      "\\`[<]\\'"
-      template-specifier-types
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ) ;; end template-specifier
-
-    (template-specifier-types
-     (template-var
-      template-specifier-type-list
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end template-specifier-types
-
-    (template-specifier-type-list
-     (punctuation
-      "\\`[,]\\'"
-      template-specifier-types
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end template-specifier-type-list
-
-    (template-var
-     (template-type
-      opt-template-equal
-      ,(semantic-lambda
-	(cons
-	 (car
-	  (nth 0 vals))
-	 (cdr
-	  (nth 0 vals))))
-      )
-     (string
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (number
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (opt-stars
-      opt-ref
-      namespace-symbol
-      ,(semantic-lambda
-	(nth 2 vals))
-      )
-     (semantic-list
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (SIZEOF
-      semantic-list
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ) ;; end template-var
-
-    (opt-template-equal
-     (punctuation
-      "\\`[=]\\'"
-      symbol
-      punctuation
-      "\\`[<]\\'"
-      template-specifier-types
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      symbol
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end opt-template-equal
-
-    (template-type
-     (CLASS
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 "class" nil nil))
-      )
-     (STRUCT
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 "struct" nil nil))
-      )
-     (TYPENAME
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 "class" nil nil))
-      )
-     (declmods
-      typeformbase
-      cv-declmods
-      opt-stars
-      opt-ref
-      variablearg-opt-name
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 1 vals)) nil nil nil :constant-flag
-	 (if
-	     (member
-	      "const"
-	      (append
-	       (nth 0 vals)
-	       (nth 2 vals))) t nil) :typemodifiers
-	 (delete
-	  "const"
-	  (append
-	   (nth 0 vals)
-	   (nth 2 vals))) :reference
-	 (car
-	  (nth 4 vals)) :pointer
-	 (car
-	  (nth 3 vals))))
-      )
-     ) ;; end template-type
-
-    (template-definition
-     (type
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (var-or-fun
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end template-definition
-
-    (opt-stars
-     (punctuation
-      "\\`[*]\\'"
-      opt-starmod
-      opt-stars
-      ,(semantic-lambda
-	(list
-	 (1+
-	  (car
-	   (nth 2 vals)))))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list
-	 0))
-      )
-     ) ;; end opt-stars
-
-    (opt-starmod
-     (STARMOD
-      opt-starmod
-      ,(semantic-lambda
-	(cons
-	 (car
-	  (nth 0 vals))
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end opt-starmod
-
-    (STARMOD
-     (CONST)
-     ) ;; end STARMOD
-
-    (declmods
-     (DECLMOD
-      declmods
-      ,(semantic-lambda
-	(cons
-	 (car
-	  (nth 0 vals))
-	 (nth 1 vals)))
-      )
-     (DECLMOD
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end declmods
-
-    (DECLMOD
-     (EXTERN)
-     (STATIC)
-     (CVDECLMOD)
-     (INLINE)
-     (REGISTER)
-     (FRIEND)
-     (TYPENAME)
-     (METADECLMOD)
-     (VIRTUAL)
-     ) ;; end DECLMOD
-
-    (metadeclmod
-     (METADECLMOD
-      ,(semantic-lambda)
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end metadeclmod
-
-    (CVDECLMOD
-     (CONST)
-     (VOLATILE)
-     ) ;; end CVDECLMOD
-
-    (cv-declmods
-     (CVDECLMOD
-      cv-declmods
-      ,(semantic-lambda
-	(cons
-	 (car
-	  (nth 0 vals))
-	 (nth 1 vals)))
-      )
-     (CVDECLMOD
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end cv-declmods
-
-    (METADECLMOD
-     (VIRTUAL)
-     (MUTABLE)
-     ) ;; end METADECLMOD
-
-    (opt-ref
-     (punctuation
-      "\\`[&]\\'"
-      ,(semantic-lambda
-	(list
-	 1))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list
-	 0))
-      )
-     ) ;; end opt-ref
-
-    (typeformbase
-     (typesimple
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (STRUCT
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 (nth 0 vals) nil nil))
-      )
-     (UNION
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 (nth 0 vals) nil nil))
-      )
-     (ENUM
-      symbol
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 (nth 0 vals) nil nil))
-      )
-     (builtintype
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (symbol
-      template-specifier
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 0 vals)
-	 "class" nil nil :template-specifier
-	 (nth 1 vals)))
-      )
-     (namespace-symbol-for-typeformbase
-      opt-template-specifier
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (car
-	  (nth 0 vals))
-	 "class" nil nil :template-specifier
-	 (nth 1 vals)))
-      )
-     (symbol
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end typeformbase
-
-    (signedmod
-     (UNSIGNED)
-     (SIGNED)
-     ) ;; end signedmod
-
-    (builtintype-types
-     (VOID)
-     (CHAR)
-     (WCHAR)
-     (SHORT
-      INT
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  " "
-	  (nth 1 vals))))
-      )
-     (SHORT)
-     (INT)
-     (LONG
-      INT
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  " "
-	  (nth 1 vals))))
-      )
-     (FLOAT)
-     (DOUBLE)
-     (BOOL)
-     (LONG
-      DOUBLE
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  " "
-	  (nth 1 vals))))
-      )
-     (LONG
-      LONG
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  " "
-	  (nth 1 vals))))
-      )
-     (LONG)
-     ) ;; end builtintype-types
-
-    (builtintype
-     (signedmod
-      builtintype-types
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  " "
-	  (car
-	   (nth 1 vals)))))
-      )
-     (builtintype-types
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (signedmod
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  " int")))
-      )
-     ) ;; end builtintype
-
-    (codeblock-var-or-fun
-     (declmods
-      typeformbase
-      declmods
-      opt-ref
-      var-or-func-decl
-      ,(semantic-lambda
-	(semantic-c-reconstitute-token
-	 (nth 4 vals)
-	 (nth 0 vals)
-	 (nth 1 vals)))
-      )
-     ) ;; end codeblock-var-or-fun
-
-    (var-or-fun
-     (codeblock-var-or-fun
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (declmods
-      var-or-func-decl
-      ,(semantic-lambda
-	(semantic-c-reconstitute-token
-	 (nth 1 vals)
-	 (nth 0 vals) nil))
-      )
-     ) ;; end var-or-fun
-
-    (var-or-func-decl
-     (func-decl
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (var-decl
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end var-or-func-decl
-
-    (func-decl
-     (opt-stars
-      opt-class
-      opt-destructor
-      functionname
-      opt-template-specifier
-      opt-under-p
-      arg-list
-      opt-post-fcn-modifiers
-      opt-throw
-      opt-initializers
-      fun-or-proto-end
-      ,(semantic-lambda
-	(nth 3 vals)
-	(list
-	 'function
-	 (nth 1 vals)
-	 (nth 2 vals)
-	 (nth 6 vals)
-	 (nth 8 vals)
-	 (nth 7 vals))
-	(nth 0 vals)
-	(nth 10 vals)
-	(list
-	 (nth 4 vals))
-	(nth 9 vals))
-      )
-     (opt-stars
-      opt-class
-      opt-destructor
-      functionname
-      opt-template-specifier
-      opt-under-p
-      opt-post-fcn-modifiers
-      opt-throw
-      opt-initializers
-      fun-try-end
-      ,(semantic-lambda
-	(nth 3 vals)
-	(list
-	 'function
-	 (nth 1 vals)
-	 (nth 2 vals) nil
-	 (nth 7 vals)
-	 (nth 6 vals))
-	(nth 0 vals)
-	(nth 9 vals)
-	(list
-	 (nth 4 vals))
-	(nth 8 vals))
-      )
-     ) ;; end func-decl
-
-    (var-decl
-     (varnamelist
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)
-	 'variable))
-      )
-     ) ;; end var-decl
-
-    (opt-under-p
-     (UNDERP
-      ,(semantic-lambda
-	(list nil))
-      )
-     (UNDERUNDERP
-      ,(semantic-lambda
-	(list nil))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end opt-under-p
-
-    (opt-initializers
-     (punctuation
-      "\\`[:]\\'"
-      namespace-symbol
-      semantic-list
-      opt-initializers)
-     (punctuation
-      "\\`[,]\\'"
-      namespace-symbol
-      semantic-list
-      opt-initializers)
-     ( ;;EMPTY
-      )
-     ) ;; end opt-initializers
-
-    (opt-post-fcn-modifiers
-     (post-fcn-modifiers
-      opt-post-fcn-modifiers
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-post-fcn-modifiers
-
-    (post-fcn-modifiers
-     (REENTRANT)
-     (CONST)
-     ) ;; end post-fcn-modifiers
-
-    (opt-throw
-     (THROW
-      semantic-list
-      ,(lambda (vals start end)
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 1 vals))
-	  (cdr
-	   (nth 1 vals))
-	  'throw-exception-list))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end opt-throw
-
-    (throw-exception-list
-     (namespace-symbol
-      punctuation
-      "\\`[,]\\'"
-      throw-exception-list
-      ,(semantic-lambda
-	(cons
-	 (car
-	  (nth 0 vals))
-	 (nth 2 vals)))
-      )
-     (namespace-symbol
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (symbol
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (open-paren
-      "("
-      throw-exception-list
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (close-paren
-      ")"
-      ,(semantic-lambda)
-      )
-     ) ;; end throw-exception-list
-
-    (opt-bits
-     (punctuation
-      "\\`[:]\\'"
-      number
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-bits
-
-    (opt-array
-     (semantic-list
-      "\\[.*\\]$"
-      opt-array
-      ,(semantic-lambda
-	(list
-	 (cons
-	  1
-	  (car
-	   (nth 1 vals)))))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-array
-
-    (opt-assign
-     (punctuation
-      "\\`[=]\\'"
-      expression
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-assign
-
-    (opt-restrict
-     (symbol
-      "\\<\\(__\\)?restrict\\>")
-     ( ;;EMPTY
-      )
-     ) ;; end opt-restrict
-
-    (varname
-     (opt-stars
-      opt-restrict
-      namespace-symbol
-      opt-bits
-      opt-array
-      ,(semantic-lambda
-	(nth 2 vals)
-	(nth 0 vals)
-	(nth 3 vals)
-	(nth 4 vals))
-      )
-     ) ;; end varname
-
-    (variablearg
-     (declmods
-      typeformbase
-      cv-declmods
-      opt-ref
-      variablearg-opt-name
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (list
-	  (nth 4 vals))
-	 (nth 1 vals) nil :constant-flag
-	 (if
-	     (member
-	      "const"
-	      (append
-	       (nth 0 vals)
-	       (nth 2 vals))) t nil) :typemodifiers
-	 (delete
-	  "const"
-	  (append
-	   (nth 0 vals)
-	   (nth 2 vals))) :reference
-	 (car
-	  (nth 3 vals))))
-      )
-     ) ;; end variablearg
-
-    (variablearg-opt-name
-     (varname
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (opt-stars
-      ,(semantic-lambda
-	(list
-	 "")
-	(nth 0 vals)
-	(list nil nil nil))
-      )
-     ) ;; end variablearg-opt-name
-
-    (varname-opt-initializer
-     (semantic-list)
-     (opt-assign)
-     ( ;;EMPTY
-      )
-     ) ;; end varname-opt-initializer
-
-    (varnamelist
-     (opt-ref
-      varname
-      varname-opt-initializer
-      punctuation
-      "\\`[,]\\'"
-      varnamelist
-      ,(semantic-lambda
-	(cons
-	 (nth 1 vals)
-	 (nth 4 vals)))
-      )
-     (opt-ref
-      varname
-      varname-opt-initializer
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ) ;; end varnamelist
-
-    (namespace-symbol
-     (symbol
-      opt-template-specifier
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      namespace-symbol
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  "::"
-	  (car
-	   (nth 4 vals)))))
-      )
-     (symbol
-      opt-template-specifier
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end namespace-symbol
-
-    (namespace-symbol-for-typeformbase
-     (symbol
-      opt-template-specifier
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      namespace-symbol-for-typeformbase
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  "::"
-	  (car
-	   (nth 4 vals)))))
-      )
-     (symbol
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end namespace-symbol-for-typeformbase
-
-    (namespace-opt-class
-     (symbol
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      namespace-opt-class
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  "::"
-	  (car
-	   (nth 3 vals)))))
-      )
-     (symbol
-      opt-template-specifier
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end namespace-opt-class
-
-    (opt-class
-     (namespace-opt-class
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-class
-
-    (opt-destructor
-     (punctuation
-      "\\`[~]\\'"
-      ,(semantic-lambda
-	(list t))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end opt-destructor
-
-    (arg-list
-     (semantic-list
-      "^("
-      knr-arguments
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (semantic-list
-      "^("
-      ,(semantic-lambda
-	(semantic-parse-region
-	 (car
-	  (nth 0 vals))
-	 (cdr
-	  (nth 0 vals))
-	 'arg-sub-list
-	 1))
-      )
-     (semantic-list
-      "^(void)$"
-      ,(semantic-lambda)
-      )
-     ) ;; end arg-list
-
-    (knr-varnamelist
-     (varname
-      punctuation
-      "\\`[,]\\'"
-      knr-varnamelist
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (varname
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end knr-varnamelist
-
-    (knr-one-variable-decl
-     (declmods
-      typeformbase
-      cv-declmods
-      knr-varnamelist
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nreverse
-	  (nth 3 vals))
-	 (nth 1 vals) nil :constant-flag
-	 (if
-	     (member
-	      "const"
-	      (append
-	       (nth 2 vals))) t nil) :typemodifiers
-	 (delete
-	  "const"
-	  (nth 2 vals))))
-      )
-     ) ;; end knr-one-variable-decl
-
-    (knr-arguments
-     (knr-one-variable-decl
-      punctuation
-      "\\`[;]\\'"
-      knr-arguments
-      ,(semantic-lambda
-	(append
-	 (semantic-expand-c-tag
-	  (nth 0 vals))
-	 (nth 2 vals)))
-      )
-     (knr-one-variable-decl
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(semantic-expand-c-tag
-	 (nth 0 vals)))
-      )
-     ) ;; end knr-arguments
-
-    (arg-sub-list
-     (variablearg
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (punctuation
-      "\\`[.]\\'"
-      punctuation
-      "\\`[.]\\'"
-      punctuation
-      "\\`[.]\\'"
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 "..."
-	 "vararg" nil))
-      )
-     (punctuation
-      "\\`[,]\\'"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (open-paren
-      "("
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      ")"
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end arg-sub-list
-
-    (operatorsym
-     (punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "<<="))
-      )
-     (punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 ">>="))
-      )
-     (punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[<]\\'"
-      ,(semantic-lambda
-	(list
-	 "<<"))
-      )
-     (punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(list
-	 ">>"))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "=="))
-      )
-     (punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "<="))
-      )
-     (punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 ">="))
-      )
-     (punctuation
-      "\\`[!]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "!="))
-      )
-     (punctuation
-      "\\`[+]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "+="))
-      )
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "-="))
-      )
-     (punctuation
-      "\\`[*]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "*="))
-      )
-     (punctuation
-      "\\`[/]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "/="))
-      )
-     (punctuation
-      "\\`[%]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "%="))
-      )
-     (punctuation
-      "\\`[&]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "&="))
-      )
-     (punctuation
-      "\\`[|]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "|="))
-      )
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[*]\\'"
-      ,(semantic-lambda
-	(list
-	 "->*"))
-      )
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(list
-	 "->"))
-      )
-     (semantic-list
-      "()"
-      ,(semantic-lambda
-	(list
-	 "()"))
-      )
-     (semantic-list
-      "\\[\\]"
-      ,(semantic-lambda
-	(list
-	 "[]"))
-      )
-     (punctuation
-      "\\`[<]\\'")
-     (punctuation
-      "\\`[>]\\'")
-     (punctuation
-      "\\`[*]\\'")
-     (punctuation
-      "\\`[+]\\'"
-      punctuation
-      "\\`[+]\\'"
-      ,(semantic-lambda
-	(list
-	 "++"))
-      )
-     (punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[-]\\'"
-      ,(semantic-lambda
-	(list
-	 "--"))
-      )
-     (punctuation
-      "\\`[-]\\'")
-     (punctuation
-      "\\`[&]\\'"
-      punctuation
-      "\\`[&]\\'"
-      ,(semantic-lambda
-	(list
-	 "&&"))
-      )
-     (punctuation
-      "\\`[&]\\'")
-     (punctuation
-      "\\`[|]\\'"
-      punctuation
-      "\\`[|]\\'"
-      ,(semantic-lambda
-	(list
-	 "||"))
-      )
-     (punctuation
-      "\\`[|]\\'")
-     (punctuation
-      "\\`[/]\\'")
-     (punctuation
-      "\\`[=]\\'")
-     (punctuation
-      "\\`[!]\\'")
-     (punctuation
-      "\\`[~]\\'")
-     (punctuation
-      "\\`[%]\\'")
-     (punctuation
-      "\\`[,]\\'")
-     (punctuation
-      "\\`\\^\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "^="))
-      )
-     (punctuation
-      "\\`\\^\\'")
-     ) ;; end operatorsym
-
-    (functionname
-     (OPERATOR
-      operatorsym
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (semantic-list
-      ,(lambda (vals start end)
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 0 vals))
-	  (cdr
-	   (nth 0 vals))
-	  'function-pointer))
-      )
-     (symbol
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end functionname
-
-    (function-pointer
-     (open-paren
-      "("
-      punctuation
-      "\\`[*]\\'"
-      symbol
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(list
-	 (concat
-	  "*"
-	  (nth 2 vals))))
-      )
-     (open-paren
-      "("
-      symbol
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ) ;; end function-pointer
-
-    (fun-or-proto-end
-     (punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(list t))
-      )
-     (semantic-list
-      ,(semantic-lambda
-	(list nil))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      number
-      "^0$"
-      punctuation
-      "\\`[;]\\'"
-      ,(semantic-lambda
-	(list ':pure-virtual-flag))
-      )
-     (fun-try-end
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end fun-or-proto-end
-
-    (fun-try-end
-     (TRY
-      opt-initializers
-      semantic-list
-      "^{"
-      fun-try-several-catches
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end fun-try-end
-
-    (fun-try-several-catches
-     (CATCH
-      semantic-list
-      "^("
-      semantic-list
-      "^{"
-      fun-try-several-catches
-      ,(semantic-lambda)
-      )
-     (CATCH
-      semantic-list
-      "^{"
-      fun-try-several-catches
-      ,(semantic-lambda)
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end fun-try-several-catches
-
-    (type-cast
-     (semantic-list
-      ,(lambda (vals start end)
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 0 vals))
-	  (cdr
-	   (nth 0 vals))
-	  'type-cast-list))
-      )
-     ) ;; end type-cast
-
-    (type-cast-list
-     (open-paren
-      typeformbase
-      close-paren)
-     ) ;; end type-cast-list
-
-    (opt-stuff-after-symbol
-     (semantic-list
-      "^(")
-     (semantic-list
-      "\\[.*\\]$")
-     ( ;;EMPTY
-      )
-     ) ;; end opt-stuff-after-symbol
-
-    (multi-stage-dereference
-     (namespace-symbol
-      opt-stuff-after-symbol
-      punctuation
-      "\\`[.]\\'"
-      multi-stage-dereference)
-     (namespace-symbol
-      opt-stuff-after-symbol
-      punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[>]\\'"
-      multi-stage-dereference)
-     (namespace-symbol
-      opt-stuff-after-symbol)
-     ) ;; end multi-stage-dereference
-
-    (string-seq
-     (string
-      string-seq
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  (car
-	   (nth 1 vals)))))
-      )
-     (string
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end string-seq
-
-    (expr-start
-     (punctuation
-      "\\`[-]\\'")
-     (punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[*]\\'")
-     (punctuation
-      "\\`[&]\\'")
-     ) ;; end expr-start
-
-    (expr-binop
-     (punctuation
-      "\\`[-]\\'")
-     (punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[*]\\'")
-     (punctuation
-      "\\`[/]\\'")
-     (punctuation
-      "\\`[&]\\'"
-      punctuation
-      "\\`[&]\\'")
-     (punctuation
-      "\\`[&]\\'")
-     (punctuation
-      "\\`[|]\\'"
-      punctuation
-      "\\`[|]\\'")
-     (punctuation
-      "\\`[|]\\'")
-     ) ;; end expr-binop
-
-    (expression
-     (unaryexpression
-      expr-binop
-      unaryexpression
-      ,(semantic-lambda
-	(list
-	 (identity start)
-	 (identity end)))
-      )
-     (unaryexpression
-      ,(semantic-lambda
-	(list
-	 (identity start)
-	 (identity end)))
-      )
-     ) ;; end expression
-
-    (unaryexpression
-     (number)
-     (multi-stage-dereference)
-     (NEW
-      multi-stage-dereference)
-     (NEW
-      builtintype-types
-      semantic-list)
-     (namespace-symbol)
-     (string-seq)
-     (type-cast
-      expression)
-     (semantic-list
-      expression)
-     (semantic-list)
-     (expr-start
-      expression)
-     ) ;; end unaryexpression
-    )
-  "Parser table.")
-
-(defun semantic-c-by--install-parser ()
-  "Setup the Semantic Parser."
-  (setq semantic--parse-table semantic-c-by--parse-table
-	semantic-debug-parser-source "c.by"
-	semantic-debug-parser-class 'semantic-bovine-debug-parser
-	semantic-flex-keywords-obarray semantic-c-by--keyword-table
-	semantic-equivalent-major-modes '(c-mode c++-mode)
-	))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'semantic-c-by)
-
-;;; semantic-c-by.el ends here
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-c.elc b/elisp/cedet-1.1/semantic/bovine/semantic-c.elc
index c816ef3..3c46957 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-c.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-c.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-clang.elc b/elisp/cedet-1.1/semantic/bovine/semantic-clang.elc
index 51054b3..0011bad 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-clang.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-clang.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-el.elc b/elisp/cedet-1.1/semantic/bovine/semantic-el.elc
index ac8e059..aecf078 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-el.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-el.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-erlang-by.el~ b/elisp/cedet-1.1/semantic/bovine/semantic-erlang-by.el~
deleted file mode 100644
index 6e4e0ca..0000000
--- a/elisp/cedet-1.1/semantic/bovine/semantic-erlang-by.el~
+++ /dev/null
@@ -1,1824 +0,0 @@
-;;; semantic-erlang-by.el --- Generated parser support file
-
-;; Copyright (C) 2002, 2003 Vladimir G. Sekissov
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:37-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file erlang.by.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst semantic-erlang-by--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("begin" . BEGIN)
-     ("end" . END)
-     ("case" . CASE)
-     ("of" . OF)
-     ("if" . IF)
-     ("when" . WHEN)
-     ("true" . TRUE)
-     ("receive" . RECEIVE)
-     ("after" . AFTER)
-     ("or" . OR)
-     ("orelse" . ORELSE)
-     ("xor" . XOR)
-     ("bor" . BOR)
-     ("bxor" . BXOR)
-     ("bsl" . BSL)
-     ("bsr" . BSR)
-     ("div" . DIV)
-     ("rem" . REM)
-     ("band" . BAND)
-     ("and" . AND)
-     ("andalso" . ANDALSO)
-     ("bnot" . BNOT)
-     ("not" . NOT)
-     ("catch" . CATCH)
-     ("fun" . FUN)
-     ("query" . QUERY)
-     ("let" . LET)
-     ("module" . MODULE)
-     ("include" . INCLUDE)
-     ("include_lib" . INCLUDE_LIB)
-     ("behaviour" . BEHAVIOUR)
-     ("define" . DEFINE)
-     ("undef" . UNDEF)
-     ("ifdef" . IFDEF)
-     ("ifndef" . IFNDEF)
-     ("else" . ELSE)
-     ("endif" . ENDIF)
-     ("export" . EXPORT)
-     ("import" . IMPORT)
-     ("record" . RECORD)
-     ("signed" . SIGNED)
-     ("unsigned" . UNSIGNED))
-   'nil)
-  "Table of language keywords.")
-
-(defconst semantic-erlang-by--token-table
-  (semantic-lex-make-type-table
-   '(("close-paren"
-      (RBRACE . "}")
-      (RPAREN . ")"))
-     ("open-paren"
-      (LBRACE . "{")
-      (LPAREN . "("))
-     ("semantic-list"
-      (BRACE_BLCK . "^{")
-      (BRACK_BLCK . "^\\[")
-      (PAREN_BLCK . "^("))
-     ("symbol"
-      (UNIT . "unit")
-      (NATIVE . "native")
-      (LITTLE . "little")
-      (BIG . "big")
-      (BINARY . "binary")
-      (FLOAT . "float")
-      (INTEGER . "integer")
-      (FILE . "file")
-      (USCORE . "_")
-      (VAR2 . "^[A-Z][_a-zA-Z0-9]*")
-      (VAR1 . "^_[a-zA-Z0-9]+")
-      (INT2 . "[0-9]\\{1,2\\}")
-      (INT1 . "[0-9a-eA-E]+")
-      (EE . "[eE]")
-      (DIGITS . "[0-9]+")
-      (ATOM2 . "'.+'")
-      (ATOM1 . "[a-z][a-zA-Z0-9_@]*"))
-     ("punctuation"
-      (SIGN . "[-+]")
-      (VDEL . "\\`[|]\\'")
-      (COMA . "\\`[,]\\'")
-      (GREATER . "\\`[>]\\'")
-      (LESS . "\\`[<]\\'")
-      (EQUAL . "\\`[=]\\'")
-      (WHY . "\\`[?]\\'")
-      (BANG . "\\`[!]\\'")
-      (MINUS . "\\`[-]\\'")
-      (PLUS . "\\`[+]\\'")
-      (DIVIDE . "\\`[/]\\'")
-      (AMPERSAND . "\\`[&]\\'")
-      (STAR . "\\`[*]\\'")
-      (SEMICOLON . "\\`[;]\\'")
-      (COLON . "\\`[:]\\'")
-      (PERIOD . "\\`[.]\\'")
-      (HASH . "\\`[#]\\'")))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst semantic-erlang-by--parse-table
-  `(
-    (bovine-toplevel 
-     (module-decl)
-     ) ;; end bovine-toplevel
-
-    (add-op
-     (punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[-]\\'")
-     (BOR)
-     (BXOR)
-     (BSL)
-     (BSR)
-     ) ;; end add-op
-
-    (list-conc-op
-     (punctuation
-      "\\`[+]\\'"
-      punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[-]\\'")
-     ) ;; end list-conc-op
-
-    (comp-op
-     (punctuation
-      "\\`[=]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "=="))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "=:="))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      punctuation
-      "\\`[/]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "=/="))
-      )
-     (punctuation
-      "\\`[/]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 "/="))
-      )
-     (punctuation
-      "\\`[=]\\'"
-      punctuation
-      "\\`[<]\\'"
-      ,(semantic-lambda
-	(list
-	 "=<"))
-      )
-     (punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda
-	(list
-	 ">="))
-      )
-     (punctuation
-      "\\`[<]\\'")
-     (punctuation
-      "\\`[>]\\'")
-     (OR)
-     (ORELSE)
-     (XOR)
-     (AND)
-     (ANDALSO)
-     ) ;; end comp-op
-
-    (multi-op
-     (punctuation
-      "\\`[*]\\'")
-     (punctuation
-      "\\`[/]\\'")
-     (DIV)
-     (REM)
-     (BAND)
-     ) ;; end multi-op
-
-    (prefix-op
-     (punctuation
-      "\\`[+]\\'")
-     (punctuation
-      "\\`[-]\\'")
-     (BNOT)
-     (NOT)
-     ) ;; end prefix-op
-
-    (basic-type
-     (float-literal)
-     (integer-literal)
-     (char-literal)
-     (atom)
-     (var)
-     (string)
-     (TRUE)
-     ) ;; end basic-type
-
-    (atom
-     (symbol
-      "[a-z][a-zA-Z0-9_@]*"
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (symbol
-      "'.+'"
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end atom
-
-    (float-literal
-     (symbol
-      "[0-9]+"
-      punctuation
-      "\\`[.]\\'"
-      symbol
-      "[0-9]+"
-      exp-part)
-     (punctuation
-      "\\`[.]\\'"
-      symbol
-      "[0-9]+"
-      exp-part)
-     ) ;; end float-literal
-
-    (exp-part
-     (symbol
-      "[eE]"
-      punctuation
-      "[-+]"
-      symbol
-      "[0-9]+")
-     (symbol
-      "[eE]"
-      symbol
-      "[0-9]+")
-     ( ;;EMPTY
-      )
-     ) ;; end exp-part
-
-    (integer-literal
-     (symbol
-      "[0-9a-eA-E]+")
-     (symbol
-      "[0-9]\\{1,2\\}"
-      punctuation
-      "\\`[#]\\'"
-      symbol
-      "[0-9a-eA-E]+")
-     ) ;; end integer-literal
-
-    (char-literal
-     (CHAR)
-     ) ;; end char-literal
-
-    (var
-     (symbol
-      "^_[a-zA-Z0-9]+"
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil nil))
-      )
-     (symbol
-      "^[A-Z][_a-zA-Z0-9]*"
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil nil))
-      )
-     ) ;; end var
-
-    (uni-pattern
-     (symbol
-      "_")
-     ) ;; end uni-pattern
-
-    (binary
-     (punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(semantic-tag
-	 "<<>>"
-	 'binary))
-      )
-     (punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[<]\\'"
-      binary-segments
-      punctuation
-      "\\`[>]\\'"
-      punctuation
-      "\\`[>]\\'"
-      ,(semantic-lambda
-	(semantic-tag
-	 "<<Binary>>"
-	 'binary))
-      )
-     ) ;; end binary
-
-    (binary-segments
-     (binary-segment
-      binary-segments-rest)
-     ) ;; end binary-segments
-
-    (binary-segments-rest
-     (punctuation
-      "\\`[,]\\'"
-      binary-segments
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end binary-segments-rest
-
-    (binary-segment
-     (basic-type
-      binary-segment-rest)
-     (clause-pattern
-      binary-segment-rest)
-     ) ;; end binary-segment
-
-    (binary-segment-rest
-     (punctuation
-      "\\`[:]\\'"
-      basic-type
-      punctuation
-      "\\`[/]\\'"
-      binary-type-spec-list)
-     (punctuation
-      "\\`[:]\\'"
-      basic-type)
-     (punctuation
-      "\\`[/]\\'"
-      binary-type-spec-list)
-     ( ;;EMPTY
-      )
-     ) ;; end binary-segment-rest
-
-    (binary-type
-     (symbol
-      "integer")
-     (symbol
-      "float")
-     (symbol
-      "binary")
-     ) ;; end binary-type
-
-    (binary-signed
-     (SIGNED)
-     (UNSIGNED)
-     ) ;; end binary-signed
-
-    (binary-endian
-     (symbol
-      "big")
-     (symbol
-      "little")
-     (symbol
-      "native")
-     ) ;; end binary-endian
-
-    (binary-unit
-     (symbol
-      "unit"
-      punctuation
-      "\\`[:]\\'"
-      basic-type)
-     ) ;; end binary-unit
-
-    (binary-type-spec
-     (binary-type)
-     (binary-signed)
-     (binary-endian)
-     (binary-unit)
-     ) ;; end binary-type-spec
-
-    (binary-type-spec-list
-     (binary-type-spec
-      punctuation
-      "\\`[-]\\'"
-      binary-type-spec-list)
-     (binary-type-spec)
-     ) ;; end binary-type-spec-list
-
-    (module-decl
-     (module-attr)
-     (function-decl)
-     (header-form)
-     (directive)
-     (file-attr)
-     ) ;; end module-decl
-
-    (module-attr
-     (punctuation
-      "\\`[-]\\'"
-      MODULE
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(semantic-tag-new-package
-	 (car
-	  (semantic-bovinate-from-nonterminal
-	   (car
-	    (nth 2 vals))
-	   (cdr
-	    (nth 2 vals))
-	   'module-attr-name)) nil))
-      )
-     ) ;; end module-attr
-
-    (module-attr-name
-     (open-paren
-      "("
-      module-name
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 1 vals))))
-      )
-     ) ;; end module-attr-name
-
-    (module-name
-     (atom
-      module-name-rest
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  (car
-	   (nth 1 vals)))))
-      )
-     (module-name-rest
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))))
-      )
-     ) ;; end module-name
-
-    (module-name-rest
-     (punctuation
-      "\\`[.]\\'"
-      atom
-      module-name-rest
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (nth 0 vals)
-	  (car
-	   (nth 1 vals))
-	  (car
-	   (nth 2 vals)))))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end module-name-rest
-
-    (header-form
-     (header-attr)
-     (anywhere-attr)
-     ) ;; end header-form
-
-    (header-attr
-     (export-attr)
-     (import-attr)
-     (compile-attr)
-     (whild-attr)
-     ) ;; end header-attr
-
-    (anywhere-attr
-     (file-attr)
-     (macro-def)
-     (record-decl)
-     ) ;; end anywhere-attr
-
-    (export-attr
-     (punctuation
-      "\\`[-]\\'"
-      EXPORT
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end export-attr
-
-    (export-name-list
-     (open-paren
-      semantic-list
-      "^\\["
-      close-paren)
-     ) ;; end export-name-list
-
-    (import-attr
-     (punctuation
-      "\\`[-]\\'"
-      IMPORT
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(semantic-tag
-	 (car
-	  (semantic-bovinate-from-nonterminal
-	   (car
-	    (nth 2 vals))
-	   (cdr
-	    (nth 2 vals))
-	   'import-name-list))
-	 'import))
-      )
-     ) ;; end import-attr
-
-    (import-name-list
-     (open-paren
-      module-name
-      punctuation
-      "\\`[,]\\'"
-      semantic-list
-      "^\\["
-      close-paren
-      ,(semantic-lambda
-	(nth 1 vals)
-	(list
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 3 vals))
-	  (cdr
-	   (nth 3 vals))
-	  'function-name-list)))
-      )
-     (open-paren
-      module-name
-      close-paren
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ) ;; end import-name-list
-
-    (function-name-list
-     (open-paren
-      close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     (open-paren
-      function-names
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ) ;; end function-name-list
-
-    (function-names
-     (function-arity
-      punctuation
-      "\\`[,]\\'"
-      function-names
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (function-arity
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     ) ;; end function-names
-
-    (function-arity
-     (atom
-      punctuation
-      "\\`[/]\\'"
-      integer-literal
-      ,(semantic-lambda
-	(nth 0 vals)
-	(list
-	 (nth 1 vals))
-	(nth 2 vals))
-      )
-     ) ;; end function-arity
-
-    (compile-attr
-     (punctuation
-      "\\`[-]\\'"
-      COMPILE
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end compile-attr
-
-    (file-attr
-     (punctuation
-      "\\`[-]\\'"
-      symbol
-      "file"
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end file-attr
-
-    (file-attr-list
-     (open-paren
-      string
-      punctuation
-      "\\`[,]\\'"
-      integer-literal
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (cons
-	  (read
-	   (nth 1 vals))
-	  (nth 3 vals))))
-      )
-     ) ;; end file-attr-list
-
-    (whild-attr
-     (punctuation
-      "\\`[-]\\'"
-      atom
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end whild-attr
-
-    (function-decl
-     (function-clauses
-      full-stop
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end function-decl
-
-    (function-clauses
-     (function-clause
-      function-clauses-rest
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end function-clauses
-
-    (function-clauses-rest
-     (punctuation
-      "\\`[;]\\'"
-      function-clauses)
-     ( ;;EMPTY
-      )
-     ) ;; end function-clauses-rest
-
-    (function-clause
-     (atom
-      fun-clause
-      ,(semantic-lambda
-	(semantic-tag-new-function
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  "/"
-	  (number-to-string
-	   (length
-	    (car
-	     (nth 1 vals))))) nil
-	 (nth 1 vals)))
-      )
-     ) ;; end function-clause
-
-    (record-decl
-     (punctuation
-      "\\`[-]\\'"
-      RECORD
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(car
-	 (semantic-parse-region
-	  (car
-	   (nth 2 vals))
-	  (cdr
-	   (nth 2 vals))
-	  'record-def
-	  1)))
-      )
-     ) ;; end record-decl
-
-    (record-def
-     (open-paren
-      atom
-      punctuation
-      "\\`[,]\\'"
-      semantic-list
-      "^{"
-      close-paren
-      ,(semantic-lambda
-	(semantic-tag-new-type
-	 (nth 1 vals)
-	 "record"
-	 (semantic-parse-region
-	  (car
-	   (nth 3 vals))
-	  (cdr
-	   (nth 3 vals))
-	  'record-field-decl
-	  1) nil))
-      )
-     ) ;; end record-def
-
-    (record-decl-tuple
-     (open-paren
-      record-field-decls
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     (open-paren
-      close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end record-decl-tuple
-
-    (record-field-decl
-     (atom
-      record-field-value
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil
-	 ""))
-      )
-     (atom
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil
-	 ""))
-      )
-     (open-paren
-      "{"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      "}"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (punctuation
-      "\\`[,]\\'"
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end record-field-decl
-
-    (pattern
-     (pattern-expr
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (uni-pattern)
-     (binary)
-     (basic-type)
-     (semantic-list
-      "^\\["
-      ,(semantic-lambda
-	(semantic-tag
-	 "List"
-	 'list))
-      )
-     (semantic-list
-      "^{"
-      ,(semantic-lambda
-	(semantic-tag
-	 "Tuple"
-	 'list))
-      )
-     (record-pattern
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end pattern
-
-    (pattern-expr
-     (pattern-conc-expr
-      pattern-conc-expr-rest
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end pattern-expr
-
-    (pattern-conc-expr
-     (string-literal)
-     (var)
-     ) ;; end pattern-conc-expr
-
-    (pattern-conc-expr-rest
-     (list-conc-op
-      pattern-expr
-      ,(semantic-lambda)
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end pattern-conc-expr-rest
-
-    (tuple-pattern
-     (open-paren
-      patterns
-      close-paren)
-     (open-paren
-      close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end tuple-pattern
-
-    (list-pattern
-     (open-paren
-      patterns
-      list-pattern-tail
-      close-paren)
-     (open-paren
-      close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end list-pattern
-
-    (list-pattern-tail
-     (punctuation
-      "\\`[|]\\'"
-      pattern)
-     ( ;;EMPTY
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end list-pattern-tail
-
-    (patterns
-     (pattern
-      patterns-rest
-      ,(semantic-lambda
-	(list
-	 (cons
-	  (car
-	   (nth 0 vals))
-	  (car
-	   (nth 1 vals)))))
-      )
-     ) ;; end patterns
-
-    (patterns-rest
-     (punctuation
-      "\\`[,]\\'"
-      patterns
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end patterns-rest
-
-    (record-pattern
-     (punctuation
-      "\\`[#]\\'"
-      atom
-      semantic-list
-      "^{"
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 1 vals))))
-      )
-     ) ;; end record-pattern
-
-    (record-pattern-tuple
-     (open-paren
-      record-field-patterns
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     (open-paren
-      close-paren
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end record-pattern-tuple
-
-    (record-field-patterns
-     (record-field-patterns
-      punctuation
-      "\\`[,]\\'"
-      record-field-pattern)
-     (record-field-pattern)
-     ) ;; end record-field-patterns
-
-    (record-field-pattern
-     (atom
-      punctuation
-      "\\`[=]\\'"
-      pattern)
-     ) ;; end record-field-pattern
-
-    (body
-     (exprs)
-     ) ;; end body
-
-    (exprs
-     (expr
-      exprs-rest)
-     ) ;; end exprs
-
-    (exprs-rest
-     (punctuation
-      "\\`[,]\\'"
-      exprs)
-     ( ;;EMPTY
-      )
-     ) ;; end exprs-rest
-
-    (expr
-     (CATCH
-      expr)
-     (match-expr)
-     ) ;; end expr
-
-    (match-expr
-     (pattern
-      punctuation
-      "\\`[=]\\'"
-      match-expr)
-     (send-expr)
-     ) ;; end match-expr
-
-    (send-expr
-     (compare-expr
-      send-expr-rest)
-     ) ;; end send-expr
-
-    (send-expr-rest
-     (punctuation
-      "\\`[!]\\'"
-      send-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end send-expr-rest
-
-    (compare-expr
-     (list-conc-expr
-      compare-expr-rest)
-     ) ;; end compare-expr
-
-    (compare-expr-rest
-     (comp-op
-      list-conc-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end compare-expr-rest
-
-    (list-conc-expr
-     (add-expr
-      list-conc-expr-rest)
-     ) ;; end list-conc-expr
-
-    (list-conc-expr-rest
-     (list-conc-op
-      list-conc-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end list-conc-expr-rest
-
-    (add-expr
-     (multi-expr
-      add-expr-rest)
-     ) ;; end add-expr
-
-    (add-expr-rest
-     (add-op
-      add-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end add-expr-rest
-
-    (multi-expr
-     (prefix-expr
-      multi-expr-rest)
-     ) ;; end multi-expr
-
-    (multi-expr-rest
-     (multi-op
-      multi-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end multi-expr-rest
-
-    (prefix-expr
-     (prefix-op
-      record-expr)
-     (record-expr)
-     ) ;; end prefix-expr
-
-    (record-expr
-     (punctuation
-      "\\`[#]\\'"
-      record-expr-field)
-     (application-expr
-      record-expr-rest)
-     ) ;; end record-expr
-
-    (record-expr-rest
-     (punctuation
-      "\\`[#]\\'"
-      record-expr-field)
-     ( ;;EMPTY
-      )
-     ) ;; end record-expr-rest
-
-    (record-expr-field
-     (atom
-      punctuation
-      "\\`[.]\\'"
-      atom)
-     (atom
-      semantic-list
-      "^{")
-     (record-expr)
-     ) ;; end record-expr-field
-
-    (record-update-tuple
-     (open-paren
-      close-paren)
-     (open-paren
-      record-field-updates
-      close-paren)
-     ) ;; end record-update-tuple
-
-    (record-field-updates
-     (record-field-update
-      record-field-updates-rest)
-     ) ;; end record-field-updates
-
-    (record-field-updates-rest
-     (punctuation
-      "\\`[,]\\'"
-      record-field-updates)
-     ( ;;EMPTY
-      )
-     ) ;; end record-field-updates-rest
-
-    (record-field-update
-     (atom
-      record-field-value)
-     ) ;; end record-field-update
-
-    (record-field-value
-     (punctuation
-      "\\`[=]\\'"
-      expr)
-     ( ;;EMPTY
-      )
-     ) ;; end record-field-value
-
-    (application-expr
-     (module-name
-      punctuation
-      "\\`[:]\\'"
-      primary-expr
-      semantic-list
-      "^(")
-     (primary-expr
-      application-expr-rest)
-     ) ;; end application-expr
-
-    (application-expr-rest
-     (semantic-list
-      "^(")
-     (punctuation
-      "\\`[:]\\'"
-      primary-expr
-      semantic-list
-      "^(")
-     ( ;;EMPTY
-      )
-     ) ;; end application-expr-rest
-
-    (application-expr-list
-     (open-paren
-      close-paren)
-     (open-paren
-      exprs
-      close-paren)
-     ) ;; end application-expr-list
-
-    (primary-expr
-     (binary)
-     (string-literal)
-     (basic-type)
-     (semantic-list
-      "^{")
-     (semantic-list
-      "^\\[")
-     (semantic-list
-      "^\\[")
-     (block-expr)
-     (if-expr)
-     (case-expr)
-     (receive-expr)
-     (fun-expr)
-     (query-expr)
-     (paren-expr)
-     ) ;; end primary-expr
-
-    (string-literal
-     (string)
-     (macro-app)
-     (string
-      string-literal)
-     ) ;; end string-literal
-
-    (tuple-skel
-     (open-paren
-      close-paren)
-     (open-paren
-      exprs
-      close-paren)
-     ) ;; end tuple-skel
-
-    (list-skel
-     (open-paren
-      close-paren)
-     (open-paren
-      exprs
-      list-skel-tail
-      close-paren)
-     ) ;; end list-skel
-
-    (list-skel-tail
-     (punctuation
-      "\\`[|]\\'"
-      expr)
-     ( ;;EMPTY
-      )
-     ) ;; end list-skel-tail
-
-    (list-compr
-     (open-paren
-      expr
-      punctuation
-      "\\`[|]\\'"
-      punctuation
-      "\\`[|]\\'"
-      list-compr-exprs
-      close-paren)
-     ) ;; end list-compr
-
-    (list-compr-exprs
-     (list-compr-expr
-      list-compr-exprs-rest)
-     ) ;; end list-compr-exprs
-
-    (list-compr-exprs-rest
-     (punctuation
-      "\\`[,]\\'"
-      list-compr-exprs)
-     ( ;;EMPTY
-      )
-     ) ;; end list-compr-exprs-rest
-
-    (list-compr-expr
-     (generator)
-     (filter)
-     ) ;; end list-compr-expr
-
-    (generator
-     (pattern
-      punctuation
-      "\\`[<]\\'"
-      punctuation
-      "\\`[-]\\'"
-      expr)
-     ) ;; end generator
-
-    (filter
-     (expr)
-     ) ;; end filter
-
-    (block-expr
-     (BEGIN
-      body
-      END)
-     ) ;; end block-expr
-
-    (if-expr
-     (IF
-      if-clauses
-      END)
-     ) ;; end if-expr
-
-    (if-clauses
-     (if-clause
-      punctuation
-      "\\`[;]\\'"
-      if-clauses)
-     (if-clause)
-     ) ;; end if-clauses
-
-    (if-clause
-     (guard
-      clause-body)
-     (expr
-      clause-body)
-     ) ;; end if-clause
-
-    (clause-body
-     (punctuation
-      "\\`[-]\\'"
-      punctuation
-      "\\`[>]\\'"
-      body)
-     ) ;; end clause-body
-
-    (case-expr
-     (CASE
-      expr
-      OF
-      cr-clauses
-      END)
-     ) ;; end case-expr
-
-    (cr-clauses
-     (cr-clause
-      punctuation
-      "\\`[;]\\'"
-      cr-clauses)
-     (cr-clause)
-     ) ;; end cr-clauses
-
-    (cr-clause
-     (clause-pattern
-      clause-guard
-      clause-body)
-     ) ;; end cr-clause
-
-    (clause-guard
-     (WHEN
-      guard)
-     ( ;;EMPTY
-      )
-     ) ;; end clause-guard
-
-    (receive-expr
-     (RECEIVE
-      cr-clauses
-      receive-after
-      END)
-     (RECEIVE
-      receive-after
-      END)
-     (RECEIVE
-      cr-clauses
-      AFTER
-      expr
-      clause-body
-      END)
-     ) ;; end receive-expr
-
-    (receive-after
-     (AFTER
-      expr
-      clause-body)
-     ( ;;EMPTY
-      )
-     ) ;; end receive-after
-
-    (fun-expr
-     (FUN
-      function-arity)
-     (FUN
-      fun-clauses
-      END)
-     ) ;; end fun-expr
-
-    (fun-clauses
-     (fun-clause
-      fun-clauses-rest)
-     ) ;; end fun-clauses
-
-    (fun-clauses-rest
-     (punctuation
-      "\\`[;]\\'"
-      fun-clauses)
-     ( ;;EMPTY
-      )
-     ) ;; end fun-clauses-rest
-
-    (fun-clause
-     (semantic-list
-      "^("
-      clause-guard
-      clause-body
-      ,(semantic-lambda
-	(car
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 0 vals))
-	  (cdr
-	   (nth 0 vals))
-	  'clause-pattern-list)))
-      )
-     ) ;; end fun-clause
-
-    (clause-pattern-list
-     (open-paren
-      clause-patterns
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (nth 1 vals)))
-      )
-     ) ;; end clause-pattern-list
-
-    (clause-patterns
-     (clause-pattern
-      clause-patterns-rest
-      ,(semantic-lambda
-	(list
-	 (cons
-	  (car
-	   (nth 0 vals))
-	  (car
-	   (nth 1 vals)))))
-      )
-     ) ;; end clause-patterns
-
-    (clause-patterns-rest
-     (punctuation
-      "\\`[,]\\'"
-      clause-patterns
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end clause-patterns-rest
-
-    (clause-pattern
-     (match-pattern)
-     (pattern)
-     ) ;; end clause-pattern
-
-    (match-pattern
-     (var
-      punctuation
-      "\\`[=]\\'"
-      pattern
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (pattern
-      punctuation
-      "\\`[=]\\'"
-      var
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end match-pattern
-
-    (query-expr
-     (QUERY
-      semantic-list
-      "^\\["
-      END)
-     ) ;; end query-expr
-
-    (paren-expr
-     (semantic-list
-      "^(")
-     ) ;; end paren-expr
-
-    (paren-expr-list
-     (open-paren
-      expr
-      close-paren)
-     ) ;; end paren-expr-list
-
-    (guard
-     (guard-test
-      guard-rest)
-     ) ;; end guard
-
-    (guard-rest
-     (punctuation
-      "\\`[,]\\'"
-      guard)
-     (punctuation
-      "\\`[;]\\'"
-      guard)
-     ( ;;EMPTY
-      )
-     ) ;; end guard-rest
-
-    (guard-test
-     (TRUE)
-     (guard-record-test)
-     (guard-term-cmp)
-     (guard-recognizer)
-     (semantic-list
-      "^(")
-     ) ;; end guard-test
-
-    (guard-record-test
-     (RECORD
-      semantic-list
-      "^(")
-     (open-paren
-      guard-expr
-      punctuation
-      "\\`[,]\\'"
-      symbol
-      close-paren)
-     ) ;; end guard-record-test
-
-    (guard-recognizer
-     (symbol
-      semantic-list
-      "^(")
-     ) ;; end guard-recognizer
-
-    (guard-term-cmp
-     (guard-expr
-      guard-term-op
-      guard-expr)
-     ) ;; end guard-term-cmp
-
-    (guard-term-op
-     (comp-op)
-     (punctuation
-      "\\`[=]\\'")
-     ) ;; end guard-term-op
-
-    (paren-guard-test
-     (open-paren
-      guard-test
-      close-paren)
-     ) ;; end paren-guard-test
-
-    (guard-expr
-     (guard-add-expr)
-     ) ;; end guard-expr
-
-    (guard-add-expr
-     (guard-multi-expr
-      guard-add-expr-rest)
-     ) ;; end guard-add-expr
-
-    (guard-add-expr-rest
-     (add-op
-      guard-add-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end guard-add-expr-rest
-
-    (guard-multi-expr
-     (guard-prefix-expr
-      guard-multi-expr-rest)
-     ) ;; end guard-multi-expr
-
-    (guard-multi-expr-rest
-     (multi-op
-      guard-multi-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end guard-multi-expr-rest
-
-    (guard-prefix-expr
-     (prefix-op
-      guard-application-expr)
-     (guard-application-expr)
-     ) ;; end guard-prefix-expr
-
-    (guard-application-expr
-     (atom
-      semantic-list
-      "^(")
-     (guard-record-expr)
-     (guard-primary-expr)
-     ) ;; end guard-application-expr
-
-    (guard-exprs-list
-     (open-paren
-      close-paren)
-     (open-paren
-      guard-exprs
-      close-paren)
-     ) ;; end guard-exprs-list
-
-    (guard-exprs
-     (guard-expr
-      guard-exprs-rest)
-     ) ;; end guard-exprs
-
-    (guard-exprs-rest
-     (punctuation
-      "\\`[,]\\'"
-      guard-exprs)
-     (punctuation
-      "\\`[;]\\'"
-      guard-exprs)
-     ( ;;EMPTY
-      )
-     ) ;; end guard-exprs-rest
-
-    (guard-record-expr
-     (punctuation
-      "\\`[#]\\'"
-      atom
-      punctuation
-      "\\`[.]\\'"
-      atom)
-     (guard-primary-expr
-      punctuation
-      "\\`[#]\\'"
-      atom
-      punctuation
-      "\\`[.]\\'"
-      atom)
-     ) ;; end guard-record-expr
-
-    (guard-primary-expr
-     (basic-type)
-     (macro-app)
-     (semantic-list
-      "^{")
-     (semantic-list
-      "^\\[")
-     (semantic-list
-      "^(")
-     ) ;; end guard-primary-expr
-
-    (guard-tuple-skel
-     (open-paren
-      close-paren)
-     (open-paren
-      guard-exprs
-      close-paren)
-     ) ;; end guard-tuple-skel
-
-    (guard-list-skel
-     (open-paren
-      close-paren)
-     (open-paren
-      guard-exprs
-      guard-list-skel-tail
-      close-paren)
-     ) ;; end guard-list-skel
-
-    (guard-list-skel-tail
-     (punctuation
-      "\\`[|]\\'"
-      guard-expr)
-     ( ;;EMPTY
-      )
-     ) ;; end guard-list-skel-tail
-
-    (guard-paren-expr
-     (open-paren
-      guard-expr
-      close-paren)
-     ) ;; end guard-paren-expr
-
-    (directive
-     (macro-def)
-     (macro-undef)
-     (include-dir)
-     (include-lib-dir)
-     (ifdef-dir)
-     (ifndef-dir)
-     (else-dir)
-     (endif-dir)
-     ) ;; end directive
-
-    (macro-def
-     (punctuation
-      "\\`[-]\\'"
-      DEFINE
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(semantic-bovinate-from-nonterminal
-	 (car
-	  (nth 2 vals))
-	 (cdr
-	  (nth 2 vals))
-	 'macro-def-list))
-      )
-     ) ;; end macro-def
-
-    (macro-def-list
-     (open-paren
-      symbol
-      macro-def-opt
-      punctuation
-      "\\`[,]\\'"
-      macro-def-opt
-      close-paren
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 1 vals) nil
-	 (nth 4 vals) :constant-flag t))
-      )
-     ) ;; end macro-def-list
-
-    (macro-def-opt
-     (semantic-list)
-     (expr)
-     ( ;;EMPTY
-      )
-     ) ;; end macro-def-opt
-
-    (macro-undef
-     (punctuation
-      "\\`[-]\\'"
-      UNDEF
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end macro-undef
-
-    (macro-app
-     (punctuation
-      "\\`[?]\\'"
-      symbol
-      semantic-list
-      "^(")
-     (punctuation
-      "\\`[?]\\'"
-      symbol)
-     ) ;; end macro-app
-
-    (include-dir
-     (punctuation
-      "\\`[-]\\'"
-      INCLUDE
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (car
-	  (semantic-bovinate-from-nonterminal
-	   (car
-	    (nth 2 vals))
-	   (cdr
-	    (nth 2 vals))
-	   'include-file-name)) nil))
-      )
-     ) ;; end include-dir
-
-    (include-lib-dir
-     (punctuation
-      "\\`[-]\\'"
-      INCLUDE_LIB
-      semantic-list
-      "^("
-      full-stop
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (car
-	  (semantic-bovinate-from-nonterminal
-	   (car
-	    (nth 2 vals))
-	   (cdr
-	    (nth 2 vals))
-	   'include-file-name)) nil))
-      )
-     ) ;; end include-lib-dir
-
-    (include-file-name
-     (open-paren
-      string
-      close-paren
-      ,(semantic-lambda
-	(list
-	 (read
-	  (nth 1 vals))))
-      )
-     ) ;; end include-file-name
-
-    (ifdef-dir
-     (punctuation
-      "\\`[-]\\'"
-      IFDEF
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end ifdef-dir
-
-    (ifndef-dir
-     (punctuation
-      "\\`[-]\\'"
-      IFNDEF
-      semantic-list
-      "^("
-      full-stop)
-     ) ;; end ifndef-dir
-
-    (else-dir
-     (punctuation
-      "\\`[-]\\'"
-      ELSE
-      full-stop)
-     ) ;; end else-dir
-
-    (endif-dir
-     (punctuation
-      "\\`[-]\\'"
-      ENDIF
-      full-stop)
-     ) ;; end endif-dir
-
-    (full-stop
-     (punctuation
-      "\\`[.]\\'")
-     ) ;; end full-stop
-    )
-  "Parser table.")
-
-(defun semantic-erlang-by--install-parser ()
-  "Setup the Semantic Parser."
-  (setq semantic--parse-table semantic-erlang-by--parse-table
-	semantic-debug-parser-source "erlang.by"
-	semantic-debug-parser-class 'semantic-bovine-debug-parser
-	semantic-flex-keywords-obarray semantic-erlang-by--keyword-table
-	))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'semantic-erlang-by)
-
-;;; semantic-erlang-by.el ends here
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-erlang.elc b/elisp/cedet-1.1/semantic/bovine/semantic-erlang.elc
index 27c9f92..4aead54 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-erlang.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-erlang.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-f90-by.el~ b/elisp/cedet-1.1/semantic/bovine/semantic-f90-by.el~
deleted file mode 100644
index c8e8d18..0000000
--- a/elisp/cedet-1.1/semantic/bovine/semantic-f90-by.el~
+++ /dev/null
@@ -1,573 +0,0 @@
-;;; semantic-f90-by.el --- Generated parser support file
-
-;; Copyright (C) 2010 Free Software Foundation
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-10-18 22:49:05-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file f90.by.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst semantic-f90-by--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("end" . END)
-     ("subroutine" . SUBROUTINE)
-     ("function" . FUNCTION)
-     ("module" . MODULE)
-     ("use" . USE)
-     ("contains" . CONTAINS)
-     ("interface" . INTERFACE)
-     ("integer" . INT)
-     ("real" . REAL)
-     ("char" . CHAR)
-     ("logical" . LOGICAL)
-     ("complex" . COMPLEX)
-     ("parameter" . PARAMETER)
-     ("allocatable" . ALLOCATABLE)
-     ("dimension" . DIMENSION)
-     ("external" . EXTERNAL)
-     ("intent" . INTENT)
-     ("intrinsic" . INTRINSIC)
-     ("optional" . OPTIONAL)
-     ("pointer" . POINTER)
-     ("save" . SAVE)
-     ("target" . TARGET)
-     ("implicit" . IMPLICIT)
-     ("end" . END)
-     ("call" . CALL)
-     ("type" . TYPE)
-     ("only" . ONLY))
-   'nil)
-  "Table of language keywords.")
-
-(defconst semantic-f90-by--token-table
-  (semantic-lex-make-type-table
-   '(("close-paren"
-      (RPAREN . ")"))
-     ("open-paren"
-      (LPAREN . "("))
-     ("punctuation"
-      (OR . "\\`[|]\\'")
-      (HAT . "\\`\\^\\'")
-      (PERCENT . "\\`[%]\\'")
-      (TILDE . "\\`[~]\\'")
-      (COMMA . "\\`[,]\\'")
-      (GREATER . "\\`[>]\\'")
-      (LESS . "\\`[<]\\'")
-      (EQUAL . "\\`[=]\\'")
-      (BANG . "\\`[!]\\'")
-      (MINUS . "\\`[-]\\'")
-      (PLUS . "\\`[+]\\'")
-      (DIVIDE . "\\`[/]\\'")
-      (AMPERSAND . "\\`[&]\\'")
-      (STAR . "\\`[*]\\'")
-      (SEMICOLON . "\\`[;]\\'")
-      (COLON . "\\`[:]\\'")
-      (PERIOD . "\\`[.]\\'")
-      (HASH . "\\`[#]\\'")
-      (OPERATORS . "[-+*/%^|&]")
-      (PERIOD . "\\`[.]\\'")))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst semantic-f90-by--parse-table
-  `(
-    (bovine-toplevel 
-     (starting_rule)
-     ) ;; end bovine-toplevel
-
-    (bovine-inner-scope 
-     (spec-one-part)
-     ) ;; end bovine-inner-scope
-
-    (starting_rule
-     (punit)
-     ) ;; end starting_rule
-
-    (punit
-     (PROGRAM
-      symbol
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'program))
-      )
-     (SUBROUTINE
-      symbol
-      semantic-list
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'subroutine :arguments
-	 (semantic-parse-region
-	  (car
-	   (nth 2 vals))
-	  (cdr
-	   (nth 2 vals))
-	  'funarg
-	  1)))
-      )
-     (one-or-no-type
-      FUNCTION
-      symbol
-      semantic-list
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 2 vals)
-	 'function :arguments
-	 (semantic-parse-region
-	  (car
-	   (nth 3 vals))
-	  (cdr
-	   (nth 3 vals))
-	  'funarg
-	  1) :type
-	 (car
-	  (nth 0 vals))))
-      )
-     (MODULE
-      symbol
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'module))
-      )
-     ) ;; end punit
-
-    (local-vars
-     (builtin-type
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      var-decl
-      newline
-      spec-part)
-     (builtin-type
-      punctuation
-      "\\`[,]\\'"
-      attributes
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      var-decl
-      newline
-      spec-part)
-     ) ;; end local-vars
-
-    (spec-part
-     (newline
-      ,(semantic-lambda)
-      )
-     (spec-one-part
-      newline
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end spec-part
-
-    (spec-one-part
-     (IMPLICIT
-      symbol
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'implicit))
-      )
-     (USE
-      symbol
-      opt-only
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'use))
-      )
-     (TYPE
-      symbol
-      semantic-list
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 1 vals)
-	 'type :kind
-	 'derived-type))
-      )
-     (END
-      TYPE
-      symbol
-      ,(semantic-lambda
-	(list nil))
-      )
-     (END
-      TYPE
-      ,(semantic-lambda
-	(list nil))
-      )
-     (one-type
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      var-decl
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 3 vals)
-	 (car
-	  (nth 0 vals)) nil))
-      )
-     (one-type
-      punctuation
-      "\\`[,]\\'"
-      attribute-list
-      punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      var-decl
-      ,(semantic-lambda
-	(apply
-	 'semantic-tag-new-variable
-	 (nth 5 vals)
-	 (car
-	  (nth 0 vals)) nil
-	 (nth 2 vals)))
-      )
-     (one-type
-      var-decl
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 1 vals)
-	 (car
-	  (nth 0 vals)) nil))
-      )
-     ) ;; end spec-one-part
-
-    (one-or-no-type
-     (one-type)
-     ( ;;EMPTY
-      )
-     ) ;; end one-or-no-type
-
-    (one-type
-     (single-type
-      semantic-list
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     (single-type)
-     ) ;; end one-type
-
-    (single-type
-     (derived-type)
-     (builtin-type)
-     (symbol)
-     ) ;; end single-type
-
-    (opt-only
-     (punctuation
-      "\\`[,]\\'"
-      ONLY
-      punctuation
-      "\\`[:]\\'"
-      symbol
-      punctuation
-      punctuation
-      symbol
-      ,(semantic-lambda)
-      )
-     (punctuation
-      "\\`[,]\\'"
-      ONLY
-      punctuation
-      "\\`[:]\\'"
-      symbol
-      ,(semantic-lambda)
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end opt-only
-
-    (var-decl
-     (single-variable
-      punctuation
-      "\\`[=]\\'"
-      symbol-or-number
-      punctuation
-      "\\`[,]\\'"
-      var-decl
-      ,(semantic-lambda
-	(append
-	 (nth 0 vals)
-	 (nth 4 vals)))
-      )
-     (single-variable
-      punctuation
-      "\\`[,]\\'"
-      var-decl
-      ,(semantic-lambda
-	(append
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (single-variable
-      punctuation
-      "\\`[=]\\'"
-      symbol)
-     (single-variable)
-     ) ;; end var-decl
-
-    (single-variable
-     (symbol
-      semantic-list
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals)))
-      )
-     (symbol)
-     ) ;; end single-variable
-
-    (builtin-type
-     (INT
-      ,(semantic-lambda
-	(list
-	 "integer"))
-      )
-     (REAL
-      ,(semantic-lambda
-	(list
-	 "real"))
-      )
-     (DPREC
-      ,(semantic-lambda
-	(list
-	 "double precision"))
-      )
-     (CHAR
-      ,(semantic-lambda
-	(list
-	 "character"))
-      )
-     (COMPLEX
-      ,(semantic-lambda
-	(list
-	 "complex"))
-      )
-     (LOGICAL
-      ,(semantic-lambda
-	(list
-	 "logical"))
-      )
-     ) ;; end builtin-type
-
-    (derived-type
-     (TYPE
-      semantic-list
-      ,(semantic-lambda
-	(semantic-parse-region
-	 (car
-	  (nth 1 vals))
-	 (cdr
-	  (nth 1 vals))
-	 'dtype
-	 1))
-      )
-     ) ;; end derived-type
-
-    (dtype
-     (open-paren
-      "("
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      ")"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (symbol
-      ,(semantic-lambda
-	(semantic-tag
-	 (nth 0 vals)
-	 'type))
-      )
-     ) ;; end dtype
-
-    (other-type
-     (symbol)
-     ( ;;EMPTY
-      )
-     ) ;; end other-type
-
-    (attribute-list
-     (single-attribute
-      punctuation
-      "\\`[,]\\'"
-      attribute-list
-      ,(semantic-lambda
-	(append
-	 (nth 0 vals)
-	 (nth 2 vals)))
-      )
-     (single-attribute)
-     ) ;; end attribute-list
-
-    (single-attribute
-     (attribute
-      semantic-list
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))
-	 (downcase
-	  (buffer-substring-no-properties
-	   (1+
-	    (car
-	     (nth 1 vals)))
-	   (1-
-	    (cdr
-	     (nth 1 vals)))))))
-      )
-     (attribute
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))
-	 't))
-      )
-     ) ;; end single-attribute
-
-    (attribute
-     (PARAMETER
-      ,(semantic-lambda
-	(list
-	 ':parameter))
-      )
-     (ALLOCATABLE
-      ,(semantic-lambda
-	(list
-	 ':allocatable))
-      )
-     (DIMENSION
-      ,(semantic-lambda
-	(list
-	 ':dimension))
-      )
-     (EXTERNAL
-      ,(semantic-lambda
-	(list
-	 ':external))
-      )
-     (INTENT
-      ,(semantic-lambda
-	(list
-	 ':intent))
-      )
-     (INTRINSIC
-      ,(semantic-lambda
-	(list
-	 ':intrinsic))
-      )
-     (OPTIONAL
-      ,(semantic-lambda
-	(list
-	 ':optional))
-      )
-     (POINTER
-      ,(semantic-lambda
-	(list
-	 ':pointer))
-      )
-     (SAVE
-      ,(semantic-lambda
-	(list
-	 ':save))
-      )
-     (TARGET
-      ,(semantic-lambda
-	(list
-	 ':target))
-      )
-     ) ;; end attribute
-
-    (funarg
-     (open-paren
-      "("
-      ,(semantic-lambda
-	(list nil))
-      )
-     (punctuation
-      "\\`[,]\\'"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (close-paren
-      ")"
-      ,(semantic-lambda
-	(list nil))
-      )
-     (symbol
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil nil))
-      )
-     ) ;; end funarg
-
-    (symbol-or-number
-     (symbol)
-     (number)
-     ) ;; end symbol-or-number
-    )
-  "Parser table.")
-
-(defun semantic-f90-by--install-parser ()
-  "Setup the Semantic Parser."
-  (setq semantic--parse-table semantic-f90-by--parse-table
-	semantic-debug-parser-source "f90.by"
-	semantic-debug-parser-class 'semantic-bovine-debug-parser
-	semantic-flex-keywords-obarray semantic-f90-by--keyword-table
-	))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'semantic-f90-by)
-
-;;; semantic-f90-by.el ends here
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-f90.elc b/elisp/cedet-1.1/semantic/bovine/semantic-f90.elc
index 28abdfd..157479d 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-f90.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-f90.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-gcc.elc b/elisp/cedet-1.1/semantic/bovine/semantic-gcc.elc
index bd263da..7430347 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-gcc.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-gcc.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-java.elc b/elisp/cedet-1.1/semantic/bovine/semantic-java.elc
index c17c5ea..bf100a3 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-java.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-java.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-make-by.el~ b/elisp/cedet-1.1/semantic/bovine/semantic-make-by.el~
deleted file mode 100644
index 2e36bce..0000000
--- a/elisp/cedet-1.1/semantic/bovine/semantic-make-by.el~
+++ /dev/null
@@ -1,398 +0,0 @@
-;;; semantic-make-by.el --- Generated parser support file
-
-;; Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2008 Eric M. Ludlam
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:37-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file make.by.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst semantic-make-by--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("if" . IF)
-     ("ifdef" . IFDEF)
-     ("ifndef" . IFNDEF)
-     ("ifeq" . IFEQ)
-     ("ifneq" . IFNEQ)
-     ("else" . ELSE)
-     ("endif" . ENDIF)
-     ("include" . INCLUDE))
-   '(("include" summary "Macro: include filename1 filename2 ...")
-     ("ifneq" summary "Conditional: ifneq (expression) ... else ... endif")
-     ("ifeq" summary "Conditional: ifeq (expression) ... else ... endif")
-     ("ifndef" summary "Conditional: ifndef (expression) ... else ... endif")
-     ("ifdef" summary "Conditional: ifdef (expression) ... else ... endif")
-     ("endif" summary "Conditional: if (expression) ... else ... endif")
-     ("else" summary "Conditional: if (expression) ... else ... endif")
-     ("if" summary "Conditional: if (expression) ... else ... endif")))
-  "Table of language keywords.")
-
-(defconst semantic-make-by--token-table
-  (semantic-lex-make-type-table
-   '(("punctuation"
-      (BACKSLASH . "\\`[\\]\\'")
-      (DOLLAR . "\\`[$]\\'")
-      (EQUAL . "\\`[=]\\'")
-      (PLUS . "\\`[+]\\'")
-      (COLON . "\\`[:]\\'")))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst semantic-make-by--parse-table
-  `(
-    (bovine-toplevel 
-     (Makefile)
-     ) ;; end bovine-toplevel
-
-    (Makefile
-     (bol
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (bol
-      variable
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (bol
-      rule
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (bol
-      conditional
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (bol
-      include
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (whitespace
-      ,(semantic-lambda
-	(list nil))
-      )
-     (newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end Makefile
-
-    (variable
-     (symbol
-      opt-whitespace
-      equals
-      opt-whitespace
-      element-list
-      ,(semantic-lambda
-	(semantic-tag-new-variable
-	 (nth 0 vals) nil
-	 (nth 4 vals)))
-      )
-     ) ;; end variable
-
-    (rule
-     (targets
-      opt-whitespace
-      colons
-      opt-whitespace
-      element-list
-      commands
-      ,(semantic-lambda
-	(semantic-tag-new-function
-	 (nth 0 vals) nil
-	 (nth 4 vals)))
-      )
-     ) ;; end rule
-
-    (targets
-     (target
-      opt-whitespace
-      targets
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))
-	 (car
-	  (nth 2 vals))))
-      )
-     (target
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))))
-      )
-     ) ;; end targets
-
-    (target
-     (sub-target
-      target
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  (car
-	   (nth 2 vals)))))
-      )
-     (sub-target
-      ,(semantic-lambda
-	(list
-	 (car
-	  (nth 0 vals))))
-      )
-     ) ;; end target
-
-    (sub-target
-     (symbol)
-     (string)
-     (varref)
-     ) ;; end sub-target
-
-    (conditional
-     (IF
-      some-whitespace
-      symbol
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (IFDEF
-      some-whitespace
-      symbol
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (IFNDEF
-      some-whitespace
-      symbol
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (IFEQ
-      some-whitespace
-      expression
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (IFNEQ
-      some-whitespace
-      expression
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (ELSE
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     (ENDIF
-      newline
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end conditional
-
-    (expression
-     (semantic-list)
-     ) ;; end expression
-
-    (include
-     (INCLUDE
-      some-whitespace
-      element-list
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (nth 2 vals) nil))
-      )
-     ) ;; end include
-
-    (equals
-     (punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda)
-      )
-     (punctuation
-      "\\`[+]\\'"
-      punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda)
-      )
-     (punctuation
-      "\\`[=]\\'"
-      ,(semantic-lambda)
-      )
-     ) ;; end equals
-
-    (colons
-     (punctuation
-      "\\`[:]\\'"
-      punctuation
-      "\\`[:]\\'"
-      ,(semantic-lambda)
-      )
-     (punctuation
-      "\\`[:]\\'"
-      ,(semantic-lambda)
-      )
-     ) ;; end colons
-
-    (element-list
-     (elements
-      newline
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ) ;; end element-list
-
-    (elements
-     (element
-      some-whitespace
-      elements
-      ,(semantic-lambda
-	(nth 0 vals)
-	(nth 2 vals))
-      )
-     (element
-      ,(semantic-lambda
-	(nth 0 vals))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end elements
-
-    (element
-     (sub-element
-      element
-      ,(semantic-lambda
-	(list
-	 (concat
-	  (car
-	   (nth 0 vals))
-	  (car
-	   (nth 1 vals)))))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end element
-
-    (sub-element
-     (symbol)
-     (string)
-     (punctuation)
-     (semantic-list
-      ,(semantic-lambda
-	(list
-	 (buffer-substring-no-properties
-	  (identity start)
-	  (identity end))))
-      )
-     ) ;; end sub-element
-
-    (varref
-     (punctuation
-      "\\`[$]\\'"
-      semantic-list
-      ,(semantic-lambda
-	(list
-	 (buffer-substring-no-properties
-	  (identity start)
-	  (identity end))))
-      )
-     ) ;; end varref
-
-    (commands
-     (bol
-      shell-command
-      newline
-      commands
-      ,(semantic-lambda
-	(list
-	 (nth 0 vals))
-	(nth 1 vals))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end commands
-
-    (opt-whitespace
-     (some-whitespace
-      ,(semantic-lambda
-	(list nil))
-      )
-     ( ;;EMPTY
-      )
-     ) ;; end opt-whitespace
-
-    (some-whitespace
-     (whitespace
-      some-whitespace
-      ,(semantic-lambda
-	(list nil))
-      )
-     (whitespace
-      ,(semantic-lambda
-	(list nil))
-      )
-     ) ;; end some-whitespace
-    )
-  "Parser table.")
-
-(defun semantic-make-by--install-parser ()
-  "Setup the Semantic Parser."
-  (setq semantic--parse-table semantic-make-by--parse-table
-	semantic-debug-parser-source "make.by"
-	semantic-debug-parser-class 'semantic-bovine-debug-parser
-	semantic-flex-keywords-obarray semantic-make-by--keyword-table
-	))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'semantic-make-by)
-
-;;; semantic-make-by.el ends here
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-make.elc b/elisp/cedet-1.1/semantic/bovine/semantic-make.elc
index ae5cfdc..48af9e4 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-make.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-make.elc differ
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-scm-by.el~ b/elisp/cedet-1.1/semantic/bovine/semantic-scm-by.el~
deleted file mode 100644
index b782283..0000000
--- a/elisp/cedet-1.1/semantic/bovine/semantic-scm-by.el~
+++ /dev/null
@@ -1,203 +0,0 @@
-;;; semantic-scm-by.el --- Generated parser support file
-
-;; Copyright (C) 2001, 2003, 2009 Eric M. Ludlam
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:37-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file scheme.by.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst semantic-scm-by--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("define" . DEFINE)
-     ("define-module" . DEFINE-MODULE)
-     ("load" . LOAD))
-   '(("load" summary "Function: (load \"filename\")")
-     ("define-module" summary "Function: (define-module (name arg1 ...)) ")
-     ("define" summary "Function: (define symbol expression)")))
-  "Table of language keywords.")
-
-(defconst semantic-scm-by--token-table
-  (semantic-lex-make-type-table
-   '(("close-paren"
-      (CLOSEPAREN . ")"))
-     ("open-paren"
-      (OPENPAREN . "(")))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst semantic-scm-by--parse-table
-  `(
-    (bovine-toplevel 
-     (scheme)
-     ) ;; end bovine-toplevel
-
-    (scheme
-     (semantic-list
-      ,(lambda (vals start end)
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 0 vals))
-	  (cdr
-	   (nth 0 vals))
-	  'scheme-list))
-      )
-     ) ;; end scheme
-
-    (scheme-list
-     (open-paren
-      "("
-      scheme-in-list
-      close-paren
-      ")"
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     ) ;; end scheme-list
-
-    (scheme-in-list
-     (DEFINE
-       symbol
-       expression
-       ,(semantic-lambda
-	 (semantic-tag-new-variable
-	  (nth 1 vals) nil
-	  (nth 2 vals)))
-       )
-     (DEFINE
-       name-args
-       opt-doc
-       sequence
-       ,(semantic-lambda
-	 (semantic-tag-new-function
-	  (car
-	   (nth 1 vals)) nil
-	  (cdr
-	   (nth 1 vals))))
-       )
-     (DEFINE-MODULE
-       name-args
-       ,(semantic-lambda
-	 (semantic-tag-new-package
-	  (nth
-	   (length
-	    (nth 1 vals))
-	   (nth 1 vals)) nil))
-       )
-     (LOAD
-      string
-      ,(semantic-lambda
-	(semantic-tag-new-include
-	 (file-name-nondirectory
-	  (read
-	   (nth 1 vals)))
-	 (read
-	  (nth 1 vals))))
-      )
-     (symbol
-      ,(semantic-lambda
-	(semantic-tag-new-code
-	 (nth 0 vals) nil))
-      )
-     ) ;; end scheme-in-list
-
-    (name-args
-     (semantic-list
-      ,(lambda (vals start end)
-	 (semantic-bovinate-from-nonterminal
-	  (car
-	   (nth 0 vals))
-	  (cdr
-	   (nth 0 vals))
-	  'name-arg-expand))
-      )
-     ) ;; end name-args
-
-    (name-arg-expand
-     (open-paren
-      name-arg-expand
-      ,(semantic-lambda
-	(nth 1 vals))
-      )
-     (symbol
-      name-arg-expand
-      ,(semantic-lambda
-	(cons
-	 (nth 0 vals)
-	 (nth 1 vals)))
-      )
-     ( ;;EMPTY
-      ,(semantic-lambda)
-      )
-     ) ;; end name-arg-expand
-
-    (opt-doc
-     (string)
-     ( ;;EMPTY
-      )
-     ) ;; end opt-doc
-
-    (sequence
-     (expression
-      sequence)
-     (expression)
-     ) ;; end sequence
-
-    (expression
-     (symbol)
-     (semantic-list)
-     (string)
-     (number)
-     ) ;; end expression
-    )
-  "Parser table.")
-
-(defun semantic-scm-by--install-parser ()
-  "Setup the Semantic Parser."
-  (setq semantic--parse-table semantic-scm-by--parse-table
-	semantic-debug-parser-source "scheme.by"
-	semantic-debug-parser-class 'semantic-bovine-debug-parser
-	semantic-flex-keywords-obarray semantic-scm-by--keyword-table
-	))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-(provide 'semantic-scm-by)
-
-;;; semantic-scm-by.el ends here
diff --git a/elisp/cedet-1.1/semantic/bovine/semantic-scm.elc b/elisp/cedet-1.1/semantic/bovine/semantic-scm.elc
index 589355c..73951af 100644
Binary files a/elisp/cedet-1.1/semantic/bovine/semantic-scm.elc and b/elisp/cedet-1.1/semantic/bovine/semantic-scm.elc differ
diff --git a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang.elc b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang.elc
index 6c0ae2e..56d8a97 100644
Binary files a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang.elc and b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang.elc differ
diff --git a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang2.elc b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang2.elc
index 1a57990..a7e6b61 100644
Binary files a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang2.elc and b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-lang2.elc differ
diff --git a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-parse.elc b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-parse.elc
index 8a83d74..0c4d050 100644
Binary files a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-parse.elc and b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-parse.elc differ
diff --git a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-util.elc b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-util.elc
index 0523887..3cc35a2 100644
Binary files a/elisp/cedet-1.1/semantic/ctags/semantic-ectag-util.elc and b/elisp/cedet-1.1/semantic/ctags/semantic-ectag-util.elc differ
diff --git a/elisp/cedet-1.1/semantic/ctags/semanticdb-ectag.elc b/elisp/cedet-1.1/semantic/ctags/semanticdb-ectag.elc
index 8242be6..e403686 100644
Binary files a/elisp/cedet-1.1/semantic/ctags/semanticdb-ectag.elc and b/elisp/cedet-1.1/semantic/ctags/semanticdb-ectag.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-adebug.elc b/elisp/cedet-1.1/semantic/semantic-adebug.elc
index fe0a8fc..781bd5b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-adebug.elc and b/elisp/cedet-1.1/semantic/semantic-adebug.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-analyze-complete.elc b/elisp/cedet-1.1/semantic/semantic-analyze-complete.elc
index c2639c1..aaa0039 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-analyze-complete.elc and b/elisp/cedet-1.1/semantic/semantic-analyze-complete.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-analyze-debug.elc b/elisp/cedet-1.1/semantic/semantic-analyze-debug.elc
index 0f9471d..9f2d00b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-analyze-debug.elc and b/elisp/cedet-1.1/semantic/semantic-analyze-debug.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-analyze-fcn.elc b/elisp/cedet-1.1/semantic/semantic-analyze-fcn.elc
index f383edb..adcc92a 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-analyze-fcn.elc and b/elisp/cedet-1.1/semantic/semantic-analyze-fcn.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-analyze-refs.elc b/elisp/cedet-1.1/semantic/semantic-analyze-refs.elc
index 929cf9f..1f470ae 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-analyze-refs.elc and b/elisp/cedet-1.1/semantic/semantic-analyze-refs.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-analyze.elc b/elisp/cedet-1.1/semantic/semantic-analyze.elc
index a6b6268..8a79f7f 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-analyze.elc and b/elisp/cedet-1.1/semantic/semantic-analyze.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-ast.elc b/elisp/cedet-1.1/semantic/semantic-ast.elc
index 5d20ad1..ee92429 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-ast.elc and b/elisp/cedet-1.1/semantic/semantic-ast.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-chart.elc b/elisp/cedet-1.1/semantic/semantic-chart.elc
index 1c5b5e2..932e148 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-chart.elc and b/elisp/cedet-1.1/semantic/semantic-chart.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-complete.elc b/elisp/cedet-1.1/semantic/semantic-complete.elc
index c4f9447..6978be9 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-complete.elc and b/elisp/cedet-1.1/semantic/semantic-complete.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-ctxt.elc b/elisp/cedet-1.1/semantic/semantic-ctxt.elc
index 7f4a9ef..a53288a 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-ctxt.elc and b/elisp/cedet-1.1/semantic/semantic-ctxt.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-custom.elc b/elisp/cedet-1.1/semantic/semantic-custom.elc
index 06568d0..df8c9dd 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-custom.elc and b/elisp/cedet-1.1/semantic/semantic-custom.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-debug.elc b/elisp/cedet-1.1/semantic/semantic-debug.elc
index 6691281..1b6e4fd 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-debug.elc and b/elisp/cedet-1.1/semantic/semantic-debug.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-decorate-include.elc b/elisp/cedet-1.1/semantic/semantic-decorate-include.elc
index 4ad2a34..190ff5b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-decorate-include.elc and b/elisp/cedet-1.1/semantic/semantic-decorate-include.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-decorate-mode.elc b/elisp/cedet-1.1/semantic/semantic-decorate-mode.elc
index c2c7764..324ec5b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-decorate-mode.elc and b/elisp/cedet-1.1/semantic/semantic-decorate-mode.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-decorate.elc b/elisp/cedet-1.1/semantic/semantic-decorate.elc
index c7d460e..ce36c88 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-decorate.elc and b/elisp/cedet-1.1/semantic/semantic-decorate.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-dep.elc b/elisp/cedet-1.1/semantic/semantic-dep.elc
index 4996979..d158011 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-dep.elc and b/elisp/cedet-1.1/semantic/semantic-dep.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-doc.elc b/elisp/cedet-1.1/semantic/semantic-doc.elc
index f602e8b..aaf0687 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-doc.elc and b/elisp/cedet-1.1/semantic/semantic-doc.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-edit.elc b/elisp/cedet-1.1/semantic/semantic-edit.elc
index 5d4396a..d38084a 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-edit.elc and b/elisp/cedet-1.1/semantic/semantic-edit.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-elp.elc b/elisp/cedet-1.1/semantic/semantic-elp.elc
index 707cf37..51464fe 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-elp.elc and b/elisp/cedet-1.1/semantic/semantic-elp.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-find.elc b/elisp/cedet-1.1/semantic/semantic-find.elc
index 8750fd7..f004128 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-find.elc and b/elisp/cedet-1.1/semantic/semantic-find.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-fmt-utest.elc b/elisp/cedet-1.1/semantic/semantic-fmt-utest.elc
index fd37c27..97d7761 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-fmt-utest.elc and b/elisp/cedet-1.1/semantic/semantic-fmt-utest.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-format.elc b/elisp/cedet-1.1/semantic/semantic-format.elc
index 68cecdc..7f58f26 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-format.elc and b/elisp/cedet-1.1/semantic/semantic-format.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-fw.elc b/elisp/cedet-1.1/semantic/semantic-fw.elc
index 299d80d..f1f26fe 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-fw.elc and b/elisp/cedet-1.1/semantic/semantic-fw.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-grammar-wy.el~ b/elisp/cedet-1.1/semantic/semantic-grammar-wy.el~
deleted file mode 100644
index 77cc424..0000000
--- a/elisp/cedet-1.1/semantic/semantic-grammar-wy.el~
+++ /dev/null
@@ -1,514 +0,0 @@
-;;; semantic-grammar-wy.el --- Generated parser support file
-
-;; Copyright (C) 2002, 2003, 2004 David Ponce
-
-;; Author: David Ponce <david@dponce.com>
-;; Created: 2004-03-20 12:34:58+0100
-;; Keywords: syntax
-;; X-RCS: $Id: semantic-grammar-wy.el,v 1.17 2010-03-15 13:40:54 xscript Exp $
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file semantic-grammar.wy.
-
-;;; History:
-;;
-
-;;; Code:
-
-;;; Prologue
-;;
-;; Current parsed nonterminal name.
-  (defvar semantic-grammar-wy--nterm nil)
-  ;; Index of rule in a nonterminal clause.
-  (defvar semantic-grammar-wy--rindx nil)
-
-;;; Declarations
-;;
-(defconst semantic-grammar-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("%default-prec" . DEFAULT-PREC)
-     ("%no-default-prec" . NO-DEFAULT-PREC)
-     ("%keyword" . KEYWORD)
-     ("%languagemode" . LANGUAGEMODE)
-     ("%left" . LEFT)
-     ("%nonassoc" . NONASSOC)
-     ("%package" . PACKAGE)
-     ("%prec" . PREC)
-     ("%put" . PUT)
-     ("%quotemode" . QUOTEMODE)
-     ("%right" . RIGHT)
-     ("%scopestart" . SCOPESTART)
-     ("%start" . START)
-     ("%token" . TOKEN)
-     ("%type" . TYPE)
-     ("%use-macros" . USE-MACROS))
-   'nil)
-  "Table of language keywords.")
-
-(defconst semantic-grammar-wy--token-table
-  (semantic-lex-make-type-table
-   '(("punctuation"
-      (GT . ">")
-      (LT . "<")
-      (OR . "|")
-      (SEMI . ";")
-      (COLON . ":"))
-     ("close-paren"
-      (RBRACE . "}")
-      (RPAREN . ")"))
-     ("open-paren"
-      (LBRACE . "{")
-      (LPAREN . "("))
-     ("block"
-      (BRACE_BLOCK . "(LBRACE RBRACE)")
-      (PAREN_BLOCK . "(LPAREN RPAREN)"))
-     ("code"
-      (EPILOGUE . "%%...EOF")
-      (PROLOGUE . "%{...%}"))
-     ("sexp"
-      (SEXP))
-     ("qlist"
-      (PREFIXED_LIST))
-     ("char"
-      (CHARACTER))
-     ("symbol"
-      (PERCENT_PERCENT . "\\`%%\\'")
-      (SYMBOL))
-     ("string"
-      (STRING)))
-   '(("punctuation" :declared t)
-     ("block" :declared t)
-     ("sexp" matchdatatype sexp)
-     ("sexp" syntax "\\=")
-     ("sexp" :declared t)
-     ("qlist" matchdatatype sexp)
-     ("qlist" syntax "\\s'\\s-*(")
-     ("qlist" :declared t)
-     ("char" syntax semantic-grammar-lex-c-char-re)
-     ("char" :declared t)
-     ("symbol" syntax ":?\\(\\sw\\|\\s_\\)+")
-     ("symbol" :declared t)
-     ("string" :declared t)
-     ("keyword" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst semantic-grammar-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((DEFAULT-PREC NO-DEFAULT-PREC KEYWORD LANGUAGEMODE LEFT NONASSOC PACKAGE PREC PUT QUOTEMODE RIGHT SCOPESTART START TOKEN TYPE USE-MACROS STRING SYMBOL PERCENT_PERCENT CHARACTER PREFIXED_LIST SEXP PROLOGUE EPILOGUE PAREN_BLOCK BRACE_BLOCK LPAREN RPAREN LBRACE RBRACE COLON SEMI OR LT GT)
-       nil
-       (grammar
-        ((prologue))
-        ((epilogue))
-        ((declaration))
-        ((nonterminal))
-        ((PERCENT_PERCENT)))
-       (prologue
-        ((PROLOGUE)
-         (wisent-raw-tag
-          (semantic-tag-new-code "prologue" nil))))
-       (epilogue
-        ((EPILOGUE)
-         (wisent-raw-tag
-          (semantic-tag-new-code "epilogue" nil))))
-       (declaration
-        ((decl)
-         (eval $1)))
-       (decl
-        ((default_prec_decl))
-        ((no_default_prec_decl))
-        ((languagemode_decl))
-        ((package_decl))
-        ((precedence_decl))
-        ((put_decl))
-        ((quotemode_decl))
-        ((scopestart_decl))
-        ((start_decl))
-        ((keyword_decl))
-        ((token_decl))
-        ((type_decl))
-        ((use_macros_decl)))
-       (default_prec_decl
-         ((DEFAULT-PREC)
-          `(wisent-raw-tag
-            (semantic-tag "default-prec" 'assoc :value
-                          '("t")))))
-       (no_default_prec_decl
-        ((NO-DEFAULT-PREC)
-         `(wisent-raw-tag
-           (semantic-tag "default-prec" 'assoc :value
-                         '("nil")))))
-       (languagemode_decl
-        ((LANGUAGEMODE symbols)
-         `(wisent-raw-tag
-           (semantic-tag ',(car $2)
-                         'languagemode :rest ',(cdr $2)))))
-       (package_decl
-        ((PACKAGE SYMBOL)
-         `(wisent-raw-tag
-           (semantic-tag-new-package ',$2 nil))))
-       (precedence_decl
-        ((associativity token_type_opt items)
-         `(wisent-raw-tag
-           (semantic-tag ',$1 'assoc :type ',$2 :value ',$3))))
-       (associativity
-        ((LEFT)
-         (progn "left"))
-        ((RIGHT)
-         (progn "right"))
-        ((NONASSOC)
-         (progn "nonassoc")))
-       (put_decl
-        ((PUT put_name put_value)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'put :value ',(list $3))))
-        ((PUT put_name put_value_list)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'put :value ',$3)))
-        ((PUT put_name_list put_value)
-         `(wisent-raw-tag
-           (semantic-tag ',(car $2)
-                         'put :rest ',(cdr $2)
-                         :value ',(list $3))))
-        ((PUT put_name_list put_value_list)
-         `(wisent-raw-tag
-           (semantic-tag ',(car $2)
-                         'put :rest ',(cdr $2)
-                         :value ',$3))))
-       (put_name_list
-        ((BRACE_BLOCK)
-         (mapcar 'semantic-tag-name
-                 (semantic-parse-region
-                  (car $region1)
-                  (cdr $region1)
-                  'put_names 1))))
-       (put_names
-        ((LBRACE)
-         nil)
-        ((RBRACE)
-         nil)
-        ((put_name)
-         (wisent-raw-tag
-          (semantic-tag $1 'put-name))))
-       (put_name
-        ((SYMBOL))
-        ((token_type)))
-       (put_value_list
-        ((BRACE_BLOCK)
-         (mapcar 'semantic-tag-code-detail
-                 (semantic-parse-region
-                  (car $region1)
-                  (cdr $region1)
-                  'put_values 1))))
-       (put_values
-        ((LBRACE)
-         nil)
-        ((RBRACE)
-         nil)
-        ((put_value)
-         (wisent-raw-tag
-          (semantic-tag-new-code "put-value" $1))))
-       (put_value
-        ((SYMBOL any_value)
-         (cons $1 $2)))
-       (scopestart_decl
-        ((SCOPESTART SYMBOL)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'scopestart))))
-       (quotemode_decl
-        ((QUOTEMODE SYMBOL)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'quotemode))))
-       (start_decl
-        ((START symbols)
-         `(wisent-raw-tag
-           (semantic-tag ',(car $2)
-                         'start :rest ',(cdr $2)))))
-       (keyword_decl
-        ((KEYWORD SYMBOL string_value)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'keyword :value ',$3))))
-       (token_decl
-        ((TOKEN token_type_opt SYMBOL string_value)
-         `(wisent-raw-tag
-           (semantic-tag ',$3 ',(if $2 'token 'keyword)
-                         :type ',$2 :value ',$4)))
-        ((TOKEN token_type_opt symbols)
-         `(wisent-raw-tag
-           (semantic-tag ',(car $3)
-                         'token :type ',$2 :rest ',(cdr $3)))))
-       (token_type_opt
-        (nil)
-        ((token_type)))
-       (token_type
-        ((LT SYMBOL GT)
-         (progn $2)))
-       (type_decl
-        ((TYPE token_type plist_opt)
-         `(wisent-raw-tag
-           (semantic-tag ',$2 'type :value ',$3))))
-       (plist_opt
-        (nil)
-        ((plist)))
-       (plist
-        ((plist put_value)
-         (append
-          (list $2)
-          $1))
-        ((put_value)
-         (list $1)))
-       (use_name_list
-        ((BRACE_BLOCK)
-         (mapcar 'semantic-tag-name
-                 (semantic-parse-region
-                  (car $region1)
-                  (cdr $region1)
-                  'use_names 1))))
-       (use_names
-        ((LBRACE)
-         nil)
-        ((RBRACE)
-         nil)
-        ((SYMBOL)
-         (wisent-raw-tag
-          (semantic-tag $1 'use-name))))
-       (use_macros_decl
-        ((USE-MACROS SYMBOL use_name_list)
-         `(wisent-raw-tag
-           (semantic-tag "macro" 'macro :type ',$2 :value ',$3))))
-       (string_value
-        ((STRING)
-         (read $1)))
-       (any_value
-        ((SYMBOL))
-        ((STRING))
-        ((PAREN_BLOCK))
-        ((PREFIXED_LIST))
-        ((SEXP)))
-       (symbols
-        ((lifo_symbols)
-         (nreverse $1)))
-       (lifo_symbols
-        ((lifo_symbols SYMBOL)
-         (cons $2 $1))
-        ((SYMBOL)
-         (list $1)))
-       (nonterminal
-        ((SYMBOL
-          (setq semantic-grammar-wy--nterm $1 semantic-grammar-wy--rindx 0)
-          COLON rules SEMI)
-         (wisent-raw-tag
-          (semantic-tag $1 'nonterminal :children $4))))
-       (rules
-        ((lifo_rules)
-         (apply 'nconc
-                (nreverse $1))))
-       (lifo_rules
-        ((lifo_rules OR rule)
-         (cons $3 $1))
-        ((rule)
-         (list $1)))
-       (rule
-        ((rhs)
-         (let*
-             ((nterm semantic-grammar-wy--nterm)
-              (rindx semantic-grammar-wy--rindx)
-              (rhs $1)
-              comps prec action elt)
-           (setq semantic-grammar-wy--rindx
-                 (1+ semantic-grammar-wy--rindx))
-           (while rhs
-             (setq elt
-                   (car rhs)
-                   rhs
-                   (cdr rhs))
-             (cond
-              ((vectorp elt)
-               (if prec
-                   (error "Duplicate %%prec in `%s:%d' rule" nterm rindx))
-               (setq prec
-                     (aref elt 0)))
-              ((consp elt)
-               (if
-                   (or action comps)
-                   (setq comps
-                         (cons elt comps)
-                         semantic-grammar-wy--rindx
-                         (1+ semantic-grammar-wy--rindx))
-                 (setq action
-                       (car elt))))
-              (t
-               (setq comps
-                     (cons elt comps)))))
-           (wisent-cook-tag
-            (wisent-raw-tag
-             (semantic-tag
-              (format "%s:%d" nterm rindx)
-              'rule :type
-              (if comps "group" "empty")
-              :value comps :prec prec :expr action))))))
-       (rhs
-        (nil)
-        ((rhs item)
-         (cons $2 $1))
-        ((rhs action)
-         (cons
-          (list $2)
-          $1))
-        ((rhs PREC item)
-         (cons
-          (vector $3)
-          $1)))
-       (action
-        ((PAREN_BLOCK))
-        ((PREFIXED_LIST))
-        ((BRACE_BLOCK)
-         (format "(progn\n%s)"
-                 (let
-                     ((s $1))
-                   (if
-                       (string-match "^{[\n	 ]*" s)
-                       (setq s
-                             (substring s
-                                        (match-end 0))))
-                   (if
-                       (string-match "[\n	 ]*}$" s)
-                       (setq s
-                             (substring s 0
-                                        (match-beginning 0))))
-                   s))))
-       (items
-        ((lifo_items)
-         (nreverse $1)))
-       (lifo_items
-        ((lifo_items item)
-         (cons $2 $1))
-        ((item)
-         (list $1)))
-       (item
-        ((SYMBOL))
-        ((CHARACTER))))
-     '(grammar prologue epilogue declaration nonterminal rule put_names put_values use_names)))
-  "Parser table.")
-
-(defun semantic-grammar-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-        semantic--parse-table semantic-grammar-wy--parse-table
-        semantic-debug-parser-source "semantic-grammar.wy"
-        semantic-flex-keywords-obarray semantic-grammar-wy--keyword-table
-        semantic-lex-types-obarray semantic-grammar-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-            'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-sexp-type-analyzer semantic-grammar-wy--<sexp>-sexp-analyzer
-  "sexp analyzer for <sexp> tokens."
-  "\\="
-  'SEXP)
-
-(define-lex-sexp-type-analyzer semantic-grammar-wy--<qlist>-sexp-analyzer
-  "sexp analyzer for <qlist> tokens."
-  "\\s'\\s-*("
-  'PREFIXED_LIST)
-
-(define-lex-keyword-type-analyzer semantic-grammar-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-block-type-analyzer semantic-grammar-wy--<block>-block-analyzer
-  "block analyzer for <block> tokens."
-  "\\s(\\|\\s)"
-  '((("(" LPAREN PAREN_BLOCK)
-     ("{" LBRACE BRACE_BLOCK))
-    (")" RPAREN)
-    ("}" RBRACE))
-  )
-
-(define-lex-regex-type-analyzer semantic-grammar-wy--<char>-regexp-analyzer
-  "regexp analyzer for <char> tokens."
-  semantic-grammar-lex-c-char-re
-  nil
-  'CHARACTER)
-
-(define-lex-sexp-type-analyzer semantic-grammar-wy--<string>-sexp-analyzer
-  "sexp analyzer for <string> tokens."
-  "\\s\""
-  'STRING)
-
-(define-lex-regex-type-analyzer semantic-grammar-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  ":?\\(\\sw\\|\\s_\\)+"
-  '((PERCENT_PERCENT . "\\`%%\\'"))
-  'SYMBOL)
-
-(define-lex-string-type-analyzer semantic-grammar-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\(\\s.\\|\\s$\\|\\s'\\)+"
-  '((GT . ">")
-    (LT . "<")
-    (OR . "|")
-    (SEMI . ";")
-    (COLON . ":"))
-  'punctuation)
-
-
-;;; Epilogue
-;;
-(define-lex semantic-grammar-lexer
-  "Lexical analyzer that handles Semantic grammar buffers.
-It ignores whitespaces, newlines and comments."
-  semantic-lex-ignore-newline
-  semantic-lex-ignore-whitespace
-  ;; Must detect prologue/epilogue before other symbols/keywords!
-  semantic-grammar-lex-prologue
-  semantic-grammar-lex-epilogue
-  semantic-grammar-wy--<keyword>-keyword-analyzer
-  semantic-grammar-wy--<symbol>-regexp-analyzer
-  semantic-grammar-wy--<char>-regexp-analyzer
-  semantic-grammar-wy--<string>-sexp-analyzer
-  ;; Must detect comments after strings because `comment-start-skip'
-  ;; regexp match semicolons inside strings!
-  semantic-lex-ignore-comments
-  ;; Must detect prefixed list before punctuation because prefix chars
-  ;; are also punctuations!
-  semantic-grammar-wy--<qlist>-sexp-analyzer
-  ;; Must detect punctuations after comments because the semicolon can
-  ;; be a punctuation or a comment start!
-  semantic-grammar-wy--<punctuation>-string-analyzer
-  semantic-grammar-wy--<block>-block-analyzer
-  semantic-grammar-wy--<sexp>-sexp-analyzer
-  )
-
-(provide 'semantic-grammar-wy)
-
-;;; semantic-grammar-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/semantic-grammar.elc b/elisp/cedet-1.1/semantic/semantic-grammar.elc
index 9c15dd4..1c3ac56 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-grammar.elc and b/elisp/cedet-1.1/semantic/semantic-grammar.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-html.elc b/elisp/cedet-1.1/semantic/semantic-html.elc
index ee8b271..d383932 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-html.elc and b/elisp/cedet-1.1/semantic/semantic-html.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-ia-sb.elc b/elisp/cedet-1.1/semantic/semantic-ia-sb.elc
index 559b7ff..42fe915 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-ia-sb.elc and b/elisp/cedet-1.1/semantic/semantic-ia-sb.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-ia-utest.elc b/elisp/cedet-1.1/semantic/semantic-ia-utest.elc
index cd0a22f..3890930 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-ia-utest.elc and b/elisp/cedet-1.1/semantic/semantic-ia-utest.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-ia.elc b/elisp/cedet-1.1/semantic/semantic-ia.elc
index 96fec78..c55264b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-ia.elc and b/elisp/cedet-1.1/semantic/semantic-ia.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-idle.elc b/elisp/cedet-1.1/semantic/semantic-idle.elc
index 53c4766..49469b0 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-idle.elc and b/elisp/cedet-1.1/semantic/semantic-idle.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-imenu.elc b/elisp/cedet-1.1/semantic/semantic-imenu.elc
index ea2ab7c..2693da5 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-imenu.elc and b/elisp/cedet-1.1/semantic/semantic-imenu.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-lex-spp.elc b/elisp/cedet-1.1/semantic/semantic-lex-spp.elc
index ec4fb22..6906f3e 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-lex-spp.elc and b/elisp/cedet-1.1/semantic/semantic-lex-spp.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-lex.elc b/elisp/cedet-1.1/semantic/semantic-lex.elc
index 0134994..fc7d452 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-lex.elc and b/elisp/cedet-1.1/semantic/semantic-lex.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-load.elc b/elisp/cedet-1.1/semantic/semantic-load.elc
index e91a803..9b1b3fc 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-load.elc and b/elisp/cedet-1.1/semantic/semantic-load.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-loaddefs.el b/elisp/cedet-1.1/semantic/semantic-loaddefs.el
index 99f525b..ba5e634 100644
--- a/elisp/cedet-1.1/semantic/semantic-loaddefs.el
+++ b/elisp/cedet-1.1/semantic/semantic-loaddefs.el
@@ -2625,7 +2625,7 @@ Depends on the SRecode Field editing API.
 
 ;;;### (autoloads (semantic-symref-results-mode semantic-symref-regexp
 ;;;;;;  semantic-symref-symbol semantic-symref) "semantic-symref-list"
-;;;;;;  "symref/semantic-symref-list.el" (20362 59691))
+;;;;;;  "symref/semantic-symref-list.el" (20584 5286))
 ;;; Generated autoloads from symref/semantic-symref-list.el
 
 (autoload 'semantic-symref "semantic-symref-list" "\
@@ -4129,7 +4129,7 @@ Setup buffer for parse.
 ;;;;;;  "wisent/wisent-cim-wy.el" "wisent/wisent-expr.el" "wisent/wisent-grammar-macros.el"
 ;;;;;;  "wisent/wisent-java-tags-wy.el" "wisent/wisent-java-wy.el"
 ;;;;;;  "wisent/wisent-javascript-jv-wy.el" "wisent/wisent-python-wy.el")
-;;;;;;  (20565 26891 969122))
+;;;;;;  (20584 5750 771342))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/semantic/semantic-m3.elc b/elisp/cedet-1.1/semantic/semantic-m3.elc
index 8d3d4f4..f63f399 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-m3.elc and b/elisp/cedet-1.1/semantic/semantic-m3.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-mru-bookmark.elc b/elisp/cedet-1.1/semantic/semantic-mru-bookmark.elc
index 0fb89c6..db9c97c 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-mru-bookmark.elc and b/elisp/cedet-1.1/semantic/semantic-mru-bookmark.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-regtest.elc b/elisp/cedet-1.1/semantic/semantic-regtest.elc
index a8c6e6c..7fc3080 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-regtest.elc and b/elisp/cedet-1.1/semantic/semantic-regtest.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-sb.elc b/elisp/cedet-1.1/semantic/semantic-sb.elc
index 971b0ae..b88f5a4 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-sb.elc and b/elisp/cedet-1.1/semantic/semantic-sb.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-scope.elc b/elisp/cedet-1.1/semantic/semantic-scope.elc
index fb3e926..46b77c9 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-scope.elc and b/elisp/cedet-1.1/semantic/semantic-scope.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-sort.elc b/elisp/cedet-1.1/semantic/semantic-sort.elc
index 27e6328..377f85b 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-sort.elc and b/elisp/cedet-1.1/semantic/semantic-sort.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-tag-file.elc b/elisp/cedet-1.1/semantic/semantic-tag-file.elc
index 9d4f9e4..93ff93a 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-tag-file.elc and b/elisp/cedet-1.1/semantic/semantic-tag-file.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-tag-ls.elc b/elisp/cedet-1.1/semantic/semantic-tag-ls.elc
index 3d30608..37449d9 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-tag-ls.elc and b/elisp/cedet-1.1/semantic/semantic-tag-ls.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-tag-write.elc b/elisp/cedet-1.1/semantic/semantic-tag-write.elc
index b55a190..76814e1 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-tag-write.elc and b/elisp/cedet-1.1/semantic/semantic-tag-write.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-tag.elc b/elisp/cedet-1.1/semantic/semantic-tag.elc
index 520a7c8..4dc54b5 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-tag.elc and b/elisp/cedet-1.1/semantic/semantic-tag.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-texi.elc b/elisp/cedet-1.1/semantic/semantic-texi.elc
index 8bf0b07..8f2f7e7 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-texi.elc and b/elisp/cedet-1.1/semantic/semantic-texi.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-utest-c.elc b/elisp/cedet-1.1/semantic/semantic-utest-c.elc
index bfda965..aae0305 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-utest-c.elc and b/elisp/cedet-1.1/semantic/semantic-utest-c.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-utest.elc b/elisp/cedet-1.1/semantic/semantic-utest.elc
index f9d2079..3819267 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-utest.elc and b/elisp/cedet-1.1/semantic/semantic-utest.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-util-modes.elc b/elisp/cedet-1.1/semantic/semantic-util-modes.elc
index 2875863..2fb7b22 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-util-modes.elc and b/elisp/cedet-1.1/semantic/semantic-util-modes.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic-util.elc b/elisp/cedet-1.1/semantic/semantic-util.elc
index 7568e78..425ddf5 100644
Binary files a/elisp/cedet-1.1/semantic/semantic-util.elc and b/elisp/cedet-1.1/semantic/semantic-util.elc differ
diff --git a/elisp/cedet-1.1/semantic/semantic.elc b/elisp/cedet-1.1/semantic/semantic.elc
index 3f40500..8e5f72a 100644
Binary files a/elisp/cedet-1.1/semantic/semantic.elc and b/elisp/cedet-1.1/semantic/semantic.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-cscope.elc b/elisp/cedet-1.1/semantic/semanticdb-cscope.elc
index 4fc0e61..6164637 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-cscope.elc and b/elisp/cedet-1.1/semantic/semanticdb-cscope.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-debug.elc b/elisp/cedet-1.1/semantic/semanticdb-debug.elc
index 3c434cb..711bb1c 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-debug.elc and b/elisp/cedet-1.1/semantic/semanticdb-debug.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-ebrowse.elc b/elisp/cedet-1.1/semantic/semanticdb-ebrowse.elc
index dc0d817..bae7077 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-ebrowse.elc and b/elisp/cedet-1.1/semantic/semanticdb-ebrowse.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-el.elc b/elisp/cedet-1.1/semantic/semanticdb-el.elc
index bb2a8e6..031b294 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-el.elc and b/elisp/cedet-1.1/semantic/semanticdb-el.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-file.elc b/elisp/cedet-1.1/semantic/semanticdb-file.elc
index 13190ab..b8adba4 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-file.elc and b/elisp/cedet-1.1/semantic/semanticdb-file.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-find.elc b/elisp/cedet-1.1/semantic/semanticdb-find.elc
index 7680fe8..ccf4a98 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-find.elc and b/elisp/cedet-1.1/semantic/semanticdb-find.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-global.elc b/elisp/cedet-1.1/semantic/semanticdb-global.elc
index c951bfe..720f66f 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-global.elc and b/elisp/cedet-1.1/semantic/semanticdb-global.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-javap.elc b/elisp/cedet-1.1/semantic/semanticdb-javap.elc
index 95863b9..6e6d13d 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-javap.elc and b/elisp/cedet-1.1/semantic/semanticdb-javap.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-javascript.elc b/elisp/cedet-1.1/semantic/semanticdb-javascript.elc
index 237a73c..ae069fb 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-javascript.elc and b/elisp/cedet-1.1/semantic/semanticdb-javascript.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-mk.elc b/elisp/cedet-1.1/semantic/semanticdb-mk.elc
index b25e3cd..61ef6b5 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-mk.elc and b/elisp/cedet-1.1/semantic/semanticdb-mk.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-mode.elc b/elisp/cedet-1.1/semantic/semanticdb-mode.elc
index c9f0a1a..45a0d80 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-mode.elc and b/elisp/cedet-1.1/semantic/semanticdb-mode.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-ref.elc b/elisp/cedet-1.1/semantic/semanticdb-ref.elc
index ad9f179..a267bef 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-ref.elc and b/elisp/cedet-1.1/semantic/semanticdb-ref.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-search.elc b/elisp/cedet-1.1/semantic/semanticdb-search.elc
index cf87662..cc20092 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-search.elc and b/elisp/cedet-1.1/semantic/semanticdb-search.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb-typecache.elc b/elisp/cedet-1.1/semantic/semanticdb-typecache.elc
index 9b6b33c..47fb435 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb-typecache.elc and b/elisp/cedet-1.1/semantic/semanticdb-typecache.elc differ
diff --git a/elisp/cedet-1.1/semantic/semanticdb.elc b/elisp/cedet-1.1/semantic/semanticdb.elc
index 80025de..adbcbf8 100644
Binary files a/elisp/cedet-1.1/semantic/semanticdb.elc and b/elisp/cedet-1.1/semantic/semanticdb.elc differ
diff --git a/elisp/cedet-1.1/semantic/senator.elc b/elisp/cedet-1.1/semantic/senator.elc
index 9611c86..4f42ea4 100644
Binary files a/elisp/cedet-1.1/semantic/senator.elc and b/elisp/cedet-1.1/semantic/senator.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-cscope.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-cscope.elc
index 3f61cfe..ad2bf04 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-cscope.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-cscope.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-filter.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-filter.elc
index accbeb9..e3c52c1 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-filter.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-filter.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-global.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-global.elc
index 3a1ac9a..7866a7a 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-global.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-global.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-grep.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-grep.elc
index 6abaf20..e676310 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-grep.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-grep.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-idutils.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-idutils.elc
index e13d686..db14f01 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-idutils.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-idutils.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-list.el b/elisp/cedet-1.1/semantic/symref/semantic-symref-list.el
index f4d7ff4..64638dc 100644
--- a/elisp/cedet-1.1/semantic/symref/semantic-symref-list.el
+++ b/elisp/cedet-1.1/semantic/symref/semantic-symref-list.el
@@ -101,7 +101,7 @@ Display the references in`semantic-symref-results-mode'."
 (defun semantic-symref-produce-list-on-results (res str)
   "Produce a symref list mode buffer on the results RES."
     (when (not res) (error "No references found"))
-    (semantic-symref-result-get-tags res t)
+    (semantic-symref-result-get-tags res)
     (message "Gathering References...done")
     ;; Build a refrences buffer.
     (let ((buff (get-buffer-create
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref-list.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref-list.elc
index b60be7d..c5f9dbd 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref-list.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref-list.elc differ
diff --git a/elisp/cedet-1.1/semantic/symref/semantic-symref.elc b/elisp/cedet-1.1/semantic/symref/semantic-symref.elc
index 55df1fa..61f7e43 100644
Binary files a/elisp/cedet-1.1/semantic/symref/semantic-symref.elc and b/elisp/cedet-1.1/semantic/symref/semantic-symref.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/bison-wisent.elc b/elisp/cedet-1.1/semantic/wisent/bison-wisent.elc
index 721c6e4..58713a2 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/bison-wisent.elc and b/elisp/cedet-1.1/semantic/wisent/bison-wisent.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/semantic-wisent.elc b/elisp/cedet-1.1/semantic/wisent/semantic-wisent.elc
index 9249c93..f49e868 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/semantic-wisent.elc and b/elisp/cedet-1.1/semantic/wisent/semantic-wisent.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-awk-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-awk-wy.el~
deleted file mode 100644
index 34fc824..0000000
--- a/elisp/cedet-1.1/semantic/wisent/wisent-awk-wy.el~
+++ /dev/null
@@ -1,357 +0,0 @@
-;;; wisent-awk-wy.el --- Generated parser support file
-
-;; Copyright (C) 2002 David Ponce
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:29-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-awk.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-awk-wy--keyword-table
-  (semantic-lex-make-keyword-table 'nil 'nil)
-  "Table of language keywords.")
-
-(defconst wisent-awk-wy--token-table
-  (semantic-lex-make-type-table
-   '(("<no-type>"
-      (LEX_LENGTH)
-      (LEX_BUILTIN)
-      (DECREMENT)
-      (INCREMENT)
-      (LEX_OR)
-      (LEX_AND)
-      (LEX_IN)
-      (LEX_NEXTFILE)
-      (LEX_GETLINE)
-      (LEX_FUNCTION)
-      (LEX_EXIT)
-      (LEX_NEXT)
-      (LEX_PRINTF)
-      (LEX_PRINT)
-      (LEX_CONTINUE)
-      (LEX_BREAK)
-      (LEX_FOR)
-      (LEX_DO)
-      (LEX_WHILE)
-      (LEX_DELETE)
-      (LEX_RETURN)
-      (LEX_ELSE)
-      (LEX_IF)
-      (LEX_END)
-      (LEX_BEGIN)
-      (CONCAT_OP)
-      (NEWLINE)
-      (MATCHOP)
-      (ASSIGNOP)
-      (APPEND_OP)
-      (RELOP)
-      (YSTRING)
-      (YNUMBER)
-      (ERROR)
-      (REGEXP)
-      (NAME)
-      (FUNC_CALL)))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst wisent-awk-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((FUNC_CALL NAME REGEXP ERROR YNUMBER YSTRING RELOP APPEND_OP ASSIGNOP MATCHOP NEWLINE CONCAT_OP LEX_BEGIN LEX_END LEX_IF LEX_ELSE LEX_RETURN LEX_DELETE LEX_WHILE LEX_DO LEX_FOR LEX_BREAK LEX_CONTINUE LEX_PRINT LEX_PRINTF LEX_NEXT LEX_EXIT LEX_FUNCTION LEX_GETLINE LEX_NEXTFILE LEX_IN LEX_AND LEX_OR INCREMENT DECREMENT LEX_BUILTIN LEX_LENGTH)
-       ((right ASSIGNOP)
-	(right 63 58)
-	(left LEX_OR)
-	(left LEX_AND)
-	(left LEX_GETLINE)
-	(nonassoc LEX_IN)
-	(left FUNC_CALL LEX_BUILTIN LEX_LENGTH)
-	(nonassoc 44)
-	(nonassoc MATCHOP)
-	(nonassoc RELOP 60 62 124 APPEND_OP TWOWAYIO)
-	(left CONCAT_OP)
-	(left YSTRING YNUMBER)
-	(left 43 45)
-	(left 42 47 37)
-	(right 33 UNARY)
-	(right 94)
-	(left INCREMENT DECREMENT)
-	(left 36)
-	(left 40 41))
-       (start_
-	((opt_nls program opt_nls)))
-       (program
-	((rule))
-	((program rule))
-	((error))
-	((program error))
-	(nil))
-       (rule
-	((LEX_BEGIN
-	  (progn)
-	  action))
-	((LEX_END
-	  (progn)
-	  action))
-	((LEX_BEGIN statement_term))
-	((LEX_END statement_term))
-	((pattern action))
-	((action))
-	((pattern statement_term))
-	((function_prologue function_body)))
-       (func_name
-	((NAME))
-	((FUNC_CALL))
-	((lex_builtin)))
-       (lex_builtin
-	((LEX_BUILTIN))
-	((LEX_LENGTH)))
-       (function_prologue
-	((LEX_FUNCTION
-	  (progn)
-	  func_name 40 opt_param_list r_paren opt_nls)))
-       (function_body
-	((l_brace statements r_brace opt_semi opt_nls))
-	((l_brace r_brace opt_semi opt_nls)))
-       (pattern
-	((exp))
-	((exp 44 exp)))
-       (regexp
-	((47
-	  (progn)
-	  REGEXP 47)))
-       (action
-	((l_brace statements r_brace opt_semi opt_nls))
-	((l_brace r_brace opt_semi opt_nls)))
-       (statements
-	((statement))
-	((statements statement))
-	((error))
-	((statements error)))
-       (statement_term
-	((nls))
-	((semi opt_nls)))
-       (statement
-	((semi opt_nls))
-	((l_brace r_brace))
-	((l_brace statements r_brace))
-	((if_statement))
-	((LEX_WHILE 40 exp r_paren opt_nls statement))
-	((LEX_DO opt_nls statement LEX_WHILE 40 exp r_paren opt_nls))
-	((LEX_FOR 40 NAME LEX_IN NAME r_paren opt_nls statement))
-	((LEX_FOR 40 opt_exp semi opt_nls exp semi opt_nls opt_exp r_paren opt_nls statement))
-	((LEX_FOR 40 opt_exp semi opt_nls semi opt_nls opt_exp r_paren opt_nls statement))
-	((LEX_BREAK statement_term))
-	((LEX_CONTINUE statement_term))
-	((print 40 expression_list r_paren output_redir statement_term))
-	((print opt_rexpression_list output_redir statement_term))
-	((LEX_NEXT statement_term))
-	((LEX_NEXTFILE statement_term))
-	((LEX_EXIT opt_exp statement_term))
-	((LEX_RETURN
-	  (progn)
-	  opt_exp statement_term))
-	((LEX_DELETE NAME 91 expression_list 93 statement_term))
-	((LEX_DELETE NAME statement_term))
-	((exp statement_term)))
-       (print
-	((LEX_PRINT))
-	((LEX_PRINTF)))
-       (if_statement
-	((LEX_IF 40 exp r_paren opt_nls statement))
-	((LEX_IF 40 exp r_paren opt_nls statement LEX_ELSE opt_nls statement)))
-       (nls
-	((NEWLINE))
-	((nls NEWLINE)))
-       (opt_nls
-	(nil)
-	((nls)))
-       (input_redir
-	(nil)
-	((60 simp_exp)))
-       (output_redir
-	(nil)
-	((62 exp))
-	((APPEND_OP exp))
-	((124 exp))
-	((TWOWAYIO exp)))
-       (opt_param_list
-	(nil)
-	((param_list)))
-       (param_list
-	((NAME))
-	((param_list comma NAME))
-	((error))
-	((param_list error))
-	((param_list comma error)))
-       (opt_exp
-	(nil)
-	((exp)))
-       (opt_rexpression_list
-	(nil)
-	((rexpression_list)))
-       (rexpression_list
-	((rexp))
-	((rexpression_list comma rexp))
-	((error))
-	((rexpression_list error))
-	((rexpression_list error rexp))
-	((rexpression_list comma error)))
-       (opt_expression_list
-	(nil)
-	((expression_list)))
-       (expression_list
-	((exp))
-	((expression_list comma exp))
-	((error))
-	((expression_list error))
-	((expression_list error exp))
-	((expression_list comma error)))
-       (exp
-	((variable ASSIGNOP
-		   (progn)
-		   exp))
-	((40 expression_list r_paren LEX_IN NAME))
-	((exp 124 LEX_GETLINE opt_variable))
-	((exp TWOWAYIO LEX_GETLINE opt_variable))
-	((LEX_GETLINE opt_variable input_redir))
-	((exp LEX_AND exp))
-	((exp LEX_OR exp))
-	((exp MATCHOP exp))
-	((regexp))
-	((33 regexp)
-	 [UNARY])
-	((exp LEX_IN NAME))
-	((exp RELOP exp))
-	((exp 60 exp))
-	((exp 62 exp))
-	((exp 63 exp 58 exp))
-	((simp_exp))
-	((exp simp_exp)
-	 [CONCAT_OP]))
-       (rexp
-	((variable ASSIGNOP
-		   (progn)
-		   rexp))
-	((rexp LEX_AND rexp))
-	((rexp LEX_OR rexp))
-	((LEX_GETLINE opt_variable input_redir))
-	((regexp))
-	((33 regexp)
-	 [UNARY])
-	((rexp MATCHOP rexp))
-	((rexp LEX_IN NAME))
-	((rexp RELOP rexp))
-	((rexp 63 rexp 58 rexp))
-	((simp_exp))
-	((rexp simp_exp)
-	 [CONCAT_OP]))
-       (simp_exp
-	((non_post_simp_exp))
-	((simp_exp 94 simp_exp))
-	((simp_exp 42 simp_exp))
-	((simp_exp 47 simp_exp))
-	((simp_exp 37 simp_exp))
-	((simp_exp 43 simp_exp))
-	((simp_exp 45 simp_exp))
-	((variable INCREMENT))
-	((variable DECREMENT)))
-       (non_post_simp_exp
-	((33 simp_exp)
-	 [UNARY])
-	((40 exp r_paren))
-	((LEX_BUILTIN 40 opt_expression_list r_paren))
-	((LEX_LENGTH 40 opt_expression_list r_paren))
-	((LEX_LENGTH))
-	((FUNC_CALL 40 opt_expression_list r_paren))
-	((variable))
-	((INCREMENT variable))
-	((DECREMENT variable))
-	((YNUMBER))
-	((YSTRING))
-	((45 simp_exp)
-	 [UNARY])
-	((43 simp_exp)
-	 [UNARY]))
-       (opt_variable
-	(nil)
-	((variable)))
-       (variable
-	((NAME))
-	((NAME 91 expression_list 93))
-	((36 non_post_simp_exp)))
-       (l_brace
-	((123 opt_nls)))
-       (r_brace
-	((125 opt_nls)))
-       (r_paren
-	((41)))
-       (opt_semi
-	(nil)
-	((semi)))
-       (semi
-	((59)))
-       (comma
-	((44 opt_nls))))
-     'nil))
-  "Parser table.")
-
-(defun wisent-awk-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-awk-wy--parse-table
-	semantic-debug-parser-source "wisent-awk.wy"
-	semantic-flex-keywords-obarray wisent-awk-wy--keyword-table
-	semantic-lex-types-obarray wisent-awk-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-
-
-
-(provide 'wisent-awk-wy)
-
-;;; wisent-awk-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-calc-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-calc-wy.el~
deleted file mode 100644
index bcb89a0..0000000
--- a/elisp/cedet-1.1/semantic/wisent/wisent-calc-wy.el~
+++ /dev/null
@@ -1,144 +0,0 @@
-;;; wisent-calc-wy.el --- Generated parser support file
-
-;; Copyright (C) 2002, 2003, 2009 David Ponce
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:29-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-calc.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-calc-wy--keyword-table
-  (semantic-lex-make-keyword-table 'nil 'nil)
-  "Table of language keywords.")
-
-(defconst wisent-calc-wy--token-table
-  (semantic-lex-make-type-table
-   '(("number"
-      (NUM)))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst wisent-calc-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((NUM)
-       ((nonassoc 61)
-	(left 45 43)
-	(left 42 47)
-	(left NEG)
-	(left FACT)
-	(left NOT)
-	(right 94))
-       (input
-	((line))
-	((input line)
-	 (format "%s %s" $1 $2)))
-       (line
-	((59)
-	 (progn ";"))
-	((exp 59)
-	 (format "%s;" $1))
-	((error 59)
-	 (progn "Error;")))
-       (exp
-	((NUM)
-	 (string-to-number $1))
-	((exp 61 exp)
-	 (wisent-calc-= $1 $3))
-	((126 exp)
-	 [NOT]
-	 (wisent-calc-not $2))
-	((exp 43 exp)
-	 (+ $1 $3))
-	((exp 45 exp)
-	 (- $1 $3))
-	((exp 42 exp)
-	 (* $1 $3))
-	((exp 47 exp)
-	 (/ $1 $3))
-	((45 exp)
-	 [NEG]
-	 (- $2))
-	((33 exp)
-	 [FACT]
-	 (wisent-calc-factorial $2))
-	((exp 94 exp)
-	 (expt $1 $3))
-	((40 exp 41)
-	 (progn $2))))
-     'nil))
-  "Parser table.")
-
-(defun wisent-calc-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-calc-wy--parse-table
-	semantic-debug-parser-source "wisent-calc.wy"
-	semantic-flex-keywords-obarray wisent-calc-wy--keyword-table
-	semantic-lex-types-obarray wisent-calc-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-(defun wisent-calc-setup-parser ()
-  "Setup buffer for parse."
-  (wisent-calc-wy--install-parser)
-  (setq semantic-number-expression
-        (concat "\\([0-9]+\\([.][0-9]*\\)?\\([eE][-+]?[0-9]+\\)?"
-                "\\|[.][0-9]+\\([eE][-+]?[0-9]+\\)?\\)")
-        semantic-lex-analyzer 'wisent-calc-lexer
-        semantic-lex-depth nil
-        semantic-lex-syntax-modifications
-        '((?\; ".") (?\= ".") (?\+ ".")
-          (?\- ".") (?\* ".") (?\/ ".")
-          (?^ ".") (?\( ".") (?\) ".")
-	  (?! ".") (?~ ".")
-          )
-        )
-  )
-
-(provide 'wisent-calc-wy)
-
-;;; wisent-calc-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-calc.elc b/elisp/cedet-1.1/semantic/wisent/wisent-calc.elc
index 022b1e8..e8bd93e 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-calc.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-calc.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-cim-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-cim-wy.el~
deleted file mode 100644
index 78cf062..0000000
--- a/elisp/cedet-1.1/semantic/wisent/wisent-cim-wy.el~
+++ /dev/null
@@ -1,711 +0,0 @@
-;;; wisent-cim-wy.el --- Generated parser support file
-
-;; Copyright (C) 2002 David Ponce
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:29-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-cim.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-cim-wy--keyword-table
-  (semantic-lex-make-keyword-table 'nil 'nil)
-  "Table of language keywords.")
-
-(defconst wisent-cim-wy--token-table
-  (semantic-lex-make-type-table
-   '(("tval"
-      (HTEXTKONST))
-     ("rval"
-      (HREALKONST))
-     ("ival"
-      (HCHARACTERKONST)
-      (HINTEGERKONST)
-      (HBOOLEANKONST))
-     ("ident"
-      (HIDENTIFIER))
-     ("<no-type>"
-      (HDOTDOTDOT)
-      (HEXP)
-      (HINTDIV)
-      (HDIV)
-      (HMUL)
-      (HSUB)
-      (HADD)
-      (HNER)
-      (HEQR)
-      (HENDPAR)
-      (HBEGPAR)
-      (HSTATEMENTSEPARATOR)
-      (HLABELSEPARATOR)
-      (HPAREXPSEPARATOR)
-      (HASSIGNREF)
-      (HASSIGNVALUE)
-      (HWHILE)
-      (HWHEN)
-      (HVIRTUAL)
-      (HVAR)
-      (HVALUE)
-      (HUNTIL)
-      (HTO)
-      (HTHIS)
-      (HTHEN)
-      (HTEXT)
-      (HSWITCH)
-      (HSTEP)
-      (HSHORT)
-      (HREF)
-      (HREAL)
-      (HREACTIVATE)
-      (HQUA)
-      (HPROTECTED)
-      (HPROCEDURE)
-      (HPRIOR)
-      (HOTHERWISE)
-      (HNOTEXT)
-      (HNONE)
-      (HNEW)
-      (HNE)
-      (HNAME)
-      (HLT)
-      (HLONG)
-      (HLE)
-      (HLABEL)
-      (HIS)
-      (HINTEGER)
-      (HINSPECT)
-      (HINNER)
-      (HIN)
-      (HIF)
-      (HHIDDEN)
-      (HGT)
-      (HGOTO)
-      (HGO)
-      (HGE)
-      (HFOR)
-      (HEXTERNAL)
-      (HEQ)
-      (HEND)
-      (HELSE)
-      (HDO)
-      (HDELAY)
-      (HCONC)
-      (HCLASS)
-      (HCHARACTER)
-      (HBOOLEAN)
-      (HBEGIN)
-      (HBEFORE)
-      (HAT)
-      (HARRAY)
-      (HAFTER)
-      (HACTIVATE))
-     ("token"
-      (HFACTOROPERATOR)
-      (UNEAR)
-      (HTERMOPERATOR)
-      (HOBJRELOPERATOR)
-      (HREFRELOPERATOR)
-      (HVALRELOPERATOR)
-      (HASSIGN)))
-   'nil)
-  "Table of lexical tokens.")
-
-(defconst wisent-cim-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((HACTIVATE HAFTER HARRAY HAT HBEFORE HBEGIN HBOOLEAN HCHARACTER HCLASS HCONC HDELAY HDO HELSE HEND HEQ HEXTERNAL HFOR HGE HGO HGOTO HGT HHIDDEN HIF HIN HINNER HINSPECT HINTEGER HIS HLABEL HLE HLONG HLT HNAME HNE HNEW HNONE HNOTEXT HOTHERWISE HPRIOR HPROCEDURE HPROTECTED HQUA HREACTIVATE HREAL HREF HSHORT HSTEP HSWITCH HTEXT HTHEN HTHIS HTO HUNTIL HVALUE HVAR HVIRTUAL HWHEN HWHILE HASSIGNVALUE HASSIGNREF HPAREXPSEPARATOR HLABELSEPARATOR HSTATEMENTSEPARATOR HBEGPAR HENDPAR HEQR HNER HADD HSUB HMUL HDIV HINTDIV HEXP HDOTDOTDOT HIDENTIFIER HBOOLEANKONST HINTEGERKONST HCHARACTERKONST HREALKONST HTEXTKONST)
-       ((right HASSIGN)
-	(left HORELSE)
-	(left HANDTHEN)
-	(left HEQV)
-	(left HIMP)
-	(left HOR)
-	(left HAND)
-	(left HNOT)
-	(left HVALRELOPERATOR HREFRELOPERATOR HOBJRELOPERATOR)
-	(left HCONC)
-	(left HTERMOPERATOR)
-	(left UNEAR)
-	(left HFACTOROPERATOR)
-	(left HPRIMARYOPERATOR)
-	(left HQUA)
-	(left HDOT))
-       (MAIN_MODULE
-	(((progn)
-	  MODULS)
-	 (progn))
-	((error HSTATEMENTSEPARATOR MBEE_DECLSTMS)))
-       (EXT_DECLARATION
-	((HEXTERNAL MBEE_TYPE HPROCEDURE
-		    (progn)
-		    EXT_LIST))
-	((HEXTERNAL HIDENTIFIER HPROCEDURE
-		    (progn)
-		    HIDENTIFIER
-		    (progn)
-		    EXTERNAL_KIND_ITEM)
-	 (progn))
-	((HEXTERNAL HCLASS
-		    (progn)
-		    EXT_LIST)))
-       (EXTERNAL_KIND_ITEM
-	((EXT_IDENT HOBJRELOPERATOR
-		    (progn)
-		    MBEE_TYPE HPROCEDURE HIDENTIFIER
-		    (progn)
-		    HEADING EMPTY_BLOCK)
-	 (progn)))
-       (EMPTY_BLOCK
-	(nil)
-	((HBEGIN HEND)))
-       (EXT_LIST
-	((EXT_ITEM))
-	((EXT_LIST HPAREXPSEPARATOR EXT_ITEM)))
-       (EXT_ITEM
-	((HIDENTIFIER EXT_IDENT)
-	 (progn)))
-       (EXT_IDENT
-	(nil
-	 (progn))
-	((HVALRELOPERATOR
-	  (progn)
-	  HTEXTKONST)
-	 (progn)))
-       (NO_TYPE
-	(nil
-	 (progn)))
-       (MBEE_TYPE
-	((NO_TYPE))
-	((TYPE)))
-       (TYPE
-	((HREF HBEGPAR HIDENTIFIER
-	       (progn)
-	       HENDPAR))
-	((HTEXT)
-	 (progn))
-	((HBOOLEAN)
-	 (progn))
-	((HCHARACTER)
-	 (progn))
-	((HSHORT HINTEGER)
-	 (progn))
-	((HINTEGER)
-	 (progn))
-	((HREAL)
-	 (progn))
-	((HLONG HREAL)
-	 (progn)))
-       (MBEE_ELSE_PART
-	(nil)
-	((HELSE
-	  (progn)
-	  BLOCK)
-	 (progn)))
-       (FOR_LIST
-	((FOR_LIST_ELEMENT)
-	 (progn))
-	((FOR_LIST_ELEMENT HPAREXPSEPARATOR FOR_LIST)
-	 (progn)))
-       (FOR_LIST_ELEMENT
-	((EXPRESSION MBEE_F_L_EL_R_PT)))
-       (MBEE_F_L_EL_R_PT
-	(nil)
-	((HWHILE EXPRESSION)
-	 (progn))
-	((HSTEP EXPRESSION HUNTIL EXPRESSION)
-	 (progn)))
-       (GOTO
-	((HGO HTO))
-	((HGOTO)))
-       (CONN_STATE_R_PT
-	((WHEN_CLAUSE_LIST))
-	((HDO
-	  (progn)
-	  BLOCK)
-	 (progn)))
-       (WHEN_CLAUSE_LIST
-	((HWHEN HIDENTIFIER HDO
-		(progn)
-		BLOCK)
-	 (progn))
-	((WHEN_CLAUSE_LIST HWHEN HIDENTIFIER HDO
-			   (progn)
-			   BLOCK)
-	 (progn)))
-       (MBEE_OTWI_CLAUS
-	(nil)
-	((HOTHERWISE
-	  (progn)
-	  BLOCK)
-	 (progn)))
-       (ACTIVATOR
-	((HACTIVATE)
-	 (progn))
-	((HREACTIVATE)
-	 (progn)))
-       (SCHEDULE
-	(nil
-	 (progn))
-	((ATDELAY EXPRESSION
-		  (progn)
-		  PRIOR))
-	((BEFOREAFTER
-	  (progn)
-	  EXPRESSION)
-	 (progn)))
-       (ATDELAY
-	((HAT)
-	 (progn))
-	((HDELAY)
-	 (progn)))
-       (BEFOREAFTER
-	((HBEFORE)
-	 (progn))
-	((HAFTER)
-	 (progn)))
-       (PRIOR
-	(nil
-	 (progn))
-	((HPRIOR)
-	 (progn)))
-       (MODULSTATEMENT
-	((HWHILE EXPRESSION HDO
-		 (progn)
-		 BLOCK)
-	 (progn))
-	((HIF EXPRESSION HTHEN
-	      (progn)
-	      BLOCK
-	      (progn)
-	      MBEE_ELSE_PART)
-	 (progn))
-	((HFOR HIDENTIFIER HASSIGN
-	       (progn)
-	       FOR_LIST HDO
-	       (progn)
-	       BLOCK)
-	 (progn))
-	((GOTO EXPRESSION)
-	 (progn))
-	((HINSPECT EXPRESSION
-		   (progn)
-		   CONN_STATE_R_PT
-		   (progn)
-		   MBEE_OTWI_CLAUS)
-	 (progn))
-	((HINNER)
-	 (progn))
-	((HIDENTIFIER HLABELSEPARATOR
-		      (progn)
-		      DECLSTATEMENT)
-	 (progn))
-	((EXPRESSION_SIMP HBEGIN
-			  (progn)
-			  IMPORT_SPEC_MODULE
-			  (progn)
-			  MBEE_DECLSTMS HEND)
-	 (progn))
-	((EXPRESSION_SIMP HBEGIN error HSTATEMENTSEPARATOR MBEE_DECLSTMS HEND)
-	 (progn))
-	((EXPRESSION_SIMP HBEGIN error HEND)
-	 (progn))
-	((EXPRESSION_SIMP)
-	 (progn))
-	((ACTIVATOR EXPRESSION SCHEDULE)
-	 (progn))
-	((HBEGIN
-	  (progn)
-	  MBEE_DECLSTMS HEND)
-	 (progn))
-	((MBEE_TYPE HPROCEDURE HIDENTIFIER
-		    (progn)
-		    HEADING BLOCK)
-	 (progn))
-	((HIDENTIFIER HCLASS NO_TYPE
-		      (progn)
-		      IMPORT_SPEC_MODULE HIDENTIFIER
-		      (progn)
-		      HEADING BLOCK)
-	 (progn))
-	((HCLASS NO_TYPE HIDENTIFIER
-		 (progn)
-		 HEADING BLOCK)
-	 (progn))
-	((EXT_DECLARATION)
-	 (progn))
-	(nil
-	 (progn)))
-       (IMPORT_SPEC_MODULE
-	(nil
-	 (progn)))
-       (DECLSTATEMENT
-	((MODULSTATEMENT))
-	((TYPE HIDENTIFIER MBEE_CONSTANT HPAREXPSEPARATOR
-	       (progn)
-	       IDENTIFIER_LISTC)
-	 (progn))
-	((TYPE HIDENTIFIER MBEE_CONSTANT)
-	 (progn))
-	((MBEE_TYPE HARRAY
-		    (progn)
-		    ARR_SEGMENT_LIST)
-	 (progn))
-	((HSWITCH HIDENTIFIER HASSIGN
-		  (progn)
-		  SWITCH_LIST)
-	 (progn)))
-       (BLOCK
-	((DECLSTATEMENT)
-	 (progn))
-	((HBEGIN MBEE_DECLSTMS HEND))
-	((HBEGIN error HSTATEMENTSEPARATOR MBEE_DECLSTMS HEND))
-	((HBEGIN error HEND)))
-       (MBEE_DECLSTMS
-	((MBEE_DECLSTMSU)
-	 (progn)))
-       (MBEE_DECLSTMSU
-	((DECLSTATEMENT)
-	 (progn))
-	((MBEE_DECLSTMSU HSTATEMENTSEPARATOR DECLSTATEMENT)
-	 (progn)))
-       (MODULS
-	((MODULSTATEMENT)
-	 (progn))
-	((MODULS HSTATEMENTSEPARATOR MODULSTATEMENT)
-	 (progn)))
-       (ARR_SEGMENT_LIST
-	((ARR_SEGMENT))
-	((ARR_SEGMENT_LIST HPAREXPSEPARATOR ARR_SEGMENT)))
-       (ARR_SEGMENT
-	((ARRAY_SEGMENT HBEGPAR BAUND_PAIR_LIST HENDPAR)
-	 (progn)))
-       (ARRAY_SEGMENT
-	((ARRAY_SEGMENT_EL)
-	 (progn))
-	((ARRAY_SEGMENT_EL HPAREXPSEPARATOR ARRAY_SEGMENT)
-	 (progn)))
-       (ARRAY_SEGMENT_EL
-	((HIDENTIFIER)
-	 (progn)))
-       (BAUND_PAIR_LIST
-	((BAUND_PAIR)
-	 (progn))
-	((BAUND_PAIR HPAREXPSEPARATOR BAUND_PAIR_LIST)
-	 (progn)))
-       (BAUND_PAIR
-	((EXPRESSION HLABELSEPARATOR EXPRESSION)
-	 (progn)))
-       (SWITCH_LIST
-	((EXPRESSION)
-	 (progn))
-	((EXPRESSION HPAREXPSEPARATOR SWITCH_LIST)
-	 (progn)))
-       (HEADING
-	((MBEE_FMAL_PAR_P HSTATEMENTSEPARATOR
-			  (progn)
-			  MBEE_MODE_PART
-			  (progn)
-			  MBEE_SPEC_PART
-			  (progn)
-			  MBEE_PROT_PART
-			  (progn)
-			  MBEE_VIRT_PART)
-	 (progn)))
-       (MBEE_FMAL_PAR_P
-	(nil)
-	((FMAL_PAR_PART)))
-       (FMAL_PAR_PART
-	((HBEGPAR NO_TYPE MBEE_LISTV HENDPAR)))
-       (MBEE_LISTV
-	(nil)
-	((LISTV)))
-       (LISTV
-	((HIDENTIFIER)
-	 (progn))
-	((FPP_CATEG HDOTDOTDOT)
-	 (progn))
-	((HIDENTIFIER
-	  (progn)
-	  HPAREXPSEPARATOR LISTV))
-	((FPP_SPEC))
-	((FPP_SPEC HPAREXPSEPARATOR LISTV)))
-       (FPP_HEADING
-	((HBEGPAR NO_TYPE FPP_MBEE_LISTV HENDPAR)))
-       (FPP_MBEE_LISTV
-	(nil)
-	((FPP_LISTV)))
-       (FPP_LISTV
-	((FPP_CATEG HDOTDOTDOT)
-	 (progn))
-	((FPP_SPEC))
-	((FPP_SPEC HPAREXPSEPARATOR LISTV)))
-       (FPP_SPEC
-	((FPP_CATEG SPECIFIER HIDENTIFIER)
-	 (progn))
-	((FPP_CATEG FPP_PROC_DECL_IN_SPEC)))
-       (FPP_CATEG
-	((HNAME HLABELSEPARATOR)
-	 (progn))
-	((HVALUE HLABELSEPARATOR)
-	 (progn))
-	((HVAR HLABELSEPARATOR)
-	 (progn))
-	(nil))
-       (FPP_PROC_DECL_IN_SPEC
-	((MBEE_TYPE HPROCEDURE HIDENTIFIER
-		    (progn)
-		    FPP_HEADING
-		    (progn))
-	 (progn)))
-       (IDENTIFIER_LISTV
-	((HIDENTIFIER)
-	 (progn))
-	((HDOTDOTDOT)
-	 (progn))
-	((HIDENTIFIER
-	  (progn)
-	  HPAREXPSEPARATOR IDENTIFIER_LISTV)))
-       (MBEE_MODE_PART
-	(nil)
-	((MODE_PART)))
-       (MODE_PART
-	((NAME_PART))
-	((VALUE_PART))
-	((VAR_PART))
-	((NAME_PART VALUE_PART))
-	((VALUE_PART NAME_PART))
-	((NAME_PART VAR_PART))
-	((VAR_PART NAME_PART))
-	((VALUE_PART VAR_PART))
-	((VAR_PART VALUE_PART))
-	((VAR_PART NAME_PART VALUE_PART))
-	((NAME_PART VAR_PART VALUE_PART))
-	((NAME_PART VALUE_PART VAR_PART))
-	((VAR_PART VALUE_PART NAME_PART))
-	((VALUE_PART VAR_PART NAME_PART))
-	((VALUE_PART NAME_PART VAR_PART)))
-       (NAME_PART
-	((HNAME
-	  (progn)
-	  IDENTIFIER_LISTV HSTATEMENTSEPARATOR)))
-       (VAR_PART
-	((HVAR
-	  (progn)
-	  IDENTIFIER_LISTV HSTATEMENTSEPARATOR)))
-       (VALUE_PART
-	((HVALUE
-	  (progn)
-	  IDENTIFIER_LISTV HSTATEMENTSEPARATOR)))
-       (MBEE_SPEC_PART
-	(nil)
-	((SPEC_PART)))
-       (SPEC_PART
-	((ONE_SPEC))
-	((SPEC_PART ONE_SPEC)))
-       (ONE_SPEC
-	((SPECIFIER IDENTIFIER_LIST HSTATEMENTSEPARATOR))
-	((NO_TYPE HPROCEDURE HIDENTIFIER HOBJRELOPERATOR
-		  (progn)
-		  PROC_DECL_IN_SPEC HSTATEMENTSEPARATOR))
-	((FPP_PROC_DECL_IN_SPEC HSTATEMENTSEPARATOR))
-	((MBEE_TYPE HPROCEDURE HIDENTIFIER HSTATEMENTSEPARATOR)
-	 (progn))
-	((MBEE_TYPE HPROCEDURE HIDENTIFIER HPAREXPSEPARATOR IDENTIFIER_LIST HSTATEMENTSEPARATOR)
-	 (progn)))
-       (SPECIFIER
-	((TYPE)
-	 (progn))
-	((MBEE_TYPE HARRAY)
-	 (progn))
-	((HLABEL)
-	 (progn))
-	((HSWITCH)
-	 (progn)))
-       (PROC_DECL_IN_SPEC
-	((MBEE_TYPE HPROCEDURE HIDENTIFIER
-		    (progn)
-		    HEADING
-		    (progn)
-		    MBEE_BEGIN_END)
-	 (progn)))
-       (MBEE_BEGIN_END
-	(nil)
-	((HBEGIN HEND)))
-       (MBEE_PROT_PART
-	(nil)
-	((PROTECTION_PART)))
-       (PROTECTION_PART
-	((PROT_SPECIFIER IDENTIFIER_LIST HSTATEMENTSEPARATOR))
-	((PROTECTION_PART PROT_SPECIFIER IDENTIFIER_LIST HSTATEMENTSEPARATOR)))
-       (PROT_SPECIFIER
-	((HHIDDEN)
-	 (progn))
-	((HPROTECTED)
-	 (progn))
-	((HHIDDEN HPROTECTED)
-	 (progn))
-	((HPROTECTED HHIDDEN)
-	 (progn)))
-       (MBEE_VIRT_PART
-	(nil)
-	((VIRTUAL_PART)))
-       (VIRTUAL_PART
-	((HVIRTUAL HLABELSEPARATOR MBEE_SPEC_PART)))
-       (IDENTIFIER_LIST
-	((HIDENTIFIER)
-	 (progn))
-	((IDENTIFIER_LIST HPAREXPSEPARATOR HIDENTIFIER)
-	 (progn)))
-       (IDENTIFIER_LISTC
-	((HIDENTIFIER MBEE_CONSTANT)
-	 (progn))
-	((IDENTIFIER_LISTC HPAREXPSEPARATOR HIDENTIFIER MBEE_CONSTANT)
-	 (progn)))
-       (MBEE_CONSTANT
-	(nil)
-	((HVALRELOPERATOR
-	  (progn)
-	  EXPRESSION)
-	 (progn)))
-       (EXPRESSION
-	((EXPRESSION_SIMP)
-	 (progn))
-	((HIF EXPRESSION HTHEN EXPRESSION HELSE EXPRESSION)
-	 (progn)))
-       (EXPRESSION_SIMP
-	((EXPRESSION_SIMP HASSIGN EXPRESSION)
-	 (progn))
-	((EXPRESSION_SIMP HCONC EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HOR HELSE EXPRESSION_SIMP)
-	 [HORELSE]
-	 (progn))
-	((EXPRESSION_SIMP HAND HTHEN EXPRESSION_SIMP)
-	 [HANDTHEN]
-	 (progn))
-	((EXPRESSION_SIMP HEQV EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HIMP EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HOR EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HAND EXPRESSION_SIMP)
-	 (progn))
-	((HNOT EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HVALRELOPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HREFRELOPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HOBJRELOPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((HTERMOPERATOR EXPRESSION_SIMP)
-	 [UNEAR]
-	 (progn))
-	((EXPRESSION_SIMP HTERMOPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HFACTOROPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HPRIMARYOPERATOR EXPRESSION_SIMP)
-	 (progn))
-	((HBEGPAR EXPRESSION HENDPAR)
-	 (progn))
-	((HTEXTKONST)
-	 (progn))
-	((HCHARACTERKONST)
-	 (progn))
-	((HREALKONST)
-	 (progn))
-	((HINTEGERKONST)
-	 (progn))
-	((HBOOLEANKONST)
-	 (progn))
-	((HNONE)
-	 (progn))
-	((HIDENTIFIER
-	  (progn)
-	  MBEE_ARG_R_PT))
-	((HTHIS HIDENTIFIER)
-	 (progn))
-	((HNEW HIDENTIFIER ARG_R_PT)
-	 (progn))
-	((EXPRESSION_SIMP HDOT EXPRESSION_SIMP)
-	 (progn))
-	((EXPRESSION_SIMP HQUA HIDENTIFIER)
-	 (progn)))
-       (ARG_R_PT
-	(nil
-	 (progn))
-	((HBEGPAR ARGUMENT_LIST HENDPAR)))
-       (MBEE_ARG_R_PT
-	(nil
-	 (progn))
-	((HBEGPAR ARGUMENT_LIST HENDPAR)
-	 (progn)))
-       (ARGUMENT_LIST
-	((EXPRESSION)
-	 (progn))
-	((EXPRESSION HPAREXPSEPARATOR ARGUMENT_LIST)
-	 (progn))))
-     '(MAIN_MODULE)))
-  "Parser table.")
-
-(defun wisent-cim-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-cim-wy--parse-table
-	semantic-debug-parser-source "wisent-cim.wy"
-	semantic-flex-keywords-obarray wisent-cim-wy--keyword-table
-	semantic-lex-types-obarray wisent-cim-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-
-;;; Epilogue
-;;
-
-
-
-
-(provide 'wisent-cim-wy)
-
-;;; wisent-cim-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-comp.elc b/elisp/cedet-1.1/semantic/wisent/wisent-comp.elc
index 0c14936..e7509a9 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-comp.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-comp.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-debug.elc b/elisp/cedet-1.1/semantic/wisent/wisent-debug.elc
index 282d82c..c7cdf96 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-debug.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-debug.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-expr.elc b/elisp/cedet-1.1/semantic/wisent/wisent-expr.elc
index 7607434..80b0bb5 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-expr.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-expr.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-grammar-macros.elc b/elisp/cedet-1.1/semantic/wisent/wisent-grammar-macros.elc
index 3f84793..3cee6ac 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-grammar-macros.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-grammar-macros.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-grammar.elc b/elisp/cedet-1.1/semantic/wisent/wisent-grammar.elc
index eddf100..b6a9d20 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-grammar.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-grammar.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-java-tags-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-java-tags-wy.el~
deleted file mode 100644
index 6406009..0000000
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-java-tags-wy.el~ and /dev/null differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-java-tags.elc b/elisp/cedet-1.1/semantic/wisent/wisent-java-tags.elc
index f44527c..053f945 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-java-tags.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-java-tags.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-java-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-java-wy.el~
deleted file mode 100644
index 492b090..0000000
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-java-wy.el~ and /dev/null differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-java.elc b/elisp/cedet-1.1/semantic/wisent/wisent-java.elc
index 7c023c4..fcc4f87 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-java.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-java.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-javascript-jv-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-javascript-jv-wy.el~
deleted file mode 100644
index ca0d050..0000000
--- a/elisp/cedet-1.1/semantic/wisent/wisent-javascript-jv-wy.el~
+++ /dev/null
@@ -1,499 +0,0 @@
-;;; wisent-javascript-jv-wy.el --- Generated parser support file
-
-;; Copyright (C) 2005-2011 Free Software Foundation, Inc.
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2011-08-02 20:36:24-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-javascript-jv.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-javascript-jv-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("if" . IF)
-     ("break" . BREAK)
-     ("continue" . CONTINUE)
-     ("else" . ELSE)
-     ("for" . FOR)
-     ("function" . FUNCTION)
-     ("this" . THIS)
-     ("return" . RETURN)
-     ("while" . WHILE)
-     ("void" . VOID_SYMBOL)
-     ("new" . NEW)
-     ("delete" . DELETE)
-     ("var" . VAR)
-     ("with" . WITH)
-     ("typeof" . TYPEOF)
-     ("in" . IN))
-   '(("in" summary "in something")
-     ("typeof" summary "typeof ")
-     ("with" summary "with ")
-     ("var" summary "var <variablename> [= value];")
-     ("delete" summary "delete(<objectreference>) - Deletes the object.")
-     ("new" summary "new <objecttype> - Creates a new object.")
-     ("void" summary "Method return type: void <name> ...")
-     ("while" summary "while (<expr>) <stmt> | do <stmt> while (<expr>);")
-     ("return" summary "return [<expr>] ;")
-     ("this" summary "this")
-     ("function" summary "function declaration blah blah")
-     ("for" summary "for ([<init-expr>]; [<expr>]; [<update-expr>]) <stmt>")
-     ("else" summary "if (<expr>) <stmt> else <stmt>")
-     ("continue" summary "continue [<label>] ;")
-     ("break" summary "break [<label>] ;")
-     ("if" summary "if (<expr>) <stmt> [else <stmt>] (jv)")))
-  "Table of language keywords.")
-
-(defconst wisent-javascript-jv-wy--token-table
-  (semantic-lex-make-type-table
-   '(("<no-type>"
-      (NULL_TOKEN)
-      (QUERY)
-      (TRUE)
-      (FALSE))
-     ("number"
-      (NUMBER))
-     ("string"
-      (STRING))
-     ("symbol"
-      (VARIABLE))
-     ("close-paren"
-      (CLOSE_SQ_BRACKETS . "]")
-      (END_BLOCK . "}")
-      (CLOSE_PARENTHESIS . ")"))
-     ("open-paren"
-      (OPEN_SQ_BRACKETS . "[")
-      (START_BLOCK . "{")
-      (OPEN_PARENTHESIS . "("))
-     ("block"
-      (BRACK_BLOCK . "(OPEN_SQ_BRACKETS CLOSE_SQ_BRACKETS)")
-      (BRACE_BLOCK . "(START_BLOCK END_BLOCK)")
-      (PAREN_BLOCK . "(OPEN_PARENTHESIS CLOSE_PARENTHESIS)"))
-     ("punctuation"
-      (ONES_COMPLIMENT . "~")
-      (SEMICOLON . ";")
-      (LINE_TERMINATOR . "\n")
-      (LESS_THAN . "<")
-      (DOT . ".")
-      (COMMA . ",")
-      (COLON . ":")
-      (DIV . "/")
-      (DECREMENT . "--")
-      (INCREMENT . "++")
-      (PLUS_EQUALS . "+=")
-      (PLUS . "+")
-      (MULTIPLY_EQUALS . "*=")
-      (MULTIPLY . "*")
-      (MOD_EQUALS . "%=")
-      (MOD . "%")
-      (MINUS_EQUALS . "-=")
-      (MINUS . "-")
-      (LS_EQUAL . "<=")
-      (LOGICAL_NOT . "!!")
-      (LOGICAL_OR . "||")
-      (LOGICAL_AND . "&&")
-      (GT_EQUAL . ">=")
-      (GREATER_THAN . ">")
-      (EQUALS . "==")
-      (DIV_EQUALS . "/=")
-      (NOT_EQUAL . "!=")
-      (BITWISE_SHIFT_RIGHT_ZERO_FILL_EQUALS . ">>>=")
-      (BITWISE_SHIFT_RIGHT_ZERO_FILL . ">>>")
-      (BITWISE_SHIFT_RIGHT_EQUALS . ">>=")
-      (BITWISE_SHIFT_RIGHT . ">>")
-      (BITWISE_SHIFT_LEFT_EQUALS . "<<=")
-      (BITWISE_SHIFT_LEFT . "<<")
-      (BITWISE_OR_EQUALS . "|=")
-      (BITWISE_OR . "|")
-      (BITWISE_EXCLUSIVE_OR_EQUALS . "^=")
-      (BITWISE_EXCLUSIVE_OR . "^")
-      (BITWISE_AND_EQUALS . "&=")
-      (BITWISE_AND . "&")
-      (ASSIGN_SYMBOL . "=")))
-   '(("number" :declared t)
-     ("string" :declared t)
-     ("symbol" :declared t)
-     ("keyword" :declared t)
-     ("block" :declared t)
-     ("punctuation" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst wisent-javascript-jv-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((ASSIGN_SYMBOL BITWISE_AND BITWISE_AND_EQUALS BITWISE_EXCLUSIVE_OR BITWISE_EXCLUSIVE_OR_EQUALS BITWISE_OR BITWISE_OR_EQUALS BITWISE_SHIFT_LEFT BITWISE_SHIFT_LEFT_EQUALS BITWISE_SHIFT_RIGHT BITWISE_SHIFT_RIGHT_EQUALS BITWISE_SHIFT_RIGHT_ZERO_FILL BITWISE_SHIFT_RIGHT_ZERO_FILL_EQUALS NOT_EQUAL DIV_EQUALS EQUALS GREATER_THAN GT_EQUAL LOGICAL_AND LOGICAL_OR LOGICAL_NOT LS_EQUAL MINUS MINUS_EQUALS MOD MOD_EQUALS MULTIPLY MULTIPLY_EQUALS PLUS PLUS_EQUALS INCREMENT DECREMENT DIV COLON COMMA DOT LESS_THAN LINE_TERMINATOR SEMICOLON ONES_COMPLIMENT PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK OPEN_PARENTHESIS CLOSE_PARENTHESIS START_BLOCK END_BLOCK OPEN_SQ_BRACKETS CLOSE_SQ_BRACKETS IF BREAK CONTINUE ELSE FOR FUNCTION THIS RETURN WHILE VOID_SYMBOL NEW DELETE VAR WITH TYPEOF IN VARIABLE STRING NUMBER FALSE TRUE QUERY NULL_TOKEN)
-       ((left PLUS MINUS)
-	(left MULTIPLY DIV MOD)
-	(nonassoc FALSE)
-	(nonassoc HIGHER_THAN_FALSE)
-	(nonassoc ELSE)
-	(nonassoc LOWER_THAN_CLOSE_PARENTHESIS)
-	(nonassoc CLOSE_PARENTHESIS))
-       (Program
-	((SourceElement)))
-       (SourceElement
-	((Statement))
-	((FunctionDeclaration)))
-       (Statement
-	((Block))
-	((VariableStatement))
-	((EmptyStatement))
-	((ExpressionStatement))
-	((IfStatement))
-	((IterationExpression))
-	((ContinueStatement))
-	((BreakStatement))
-	((ReturnStatement))
-	((WithStatement)))
-       (FunctionDeclaration
-	((FUNCTION VARIABLE FormalParameterListBlock Block)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function $2 nil $3))))
-       (FormalParameterListBlock
-	((PAREN_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'FormalParameterList 1)))
-       (FormalParameterList
-	((OPEN_PARENTHESIS)
-	 nil)
-	((VARIABLE)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil)))
-	((CLOSE_PARENTHESIS)
-	 nil)
-	((COMMA)
-	 nil))
-       (StatementList
-	((Statement))
-	((StatementList Statement)))
-       (Block
-	((BRACE_BLOCK)))
-       (BlockExpand
-	((START_BLOCK StatementList END_BLOCK))
-	((START_BLOCK END_BLOCK)))
-       (VariableStatement
-	((VAR VariableDeclarationList SEMICOLON)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil nil))))
-       (VariableDeclarationList
-	((VariableDeclaration)
-	 (list $1))
-	((VariableDeclarationList COMMA VariableDeclaration)
-	 (append $1
-		 (list $3))))
-       (VariableDeclaration
-	((VARIABLE)
-	 (append
-	  (list $1 nil)
-	  $region))
-	((VARIABLE Initializer)
-	 (append
-	  (cons $1 $2)
-	  $region)))
-       (Initializer
-	((ASSIGN_SYMBOL AssignmentExpression)
-	 (list $2)))
-       (EmptyStatement
-	((SEMICOLON)))
-       (ExpressionStatement
-	((Expression SEMICOLON)))
-       (IfStatement
-	((IF OPEN_PARENTHESIS Expression CLOSE_PARENTHESIS Statement)
-	 [HIGHER_THAN_FALSE])
-	((IF OPEN_PARENTHESIS Expression CLOSE_PARENTHESIS Statement ELSE Statement))
-	((IF OPEN_PARENTHESIS FALSE CLOSE_PARENTHESIS Statement))
-	((IF OPEN_PARENTHESIS LeftHandSideExpression AssignmentOperator AssignmentExpression CLOSE_PARENTHESIS Statement)))
-       (IterationExpression
-	((WHILE OPEN_PARENTHESIS Expression CLOSE_PARENTHESIS Statement)
-	 [HIGHER_THAN_FALSE])
-	((WHILE OPEN_PARENTHESIS FALSE CLOSE_PARENTHESIS Statement))
-	((WHILE OPEN_PARENTHESIS LeftHandSideExpression AssignmentOperator AssignmentExpression CLOSE_PARENTHESIS Statement))
-	((FOR OPEN_PARENTHESIS OptionalExpression SEMICOLON OptionalExpression SEMICOLON OptionalExpression CLOSE_PARENTHESIS Statement))
-	((FOR OPEN_PARENTHESIS VAR VariableDeclarationList SEMICOLON OptionalExpression SEMICOLON OptionalExpression CLOSE_PARENTHESIS Statement))
-	((FOR OPEN_PARENTHESIS LeftHandSideExpression IN Expression CLOSE_PARENTHESIS Statement))
-	((FOR OPEN_PARENTHESIS VAR VARIABLE OptionalInitializer IN Expression CLOSE_PARENTHESIS Statement)))
-       (ContinueStatement
-	((CONTINUE SEMICOLON)))
-       (BreakStatement
-	((BREAK SEMICOLON)))
-       (ReturnStatement
-	((RETURN Expression SEMICOLON))
-	((RETURN SEMICOLON)))
-       (WithStatement
-	((WITH OPEN_PARENTHESIS Expression CLOSE_PARENTHESIS Statement)))
-       (OptionalInitializer
-	((Initializer))
-	(nil))
-       (PrimaryExpression
-	((THIS))
-	((VARIABLE))
-	((NUMBER))
-	((STRING))
-	((NULL_TOKEN))
-	((TRUE))
-	((FALSE))
-	((OPEN_PARENTHESIS Expression CLOSE_PARENTHESIS)))
-       (MemberExpression
-	((PrimaryExpression))
-	((MemberExpression OPEN_SQ_BRACKETS Expression CLOSE_SQ_BRACKETS))
-	((MemberExpression DOT VARIABLE))
-	((NEW MemberExpression Arguments)))
-       (NewExpression
-	((MemberExpression))
-	((NEW NewExpression)))
-       (CallExpression
-	((MemberExpression Arguments))
-	((CallExpression Arguments))
-	((CallExpression OPEN_SQ_BRACKETS Expression CLOSE_SQ_BRACKETS))
-	((CallExpression DOT VARIABLE)))
-       (Arguments
-	((OPEN_PARENTHESIS CLOSE_PARENTHESIS))
-	((OPEN_PARENTHESIS ArgumentList CLOSE_PARENTHESIS)))
-       (ArgumentList
-	((AssignmentExpression))
-	((ArgumentList COMMA AssignmentExpression)))
-       (LeftHandSideExpression
-	((NewExpression))
-	((CallExpression)))
-       (PostfixExpression
-	((LeftHandSideExpression))
-	((LeftHandSideExpression INCREMENT))
-	((LeftHandSideExpression DECREMENT)))
-       (UnaryExpression
-	((PostfixExpression))
-	((DELETE UnaryExpression))
-	((VOID_SYMBOL UnaryExpression))
-	((TYPEOF UnaryExpression))
-	((INCREMENT UnaryExpression))
-	((DECREMENT UnaryExpression))
-	((PLUS UnaryExpression))
-	((MINUS UnaryExpression))
-	((ONES_COMPLIMENT UnaryExpression))
-	((LOGICAL_NOT UnaryExpression)))
-       (MultiplicativeExpression
-	((UnaryExpression))
-	((MultiplicativeExpression MULTIPLY UnaryExpression))
-	((MultiplicativeExpression DIV UnaryExpression))
-	((MultiplicativeExpression MOD UnaryExpression)))
-       (AdditiveExpression
-	((MultiplicativeExpression))
-	((AdditiveExpression PLUS MultiplicativeExpression))
-	((AdditiveExpression MINUS MultiplicativeExpression)))
-       (ShiftExpression
-	((AdditiveExpression))
-	((ShiftExpression BITWISE_SHIFT_LEFT AdditiveExpression))
-	((ShiftExpression BITWISE_SHIFT_RIGHT AdditiveExpression))
-	((ShiftExpression BITWISE_SHIFT_RIGHT_ZERO_FILL AdditiveExpression)))
-       (RelationalExpression
-	((ShiftExpression))
-	((RelationalExpression LESS_THAN ShiftExpression))
-	((RelationalExpression GREATER_THAN ShiftExpression))
-	((RelationalExpression LS_EQUAL ShiftExpression))
-	((RelationalExpression GT_EQUAL ShiftExpression)))
-       (EqualityExpression
-	((RelationalExpression))
-	((EqualityExpression EQUALS RelationalExpression))
-	((EqualityExpression NOT_EQUAL RelationalExpression)))
-       (BitwiseANDExpression
-	((EqualityExpression))
-	((BitwiseANDExpression BITWISE_AND EqualityExpression)))
-       (BitwiseXORExpression
-	((BitwiseANDExpression))
-	((BitwiseXORExpression BITWISE_EXCLUSIVE_OR BitwiseANDExpression)))
-       (BitwiseORExpression
-	((BitwiseXORExpression))
-	((BitwiseORExpression BITWISE_OR BitwiseXORExpression)))
-       (LogicalANDExpression
-	((BitwiseORExpression))
-	((LogicalANDExpression LOGICAL_AND BitwiseORExpression)))
-       (LogicalORExpression
-	((LogicalANDExpression))
-	((LogicalORExpression LOGICAL_OR LogicalANDExpression)))
-       (ConditionalExpression
-	((LogicalORExpression))
-	((LogicalORExpression QUERY AssignmentExpression COLON AssignmentExpression)))
-       (AssignmentExpression
-	((ConditionalExpression))
-	((LeftHandSideExpression AssignmentOperator AssignmentExpression)
-	 [LOWER_THAN_CLOSE_PARENTHESIS]))
-       (AssignmentOperator
-	((ASSIGN_SYMBOL))
-	((MULTIPLY_EQUALS))
-	((DIV_EQUALS))
-	((MOD_EQUALS))
-	((PLUS_EQUALS))
-	((MINUS_EQUALS))
-	((BITWISE_SHIFT_LEFT_EQUALS))
-	((BITWISE_SHIFT_RIGHT_EQUALS))
-	((BITWISE_SHIFT_RIGHT_ZERO_FILL_EQUALS))
-	((BITWISE_AND_EQUALS))
-	((BITWISE_EXCLUSIVE_OR_EQUALS))
-	((BITWISE_OR_EQUALS)))
-       (Expression
-	((AssignmentExpression))
-	((Expression COMMA AssignmentExpression)))
-       (OptionalExpression
-	((Expression))
-	(nil)))
-     '(Program FormalParameterList)))
-  "Parser table.")
-
-(defun wisent-javascript-jv-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-javascript-jv-wy--parse-table
-	semantic-debug-parser-source "wisent-javascript-jv.wy"
-	semantic-flex-keywords-obarray wisent-javascript-jv-wy--keyword-table
-	semantic-lex-types-obarray wisent-javascript-jv-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-keyword-type-analyzer wisent-javascript-jv-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-block-type-analyzer wisent-javascript-jv-wy--<block>-block-analyzer
-  "block analyzer for <block> tokens."
-  "\\s(\\|\\s)"
-  '((("(" OPEN_PARENTHESIS PAREN_BLOCK)
-     ("{" START_BLOCK BRACE_BLOCK)
-     ("[" OPEN_SQ_BRACKETS BRACK_BLOCK))
-    (")" CLOSE_PARENTHESIS)
-    ("}" END_BLOCK)
-    ("]" CLOSE_SQ_BRACKETS))
-  )
-
-(define-lex-regex-type-analyzer wisent-javascript-jv-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  "\\(\\sw\\|\\s_\\)+"
-  nil
-  'VARIABLE)
-
-(define-lex-sexp-type-analyzer wisent-javascript-jv-wy--<string>-sexp-analyzer
-  "sexp analyzer for <string> tokens."
-  "\\s\""
-  'STRING)
-
-(define-lex-regex-type-analyzer wisent-javascript-jv-wy--<number>-regexp-analyzer
-  "regexp analyzer for <number> tokens."
-  semantic-lex-number-expression
-  nil
-  'NUMBER)
-
-(define-lex-string-type-analyzer wisent-javascript-jv-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\(\\s.\\|\\s$\\|\\s'\\)+"
-  '((ONES_COMPLIMENT . "~")
-    (SEMICOLON . ";")
-    (LINE_TERMINATOR . "\n")
-    (LESS_THAN . "<")
-    (DOT . ".")
-    (COMMA . ",")
-    (COLON . ":")
-    (DIV . "/")
-    (DECREMENT . "--")
-    (INCREMENT . "++")
-    (PLUS_EQUALS . "+=")
-    (PLUS . "+")
-    (MULTIPLY_EQUALS . "*=")
-    (MULTIPLY . "*")
-    (MOD_EQUALS . "%=")
-    (MOD . "%")
-    (MINUS_EQUALS . "-=")
-    (MINUS . "-")
-    (LS_EQUAL . "<=")
-    (LOGICAL_NOT . "!!")
-    (LOGICAL_OR . "||")
-    (LOGICAL_AND . "&&")
-    (GT_EQUAL . ">=")
-    (GREATER_THAN . ">")
-    (EQUALS . "==")
-    (DIV_EQUALS . "/=")
-    (NOT_EQUAL . "!=")
-    (BITWISE_SHIFT_RIGHT_ZERO_FILL_EQUALS . ">>>=")
-    (BITWISE_SHIFT_RIGHT_ZERO_FILL . ">>>")
-    (BITWISE_SHIFT_RIGHT_EQUALS . ">>=")
-    (BITWISE_SHIFT_RIGHT . ">>")
-    (BITWISE_SHIFT_LEFT_EQUALS . "<<=")
-    (BITWISE_SHIFT_LEFT . "<<")
-    (BITWISE_OR_EQUALS . "|=")
-    (BITWISE_OR . "|")
-    (BITWISE_EXCLUSIVE_OR_EQUALS . "^=")
-    (BITWISE_EXCLUSIVE_OR . "^")
-    (BITWISE_AND_EQUALS . "&=")
-    (BITWISE_AND . "&")
-    (ASSIGN_SYMBOL . "="))
-  'punctuation)
-
-
-;;; Epilogue
-;;
-;;here something like:
-;;(define-lex wisent-java-tags-lexer
-;; should go
-(define-lex javascript-lexer-jv
-"javascript thingy"
-;;std stuff
-  semantic-lex-ignore-whitespace
-  semantic-lex-ignore-newline
-  semantic-lex-ignore-comments
-
-  ;;stuff generated from the wy file(one for each "type" declaration)
-  wisent-javascript-jv-wy--<number>-regexp-analyzer
-  wisent-javascript-jv-wy--<string>-sexp-analyzer
-
-  wisent-javascript-jv-wy--<keyword>-keyword-analyzer
-
-  wisent-javascript-jv-wy--<symbol>-regexp-analyzer
-  wisent-javascript-jv-wy--<punctuation>-string-analyzer
-  wisent-javascript-jv-wy--<block>-block-analyzer
-
-
-  ;;;;more std stuff
-  semantic-lex-default-action
-  )
-
-(provide 'wisent-javascript-jv-wy)
-
-;;; wisent-javascript-jv-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-javascript.elc b/elisp/cedet-1.1/semantic/wisent/wisent-javascript.elc
index 407cedf..efa2d7b 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-javascript.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-javascript.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-python-wy.el~ b/elisp/cedet-1.1/semantic/wisent/wisent-python-wy.el~
deleted file mode 100644
index e81de58..0000000
--- a/elisp/cedet-1.1/semantic/wisent/wisent-python-wy.el~
+++ /dev/null
@@ -1,795 +0,0 @@
-;;; wisent-python-wy.el --- Generated parser support file
-
-;; Copyright (C) 2002, 2003, 2004, 2007, 2012 Richard Kim
-
-;; Author: Eric M. Ludlam <eric@siege-engine.com>
-;; Created: 2012-02-11 09:18:41-0500
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file wisent-python.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst wisent-python-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("and" . AND)
-     ("as" . AS)
-     ("assert" . ASSERT)
-     ("break" . BREAK)
-     ("class" . CLASS)
-     ("continue" . CONTINUE)
-     ("def" . DEF)
-     ("del" . DEL)
-     ("elif" . ELIF)
-     ("else" . ELSE)
-     ("except" . EXCEPT)
-     ("exec" . EXEC)
-     ("finally" . FINALLY)
-     ("for" . FOR)
-     ("from" . FROM)
-     ("global" . GLOBAL)
-     ("if" . IF)
-     ("import" . IMPORT)
-     ("in" . IN)
-     ("is" . IS)
-     ("lambda" . LAMBDA)
-     ("not" . NOT)
-     ("or" . OR)
-     ("pass" . PASS)
-     ("print" . PRINT)
-     ("raise" . RAISE)
-     ("return" . RETURN)
-     ("try" . TRY)
-     ("while" . WHILE)
-     ("with" . WITH)
-     ("yield" . YIELD))
-   '(("yield" summary "Create a generator function")
-     ("with" summary "Start statement with an associated context object")
-     ("while" summary "Start a 'while' loop")
-     ("try" summary "Start of statements protected by exception handlers")
-     ("return" summary "Return from a function")
-     ("raise" summary "Raise an exception")
-     ("print" summary "Print each argument to standard output")
-     ("pass" summary "Statement that does nothing")
-     ("or" summary "Binary logical 'or' operator")
-     ("not" summary "Unary boolean negation operator")
-     ("lambda" summary "Create anonymous function")
-     ("is" summary "Binary operator that tests for object equality")
-     ("in" summary "Part of 'for' statement ")
-     ("import" summary "Load specified modules")
-     ("if" summary "Start 'if' conditional statement")
-     ("global" summary "Declare one or more symbols as global symbols")
-     ("from" summary "Modify behavior of 'import' statement")
-     ("for" summary "Start a 'for' loop")
-     ("finally" summary "Specify code to be executed after 'try' statements whether or not an exception occurred")
-     ("exec" summary "Dynamically execute Python code")
-     ("except" summary "Specify exception handlers along with 'try' keyword")
-     ("else" summary "Start the 'else' clause following an 'if' statement")
-     ("elif" summary "Shorthand for 'else if' following an 'if' statement")
-     ("del" summary "Delete specified objects, i.e., undo what assignment did")
-     ("def" summary "Define a new function")
-     ("continue" summary "Skip to the next iteration of enclosing 'for' or 'while' loop")
-     ("class" summary "Define a new class")
-     ("break" summary "Terminate 'for' or 'while' loop")
-     ("assert" summary "Raise AssertionError exception if <expr> is false")
-     ("as" summary "EXPR as NAME makes value of EXPR available as variable NAME")
-     ("and" summary "Logical AND binary operator ... ")))
-  "Table of language keywords.")
-
-(defconst wisent-python-wy--token-table
-  (semantic-lex-make-type-table
-   '(("symbol"
-      (NAME))
-     ("number"
-      (NUMBER_LITERAL))
-     ("string"
-      (STRING_LITERAL))
-     ("punctuation"
-      (AT . "@")
-      (BACKQUOTE . "`")
-      (ASSIGN . "=")
-      (COMMA . ",")
-      (SEMICOLON . ";")
-      (COLON . ":")
-      (BAR . "|")
-      (TILDE . "~")
-      (PERIOD . ".")
-      (MINUS . "-")
-      (PLUS . "+")
-      (MOD . "%")
-      (DIV . "/")
-      (MULT . "*")
-      (AMP . "&")
-      (GT . ">")
-      (LT . "<")
-      (HAT . "^")
-      (NE . "!=")
-      (LTGT . "<>")
-      (HATEQ . "^=")
-      (OREQ . "|=")
-      (AMPEQ . "&=")
-      (MODEQ . "%=")
-      (DIVEQ . "/=")
-      (MULTEQ . "*=")
-      (MINUSEQ . "-=")
-      (PLUSEQ . "+=")
-      (LE . "<=")
-      (GE . ">=")
-      (EQ . "==")
-      (EXPONENT . "**")
-      (GTGT . ">>")
-      (LTLT . "<<")
-      (DIVDIV . "//")
-      (DIVDIVEQ . "//=")
-      (EXPEQ . "**=")
-      (GTGTEQ . ">>=")
-      (LTLTEQ . "<<="))
-     ("close-paren"
-      (RBRACK . "]")
-      (RBRACE . "}")
-      (RPAREN . ")"))
-     ("open-paren"
-      (LBRACK . "[")
-      (LBRACE . "{")
-      (LPAREN . "("))
-     ("block"
-      (BRACK_BLOCK . "(LBRACK RBRACK)")
-      (BRACE_BLOCK . "(LBRACE RBRACE)")
-      (PAREN_BLOCK . "(LPAREN RPAREN)"))
-     ("indentation"
-      (INDENT_BLOCK . "(INDENT DEDENT)")
-      (DEDENT . "[^:INDENT:]")
-      (INDENT . "^\\s-+"))
-     ("newline"
-      (NEWLINE . "\n"))
-     ("charquote"
-      (BACKSLASH . "\\")))
-   '(("keyword" :declared t)
-     ("symbol" :declared t)
-     ("number" :declared t)
-     ("punctuation" :declared t)
-     ("block" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst wisent-python-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((BACKSLASH NEWLINE INDENT DEDENT INDENT_BLOCK PAREN_BLOCK BRACE_BLOCK BRACK_BLOCK LPAREN RPAREN LBRACE RBRACE LBRACK RBRACK LTLTEQ GTGTEQ EXPEQ DIVDIVEQ DIVDIV LTLT GTGT EXPONENT EQ GE LE PLUSEQ MINUSEQ MULTEQ DIVEQ MODEQ AMPEQ OREQ HATEQ LTGT NE HAT LT GT AMP MULT DIV MOD PLUS MINUS PERIOD TILDE BAR COLON SEMICOLON COMMA ASSIGN BACKQUOTE AT STRING_LITERAL NUMBER_LITERAL NAME AND AS ASSERT BREAK CLASS CONTINUE DEF DEL ELIF ELSE EXCEPT EXEC FINALLY FOR FROM GLOBAL IF IMPORT IN IS LAMBDA NOT OR PASS PRINT RAISE RETURN TRY WHILE WITH YIELD)
-       nil
-       (goal
-	((NEWLINE))
-	((simple_stmt))
-	((compound_stmt)))
-       (simple_stmt
-	((small_stmt_list semicolon_opt NEWLINE)))
-       (small_stmt_list
-	((small_stmt))
-	((small_stmt_list SEMICOLON small_stmt)))
-       (small_stmt
-	((expr_stmt))
-	((print_stmt))
-	((del_stmt))
-	((pass_stmt))
-	((flow_stmt))
-	((import_stmt))
-	((global_stmt))
-	((exec_stmt))
-	((assert_stmt)))
-       (print_stmt
-	((PRINT print_stmt_trailer)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (print_stmt_trailer
-	((test_list_opt)
-	 nil)
-	((GTGT test trailing_test_list_with_opt_comma_opt)
-	 nil))
-       (trailing_test_list_with_opt_comma_opt
-	(nil)
-	((trailing_test_list comma_opt)
-	 nil))
-       (trailing_test_list
-	((COMMA test)
-	 nil)
-	((trailing_test_list COMMA test)
-	 nil))
-       (expr_stmt
-	((testlist expr_stmt_trailer)
-	 (if
-	     (and $2
-		  (stringp $1)
-		  (string-match "^\\(\\sw\\|\\s_\\)+$" $1))
-	     (wisent-raw-tag
-	      (semantic-tag-new-variable $1 nil nil))
-	   (wisent-raw-tag
-	    (semantic-tag-new-code $1 nil)))))
-       (expr_stmt_trailer
-	((augassign testlist))
-	((eq_testlist_zom)))
-       (eq_testlist_zom
-	(nil)
-	((eq_testlist_zom ASSIGN testlist)
-	 (identity $3)))
-       (augassign
-	((PLUSEQ))
-	((MINUSEQ))
-	((MULTEQ))
-	((DIVEQ))
-	((MODEQ))
-	((AMPEQ))
-	((OREQ))
-	((HATEQ))
-	((LTLTEQ))
-	((GTGTEQ))
-	((EXPEQ))
-	((DIVDIVEQ)))
-       (del_stmt
-	((DEL exprlist)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (exprlist
-	((expr_list comma_opt)
-	 nil))
-       (expr_list
-	((expr)
-	 nil)
-	((expr_list COMMA expr)
-	 nil))
-       (pass_stmt
-	((PASS)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (flow_stmt
-	((break_stmt))
-	((continue_stmt))
-	((return_stmt))
-	((raise_stmt))
-	((yield_stmt)))
-       (break_stmt
-	((BREAK)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (continue_stmt
-	((CONTINUE)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (return_stmt
-	((RETURN testlist_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (testlist_opt
-	(nil)
-	((testlist)
-	 nil))
-       (yield_stmt
-	((YIELD)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil)))
-	((YIELD testlist)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (raise_stmt
-	((RAISE zero_one_two_or_three_tests)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (zero_one_two_or_three_tests
-	(nil)
-	((test zero_one_or_two_tests)
-	 nil))
-       (zero_one_or_two_tests
-	(nil)
-	((COMMA test zero_or_one_comma_test)
-	 nil))
-       (zero_or_one_comma_test
-	(nil)
-	((COMMA test)
-	 nil))
-       (import_stmt
-	((IMPORT dotted_as_name_list)
-	 (wisent-raw-tag
-	  (semantic-tag-new-include $2 nil)))
-	((FROM dotted_name IMPORT star_or_import_as_name_list)
-	 (wisent-raw-tag
-	  (semantic-tag-new-include $2 nil))))
-       (dotted_as_name_list
-	((dotted_as_name_list COMMA dotted_as_name)
-	 (cons $3 $1))
-	((dotted_as_name)
-	 (list $1)))
-       (star_or_import_as_name_list
-	((MULT)
-	 nil)
-	((import_as_name_list)
-	 nil))
-       (import_as_name_list
-	((import_as_name)
-	 nil)
-	((import_as_name_list COMMA import_as_name)
-	 nil))
-       (import_as_name
-	((NAME as_name_opt)
-	 nil))
-       (dotted_as_name
-	((dotted_name as_name_opt)))
-       (as_name_opt
-	(nil)
-	((AS NAME)
-	 (identity $2)))
-       (dotted_name
-	((NAME))
-	((dotted_name PERIOD NAME)
-	 (format "%s.%s" $1 $3)))
-       (global_stmt
-	((GLOBAL comma_sep_name_list)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (comma_sep_name_list
-	((NAME))
-	((comma_sep_name_list COMMA NAME)))
-       (exec_stmt
-	((EXEC expr exec_trailer)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (exec_trailer
-	(nil)
-	((IN test comma_test_opt)
-	 nil))
-       (comma_test_opt
-	(nil)
-	((COMMA test)
-	 nil))
-       (assert_stmt
-	((ASSERT test comma_test_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (compound_stmt
-	((if_stmt))
-	((while_stmt))
-	((for_stmt))
-	((try_stmt))
-	((with_stmt))
-	((funcdef))
-	((class_declaration)))
-       (if_stmt
-	((IF test COLON suite elif_suite_pair_list else_suite_pair_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (elif_suite_pair_list
-	(nil)
-	((elif_suite_pair_list ELIF test COLON suite)
-	 nil))
-       (else_suite_pair_opt
-	(nil)
-	((ELSE COLON suite)
-	 nil))
-       (suite
-	((simple_stmt)
-	 (list $1))
-	((NEWLINE indented_block)
-	 (progn $2)))
-       (indented_block
-	((INDENT_BLOCK)
-	 (semantic-parse-region
-	  (car $region1)
-	  (cdr $region1)
-	  'indented_block_body 1)))
-       (indented_block_body
-	((INDENT)
-	 nil)
-	((DEDENT)
-	 nil)
-	((simple_stmt))
-	((compound_stmt)))
-       (while_stmt
-	((WHILE test COLON suite else_suite_pair_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (for_stmt
-	((FOR exprlist IN testlist COLON suite else_suite_pair_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (try_stmt
-	((TRY COLON suite except_clause_suite_pair_list else_suite_pair_opt)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil)))
-	((TRY COLON suite FINALLY COLON suite)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (except_clause_suite_pair_list
-	((except_clause COLON suite)
-	 nil)
-	((except_clause_suite_pair_list except_clause COLON suite)
-	 nil))
-       (except_clause
-	((EXCEPT zero_one_or_two_test)
-	 nil))
-       (zero_one_or_two_test
-	(nil)
-	((test zero_or_one_comma_test)
-	 nil))
-       (with_stmt
-	((WITH test COLON suite)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil)))
-	((WITH test with_var COLON suite)
-	 (wisent-raw-tag
-	  (semantic-tag-new-code $1 nil))))
-       (with_var
-	((AS expr)
-	 nil))
-       (decorator
-	((AT dotted_name varargslist_opt NEWLINE)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function $2 "decorator" $3))))
-       (decorators
-	((decorator)
-	 (list $1))
-	((decorator decorators)
-	 (cons $1 $2)))
-       (funcdef
-	((DEF NAME function_parameter_list COLON suite)
-	 (wisent-python-reconstitute-function-tag
-	  (wisent-raw-tag
-	   (semantic-tag-new-function $2 nil $3))
-	  $5))
-	((decorators DEF NAME function_parameter_list COLON suite)
-	 (wisent-python-reconstitute-function-tag
-	  (wisent-raw-tag
-	   (semantic-tag-new-function $3 nil $4 :decorators $1))
-	  $6)))
-       (function_parameter_list
-	((PAREN_BLOCK)
-	 (let
-	     ((wisent-python-EXPANDING-block t))
-	   (semantic-parse-region
-	    (car $region1)
-	    (cdr $region1)
-	    'function_parameters 1))))
-       (function_parameters
-	((LPAREN)
-	 nil)
-	((RPAREN)
-	 nil)
-	((function_parameter COMMA))
-	((function_parameter RPAREN)))
-       (function_parameter
-	((fpdef_opt_test))
-	((MULT NAME)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil nil)))
-	((EXPONENT NAME)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil nil))))
-       (class_declaration
-	((CLASS NAME paren_class_list_opt COLON suite)
-	 (wisent-python-reconstitute-class-tag
-	  (wisent-raw-tag
-	   (semantic-tag-new-type $2 $1 $5
-				  (cons $3 nil))))))
-       (paren_class_list_opt
-	(nil)
-	((paren_class_list)))
-       (paren_class_list
-	((PAREN_BLOCK)
-	 (let
-	     ((wisent-python-EXPANDING-block t))
-	   (mapcar 'semantic-tag-name
-		   (semantic-parse-region
-		    (car $region1)
-		    (cdr $region1)
-		    'paren_classes 1)))))
-       (paren_classes
-	((LPAREN)
-	 nil)
-	((RPAREN)
-	 nil)
-	((paren_class COMMA)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil)))
-	((paren_class RPAREN)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil))))
-       (paren_class
-	((dotted_name)))
-       (test
-	((test_test))
-	((lambdef)))
-       (test_test
-	((and_test))
-	((test_test OR and_test)
-	 nil))
-       (and_test
-	((not_test))
-	((and_test AND not_test)
-	 nil))
-       (not_test
-	((NOT not_test)
-	 nil)
-	((comparison)))
-       (comparison
-	((expr))
-	((comparison comp_op expr)
-	 nil))
-       (comp_op
-	((LT))
-	((GT))
-	((EQ))
-	((GE))
-	((LE))
-	((LTGT))
-	((NE))
-	((IN))
-	((NOT IN))
-	((IS))
-	((IS NOT)))
-       (expr
-	((xor_expr))
-	((expr BAR xor_expr)
-	 nil))
-       (xor_expr
-	((and_expr))
-	((xor_expr HAT and_expr)
-	 nil))
-       (and_expr
-	((shift_expr))
-	((and_expr AMP shift_expr)
-	 nil))
-       (shift_expr
-	((arith_expr))
-	((shift_expr shift_expr_operators arith_expr)
-	 nil))
-       (shift_expr_operators
-	((LTLT))
-	((GTGT)))
-       (arith_expr
-	((term))
-	((arith_expr plus_or_minus term)
-	 nil))
-       (plus_or_minus
-	((PLUS))
-	((MINUS)))
-       (term
-	((factor))
-	((term term_operator factor)
-	 nil))
-       (term_operator
-	((MULT))
-	((DIV))
-	((MOD))
-	((DIVDIV)))
-       (factor
-	((prefix_operators factor)
-	 nil)
-	((power)))
-       (prefix_operators
-	((PLUS))
-	((MINUS))
-	((TILDE)))
-       (power
-	((atom trailer_zom exponent_zom)
-	 (concat $1
-		 (if $2
-		     (concat " " $2 " ")
-		   "")
-		 (if $3
-		     (concat " " $3)
-		   ""))))
-       (trailer_zom
-	(nil)
-	((trailer_zom trailer)
-	 nil))
-       (exponent_zom
-	(nil)
-	((exponent_zom EXPONENT factor)
-	 nil))
-       (trailer
-	((PAREN_BLOCK)
-	 nil)
-	((BRACK_BLOCK)
-	 nil)
-	((PERIOD NAME)
-	 nil))
-       (atom
-	((PAREN_BLOCK)
-	 nil)
-	((BRACK_BLOCK)
-	 nil)
-	((BRACE_BLOCK)
-	 nil)
-	((BACKQUOTE testlist BACKQUOTE)
-	 nil)
-	((NAME))
-	((NUMBER_LITERAL))
-	((one_or_more_string)))
-       (test_list_opt
-	(nil)
-	((testlist)
-	 nil))
-       (testlist
-	((comma_sep_test_list comma_opt)))
-       (comma_sep_test_list
-	((test))
-	((comma_sep_test_list COMMA test)
-	 (format "%s, %s" $1 $3)))
-       (one_or_more_string
-	((STRING_LITERAL))
-	((one_or_more_string STRING_LITERAL)
-	 (concat $1 $2)))
-       (lambdef
-	((LAMBDA varargslist_opt COLON test)
-	 (format "%s %s" $1
-		 (or $2 ""))))
-       (varargslist_opt
-	(nil)
-	((varargslist)))
-       (varargslist
-	((fpdef_opt_test_list_comma_zom rest_args)
-	 (nconc $2 $1))
-	((fpdef_opt_test_list comma_opt)))
-       (rest_args
-	((MULT NAME multmult_name_opt)
-	 nil)
-	((EXPONENT NAME)
-	 nil))
-       (multmult_name_opt
-	(nil)
-	((COMMA EXPONENT NAME)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $3 nil nil))))
-       (fpdef_opt_test_list_comma_zom
-	(nil)
-	((fpdef_opt_test_list_comma_zom fpdef_opt_test COMMA)
-	 (nconc $2 $1)))
-       (fpdef_opt_test_list
-	((fpdef_opt_test))
-	((fpdef_opt_test_list COMMA fpdef_opt_test)
-	 (nconc $3 $1)))
-       (fpdef_opt_test
-	((fpdef eq_test_opt)))
-       (fpdef
-	((NAME)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $1 nil nil))))
-       (fplist
-	((fpdef_list comma_opt)))
-       (fpdef_list
-	((fpdef))
-	((fpdef_list COMMA fpdef)))
-       (eq_test_opt
-	(nil)
-	((ASSIGN test)
-	 nil))
-       (comma_opt
-	(nil)
-	((COMMA)))
-       (semicolon_opt
-	(nil)
-	((SEMICOLON))))
-     '(goal function_parameter paren_class indented_block function_parameters paren_classes indented_block_body)))
-  "Parser table.")
-
-(defun wisent-python-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table wisent-python-wy--parse-table
-	semantic-debug-parser-source "wisent-python.wy"
-	semantic-flex-keywords-obarray wisent-python-wy--keyword-table
-	semantic-lex-types-obarray wisent-python-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-keyword-type-analyzer wisent-python-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-block-type-analyzer wisent-python-wy--<block>-block-analyzer
-  "block analyzer for <block> tokens."
-  "\\s(\\|\\s)"
-  '((("(" LPAREN PAREN_BLOCK)
-     ("{" LBRACE BRACE_BLOCK)
-     ("[" LBRACK BRACK_BLOCK))
-    (")" RPAREN)
-    ("}" RBRACE)
-    ("]" RBRACK))
-  )
-
-(define-lex-regex-type-analyzer wisent-python-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  "\\(\\sw\\|\\s_\\)+"
-  nil
-  'NAME)
-
-(define-lex-regex-type-analyzer wisent-python-wy--<number>-regexp-analyzer
-  "regexp analyzer for <number> tokens."
-  semantic-lex-number-expression
-  nil
-  'NUMBER_LITERAL)
-
-(define-lex-string-type-analyzer wisent-python-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\(\\s.\\|\\s$\\|\\s'\\)+"
-  '((AT . "@")
-    (BACKQUOTE . "`")
-    (ASSIGN . "=")
-    (COMMA . ",")
-    (SEMICOLON . ";")
-    (COLON . ":")
-    (BAR . "|")
-    (TILDE . "~")
-    (PERIOD . ".")
-    (MINUS . "-")
-    (PLUS . "+")
-    (MOD . "%")
-    (DIV . "/")
-    (MULT . "*")
-    (AMP . "&")
-    (GT . ">")
-    (LT . "<")
-    (HAT . "^")
-    (NE . "!=")
-    (LTGT . "<>")
-    (HATEQ . "^=")
-    (OREQ . "|=")
-    (AMPEQ . "&=")
-    (MODEQ . "%=")
-    (DIVEQ . "/=")
-    (MULTEQ . "*=")
-    (MINUSEQ . "-=")
-    (PLUSEQ . "+=")
-    (LE . "<=")
-    (GE . ">=")
-    (EQ . "==")
-    (EXPONENT . "**")
-    (GTGT . ">>")
-    (LTLT . "<<")
-    (DIVDIV . "//")
-    (DIVDIVEQ . "//=")
-    (EXPEQ . "**=")
-    (GTGTEQ . ">>=")
-    (LTLTEQ . "<<="))
-  'punctuation)
-
-
-;;; Epilogue
-;;
-
-(provide 'wisent-python-wy)
-
-;;; wisent-python-wy.el ends here
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent-python.elc b/elisp/cedet-1.1/semantic/wisent/wisent-python.elc
index 1483e5f..4622253 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent-python.elc and b/elisp/cedet-1.1/semantic/wisent/wisent-python.elc differ
diff --git a/elisp/cedet-1.1/semantic/wisent/wisent.elc b/elisp/cedet-1.1/semantic/wisent/wisent.elc
index bba52b0..2a86fc0 100644
Binary files a/elisp/cedet-1.1/semantic/wisent/wisent.elc and b/elisp/cedet-1.1/semantic/wisent/wisent.elc differ
diff --git a/elisp/cedet-1.1/speedbar/dframe.elc b/elisp/cedet-1.1/speedbar/dframe.elc
index 5d00473..a1f270b 100644
Binary files a/elisp/cedet-1.1/speedbar/dframe.elc and b/elisp/cedet-1.1/speedbar/dframe.elc differ
diff --git a/elisp/cedet-1.1/speedbar/speedbar-load.elc b/elisp/cedet-1.1/speedbar/speedbar-load.elc
index 92f4639..faee4b0 100644
Binary files a/elisp/cedet-1.1/speedbar/speedbar-load.elc and b/elisp/cedet-1.1/speedbar/speedbar-load.elc differ
diff --git a/elisp/cedet-1.1/speedbar/speedbar-loaddefs.el b/elisp/cedet-1.1/speedbar/speedbar-loaddefs.el
index f9c046b..c1d202d 100644
--- a/elisp/cedet-1.1/speedbar/speedbar-loaddefs.el
+++ b/elisp/cedet-1.1/speedbar/speedbar-loaddefs.el
@@ -98,7 +98,7 @@ selected.  If the speedbar frame is active, then select the attached frame.
 
 ;;;### (autoloads nil nil ("bigclock.el" "dframe.el" "sb-ant.el"
 ;;;;;;  "sb-html.el" "sb-image.el" "sb-texinfo.el" "speedbar-load.el")
-;;;;;;  (20565 26889 811602))
+;;;;;;  (20584 5748 563442))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/speedbar/speedbar.elc b/elisp/cedet-1.1/speedbar/speedbar.elc
index 5634231..7d69720 100644
Binary files a/elisp/cedet-1.1/speedbar/speedbar.elc and b/elisp/cedet-1.1/speedbar/speedbar.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-android.elc b/elisp/cedet-1.1/srecode/srecode-android.elc
index 9dbd2be..617d221 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-android.elc and b/elisp/cedet-1.1/srecode/srecode-android.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-args.elc b/elisp/cedet-1.1/srecode/srecode-args.elc
index 9f4c76c..8fa119f 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-args.elc and b/elisp/cedet-1.1/srecode/srecode-args.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-compile.elc b/elisp/cedet-1.1/srecode/srecode-compile.elc
index 428aee3..747e882 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-compile.elc and b/elisp/cedet-1.1/srecode/srecode-compile.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-cpp.elc b/elisp/cedet-1.1/srecode/srecode-cpp.elc
index 0dce006..6650b00 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-cpp.elc and b/elisp/cedet-1.1/srecode/srecode-cpp.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-ctxt.elc b/elisp/cedet-1.1/srecode/srecode-ctxt.elc
index d67e144..09f55bd 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-ctxt.elc and b/elisp/cedet-1.1/srecode/srecode-ctxt.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-dictionary.elc b/elisp/cedet-1.1/srecode/srecode-dictionary.elc
index a1ed627..d84fa55 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-dictionary.elc and b/elisp/cedet-1.1/srecode/srecode-dictionary.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-document-vars.elc b/elisp/cedet-1.1/srecode/srecode-document-vars.elc
index 4ef262b..aed7595 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-document-vars.elc and b/elisp/cedet-1.1/srecode/srecode-document-vars.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-document.elc b/elisp/cedet-1.1/srecode/srecode-document.elc
index d65d321..7096304 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-document.elc and b/elisp/cedet-1.1/srecode/srecode-document.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-el.elc b/elisp/cedet-1.1/srecode/srecode-el.elc
index f3f946a..877e707 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-el.elc and b/elisp/cedet-1.1/srecode/srecode-el.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-expandproto.elc b/elisp/cedet-1.1/srecode/srecode-expandproto.elc
index 89a4e0c..1b6f425 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-expandproto.elc and b/elisp/cedet-1.1/srecode/srecode-expandproto.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-extract.elc b/elisp/cedet-1.1/srecode/srecode-extract.elc
index 00cab61..adf20a4 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-extract.elc and b/elisp/cedet-1.1/srecode/srecode-extract.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-fields.elc b/elisp/cedet-1.1/srecode/srecode-fields.elc
index 23613b8..984b9fb 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-fields.elc and b/elisp/cedet-1.1/srecode/srecode-fields.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-filters.elc b/elisp/cedet-1.1/srecode/srecode-filters.elc
index 470cee1..68d14c9 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-filters.elc and b/elisp/cedet-1.1/srecode/srecode-filters.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-find.elc b/elisp/cedet-1.1/srecode/srecode-find.elc
index 520b185..b11f879 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-find.elc and b/elisp/cedet-1.1/srecode/srecode-find.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-getset.elc b/elisp/cedet-1.1/srecode/srecode-getset.elc
index a041b88..2feabac 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-getset.elc and b/elisp/cedet-1.1/srecode/srecode-getset.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-insert.elc b/elisp/cedet-1.1/srecode/srecode-insert.elc
index 50add16..a0717fa 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-insert.elc and b/elisp/cedet-1.1/srecode/srecode-insert.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-java.elc b/elisp/cedet-1.1/srecode/srecode-java.elc
index 1285261..cb1ebfb 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-java.elc and b/elisp/cedet-1.1/srecode/srecode-java.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-load.elc b/elisp/cedet-1.1/srecode/srecode-load.elc
index 10dd56f..2dba72d 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-load.elc and b/elisp/cedet-1.1/srecode/srecode-load.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-loaddefs.el b/elisp/cedet-1.1/srecode/srecode-loaddefs.el
index 95ea208..25831f4 100644
--- a/elisp/cedet-1.1/srecode/srecode-loaddefs.el
+++ b/elisp/cedet-1.1/srecode/srecode-loaddefs.el
@@ -661,7 +661,7 @@ Insert TAG into the current buffer with SRecode.
 
 ;;;### (autoloads nil nil ("srecode-document-vars.el" "srecode-extract.el"
 ;;;;;;  "srecode-load.el" "srecode-template-wy.el" "srecode.el")
-;;;;;;  (20565 26912 78059))
+;;;;;;  (20584 5762 412723))
 
 ;;;***
 
diff --git a/elisp/cedet-1.1/srecode/srecode-m3.elc b/elisp/cedet-1.1/srecode/srecode-m3.elc
index a3c12f1..c4a8fb0 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-m3.elc and b/elisp/cedet-1.1/srecode/srecode-m3.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-map.elc b/elisp/cedet-1.1/srecode/srecode-map.elc
index 4f23e5b..d10e1c8 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-map.elc and b/elisp/cedet-1.1/srecode/srecode-map.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-mode.elc b/elisp/cedet-1.1/srecode/srecode-mode.elc
index 4d772a6..b34ee33 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-mode.elc and b/elisp/cedet-1.1/srecode/srecode-mode.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-semantic.elc b/elisp/cedet-1.1/srecode/srecode-semantic.elc
index e203371..9c0b752 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-semantic.elc and b/elisp/cedet-1.1/srecode/srecode-semantic.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-srt.elc b/elisp/cedet-1.1/srecode/srecode-srt.elc
index fbb42df..7b4d95a 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-srt.elc and b/elisp/cedet-1.1/srecode/srecode-srt.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-table.elc b/elisp/cedet-1.1/srecode/srecode-table.elc
index 6fb06ef..27a6a85 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-table.elc and b/elisp/cedet-1.1/srecode/srecode-table.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-template-mode.elc b/elisp/cedet-1.1/srecode/srecode-template-mode.elc
index ee2b58e..45387cf 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-template-mode.elc and b/elisp/cedet-1.1/srecode/srecode-template-mode.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-template-wy.el~ b/elisp/cedet-1.1/srecode/srecode-template-wy.el~
deleted file mode 100644
index 561672b..0000000
--- a/elisp/cedet-1.1/srecode/srecode-template-wy.el~
+++ /dev/null
@@ -1,309 +0,0 @@
-;;; srecode-template-wy.el --- Generated parser support file
-
-;; Copyright (C) 2005, 2007, 2008, 2009, 2010 Eric M. Ludlam
-
-;; Author: Eric M. Ludlam <zappo@projectile.siege-engine.com>
-;; Created: 2010-09-23 21:03:39-0400
-;; Keywords: syntax
-;; X-RCS: $Id$
-
-;; This file is not part of GNU Emacs.
-;;
-;; This program is free software; you can redistribute it and/or
-;; modify it under the terms of the GNU General Public License as
-;; published by the Free Software Foundation; either version 2, or (at
-;; your option) any later version.
-;;
-;; This software is distributed in the hope that it will be useful,
-;; but WITHOUT ANY WARRANTY; without even the implied warranty of
-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-;; General Public License for more details.
-;;
-;; You should have received a copy of the GNU General Public License
-;; along with GNU Emacs; see the file COPYING.  If not, write to the
-;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
-;; Boston, MA 02110-1301, USA.
-
-;;; Commentary:
-;;
-;; PLEASE DO NOT MANUALLY EDIT THIS FILE!  It is automatically
-;; generated from the grammar file srecode-template.wy.
-
-;;; Code:
-
-;;; Prologue
-;;
-
-;;; Declarations
-;;
-(defconst srecode-template-wy--keyword-table
-  (semantic-lex-make-keyword-table
-   '(("set" . SET)
-     ("show" . SHOW)
-     ("macro" . MACRO)
-     ("context" . CONTEXT)
-     ("template" . TEMPLATE)
-     ("sectiondictionary" . SECTIONDICTIONARY)
-     ("section" . SECTION)
-     ("end" . END)
-     ("prompt" . PROMPT)
-     ("default" . DEFAULT)
-     ("defaultmacro" . DEFAULTMACRO)
-     ("read" . READ)
-     ("bind" . BIND))
-   '(("bind" summary "bind \"<letter>\"")
-     ("read" summary "prompt <symbol> \"Describe Symbol: \" [default[macro] <lispsym>|\"valuetext\"] [read <lispsym>]")
-     ("defaultmacro" summary "prompt <symbol> \"Describe Symbol: \" [default[macro] <lispsym>|\"valuetext\"] [read <lispsym>]")
-     ("default" summary "prompt <symbol> \"Describe Symbol: \" [default[macro] <lispsym>|\"valuetext\"] [read <lispsym>]")
-     ("prompt" summary "prompt <symbol> \"Describe Symbol: \" [default[macro] <lispsym>|\"valuetext\"] [read <lispsym>]")
-     ("end" summary "section ... end")
-     ("section" summary "section <name>\\n <dictionary entries>\\n end")
-     ("sectiondictionary" summary "sectiondictionary <name>\\n <dictionary entries>")
-     ("template" summary "template <name>\\n <template definition>")
-     ("context" summary "context <name>")
-     ("macro" summary "... macro \"string\" ...")
-     ("show" summary "show <name>   ; to show a section")
-     ("set" summary "set <name> <value>")))
-  "Table of language keywords.")
-
-(defconst srecode-template-wy--token-table
-  (semantic-lex-make-type-table
-   '(("number"
-      (number))
-     ("string"
-      (string))
-     ("symbol"
-      (symbol))
-     ("property"
-      (property))
-     ("separator"
-      (TEMPLATE_BLOCK . "^----"))
-     ("newline"
-      (newline)))
-   '(("number" :declared t)
-     ("string" :declared t)
-     ("symbol" :declared t)
-     ("property" syntax ":\\(\\w\\|\\s_\\)*")
-     ("property" :declared t)
-     ("newline" :declared t)
-     ("punctuation" syntax "\\s.+")
-     ("punctuation" :declared t)
-     ("keyword" :declared t)))
-  "Table of lexical tokens.")
-
-(defconst srecode-template-wy--parse-table
-  (progn
-    (eval-when-compile
-      (require 'wisent-comp))
-    (wisent-compile-grammar
-     '((SET SHOW MACRO CONTEXT TEMPLATE SECTIONDICTIONARY SECTION END PROMPT DEFAULT DEFAULTMACRO READ BIND newline TEMPLATE_BLOCK property symbol string number)
-       nil
-       (template_file
-	((newline)
-	 nil)
-	((context))
-	((prompt))
-	((variable))
-	((template)))
-       (context
-	((CONTEXT symbol newline)
-	 (wisent-raw-tag
-	  (semantic-tag $2 'context))))
-       (prompt
-	((PROMPT symbol string opt-default-fcn opt-read-fcn newline)
-	 (wisent-raw-tag
-	  (semantic-tag $2 'prompt :text
-			(read $3)
-			:default $4 :read $5))))
-       (opt-default-fcn
-	((DEFAULT symbol)
-	 (progn
-	   (read $2)))
-	((DEFAULT string)
-	 (progn
-	   (read $2)))
-	((DEFAULTMACRO string)
-	 (progn
-	   (cons 'macro
-		 (read $2))))
-	(nil nil))
-       (opt-read-fcn
-	((READ symbol)
-	 (progn
-	   (read $2)))
-	(nil nil))
-       (variable
-	((SET symbol insertable-string-list newline)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil $3)))
-	((SHOW symbol newline)
-	 (wisent-raw-tag
-	  (semantic-tag-new-variable $2 nil t))))
-       (insertable-string-list
-	((insertable-string)
-	 (list $1))
-	((insertable-string-list insertable-string)
-	 (append $1
-		 (list $2))))
-       (insertable-string
-	((string)
-	 (read $1))
-	((MACRO string)
-	 (cons 'macro
-	       (read $2))))
-       (template
-	((TEMPLATE templatename opt-dynamic-arguments newline opt-string section-dictionary-list TEMPLATE_BLOCK newline opt-bind)
-	 (wisent-raw-tag
-	  (semantic-tag-new-function $2 nil $3 :documentation $5 :code $7 :dictionaries $6 :binding $9))))
-       (templatename
-	((symbol))
-	((PROMPT))
-	((CONTEXT))
-	((TEMPLATE))
-	((DEFAULT))
-	((MACRO))
-	((DEFAULTMACRO))
-	((READ))
-	((SET)))
-       (opt-dynamic-arguments
-	((property opt-dynamic-arguments)
-	 (cons $1 $2))
-	(nil nil))
-       (opt-string
-	((string newline)
-	 (read $1))
-	(nil nil))
-       (section-dictionary-list
-	(nil nil)
-	((section-dictionary-list flat-section-dictionary)
-	 (append $1
-		 (list $2)))
-	((section-dictionary-list section-dictionary)
-	 (append $1
-		 (list $2))))
-       (flat-section-dictionary
-	((SECTIONDICTIONARY string newline flat-dictionary-entry-list)
-	 (cons
-	  (read $2)
-	  $4)))
-       (flat-dictionary-entry-list
-	(nil nil)
-	((flat-dictionary-entry-list flat-dictionary-entry)
-	 (append $1 $2)))
-       (flat-dictionary-entry
-	((variable)
-	 (wisent-cook-tag $1)))
-       (section-dictionary
-	((SECTION string newline dictionary-entry-list END newline)
-	 (cons
-	  (read $2)
-	  $4)))
-       (dictionary-entry-list
-	(nil nil)
-	((dictionary-entry-list dictionary-entry)
-	 (append $1 $2)))
-       (dictionary-entry
-	((variable)
-	 (wisent-cook-tag $1))
-	((section-dictionary)
-	 (list $1)))
-       (opt-bind
-	((BIND string newline)
-	 (read $2))
-	(nil nil)))
-     '(template_file)))
-  "Parser table.")
-
-(defun srecode-template-wy--install-parser ()
-  "Setup the Semantic Parser."
-  (semantic-install-function-overrides
-   '((parse-stream . wisent-parse-stream)))
-  (setq semantic-parser-name "LALR"
-	semantic--parse-table srecode-template-wy--parse-table
-	semantic-debug-parser-source "srecode-template.wy"
-	semantic-flex-keywords-obarray srecode-template-wy--keyword-table
-	semantic-lex-types-obarray srecode-template-wy--token-table)
-  ;; Collect unmatched syntax lexical tokens
-  (semantic-make-local-hook 'wisent-discarding-token-functions)
-  (add-hook 'wisent-discarding-token-functions
-	    'wisent-collect-unmatched-syntax nil t))
-
-
-;;; Analyzers
-;;
-(require 'semantic-lex)
-
-(define-lex-keyword-type-analyzer srecode-template-wy--<keyword>-keyword-analyzer
-  "keyword analyzer for <keyword> tokens."
-  "\\(\\sw\\|\\s_\\)+")
-
-(define-lex-regex-type-analyzer srecode-template-wy--<symbol>-regexp-analyzer
-  "regexp analyzer for <symbol> tokens."
-  "\\(\\sw\\|\\s_\\)+"
-  nil
-  'symbol)
-
-(define-lex-sexp-type-analyzer srecode-template-wy--<string>-sexp-analyzer
-  "sexp analyzer for <string> tokens."
-  "\\s\""
-  'string)
-
-(define-lex-regex-type-analyzer srecode-template-wy--<number>-regexp-analyzer
-  "regexp analyzer for <number> tokens."
-  semantic-lex-number-expression
-  nil
-  'number)
-
-(define-lex-string-type-analyzer srecode-template-wy--<punctuation>-string-analyzer
-  "string analyzer for <punctuation> tokens."
-  "\\s.+"
-  nil
-  'punctuation)
-
-(define-lex-regex-type-analyzer srecode-template-wy--<property>-regexp-analyzer
-  "regexp analyzer for <property> tokens."
-  ":\\(\\w\\|\\s_\\)*"
-  nil
-  'property)
-
-
-;;; Epilogue
-;;
-(define-lex-simple-regex-analyzer srecode-template-property-analyzer
-  "Detect and create a dynamic argument properties."
-  ":\\(\\w\\|\\s_\\)*" 'property 0)
-
-(define-lex-regex-analyzer srecode-template-separator-block
-  "Detect and create a template quote block."
-  "^----\n"
-  (semantic-lex-push-token
-   (semantic-lex-token
-    'TEMPLATE_BLOCK
-    (match-end 0)
-    (semantic-lex-unterminated-syntax-protection 'TEMPLATE_BLOCK
-      (goto-char (match-end 0))
-      (re-search-forward "^----$")
-      (match-beginning 0))))
-  (setq semantic-lex-end-point (point)))
-
-
-(define-lex wisent-srecode-template-lexer
-  "Lexical analyzer that handles SRecode Template buffers.
-It ignores whitespace, newlines and comments."
-  semantic-lex-newline
-  semantic-lex-ignore-whitespace
-  semantic-lex-ignore-newline
-  semantic-lex-ignore-comments
-  srecode-template-separator-block
-  srecode-template-wy--<keyword>-keyword-analyzer
-  srecode-template-property-analyzer
-  srecode-template-wy--<symbol>-regexp-analyzer
-  srecode-template-wy--<number>-regexp-analyzer
-  srecode-template-wy--<string>-sexp-analyzer
-  srecode-template-wy--<punctuation>-string-analyzer
-  semantic-lex-default-action
-  )
-
-(provide 'srecode-template-wy)
-
-;;; srecode-template-wy.el ends here
diff --git a/elisp/cedet-1.1/srecode/srecode-template.elc b/elisp/cedet-1.1/srecode/srecode-template.elc
index 38a4ea9..c9b564f 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-template.elc and b/elisp/cedet-1.1/srecode/srecode-template.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-test-getset.elc b/elisp/cedet-1.1/srecode/srecode-test-getset.elc
index 1bbbe8f..88972f3 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-test-getset.elc and b/elisp/cedet-1.1/srecode/srecode-test-getset.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-test.elc b/elisp/cedet-1.1/srecode/srecode-test.elc
index f6971c7..b2591bd 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-test.elc and b/elisp/cedet-1.1/srecode/srecode-test.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode-texi.elc b/elisp/cedet-1.1/srecode/srecode-texi.elc
index 8465326..9fd1bd3 100644
Binary files a/elisp/cedet-1.1/srecode/srecode-texi.elc and b/elisp/cedet-1.1/srecode/srecode-texi.elc differ
diff --git a/elisp/cedet-1.1/srecode/srecode.elc b/elisp/cedet-1.1/srecode/srecode.elc
index e44b305..f1eb9fd 100644
Binary files a/elisp/cedet-1.1/srecode/srecode.elc and b/elisp/cedet-1.1/srecode/srecode.elc differ
diff --git a/elisp/cedet-1.1/tests/cedet-integ-test.elc b/elisp/cedet-1.1/tests/cedet-integ-test.elc
index 574a379..b18f35a 100644
Binary files a/elisp/cedet-1.1/tests/cedet-integ-test.elc and b/elisp/cedet-1.1/tests/cedet-integ-test.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-android.elc b/elisp/cedet-1.1/tests/cit-android.elc
index 9580d6b..970c4c3 100644
Binary files a/elisp/cedet-1.1/tests/cit-android.elc and b/elisp/cedet-1.1/tests/cit-android.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-arduino.elc b/elisp/cedet-1.1/tests/cit-arduino.elc
index d37e771..25653a4 100644
Binary files a/elisp/cedet-1.1/tests/cit-arduino.elc and b/elisp/cedet-1.1/tests/cit-arduino.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-cpp.elc b/elisp/cedet-1.1/tests/cit-cpp.elc
index e2a11b2..f445678 100644
Binary files a/elisp/cedet-1.1/tests/cit-cpp.elc and b/elisp/cedet-1.1/tests/cit-cpp.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-dist.elc b/elisp/cedet-1.1/tests/cit-dist.elc
index 38fdd8e..56bbd64 100644
Binary files a/elisp/cedet-1.1/tests/cit-dist.elc and b/elisp/cedet-1.1/tests/cit-dist.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-el.elc b/elisp/cedet-1.1/tests/cit-el.elc
index 54f618e..a5798af 100644
Binary files a/elisp/cedet-1.1/tests/cit-el.elc and b/elisp/cedet-1.1/tests/cit-el.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-externaldb.elc b/elisp/cedet-1.1/tests/cit-externaldb.elc
index 0a6bae6..e3ce897 100644
Binary files a/elisp/cedet-1.1/tests/cit-externaldb.elc and b/elisp/cedet-1.1/tests/cit-externaldb.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-gnustep.elc b/elisp/cedet-1.1/tests/cit-gnustep.elc
index b0fbafe..80ad89d 100644
Binary files a/elisp/cedet-1.1/tests/cit-gnustep.elc and b/elisp/cedet-1.1/tests/cit-gnustep.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-load.elc b/elisp/cedet-1.1/tests/cit-load.elc
index b7c413a..38a37c2 100644
Binary files a/elisp/cedet-1.1/tests/cit-load.elc and b/elisp/cedet-1.1/tests/cit-load.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-projvar.elc b/elisp/cedet-1.1/tests/cit-projvar.elc
index d75cd1c..bf13865 100644
Binary files a/elisp/cedet-1.1/tests/cit-projvar.elc and b/elisp/cedet-1.1/tests/cit-projvar.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-srec.elc b/elisp/cedet-1.1/tests/cit-srec.elc
index 3525ce3..6dc77d1 100644
Binary files a/elisp/cedet-1.1/tests/cit-srec.elc and b/elisp/cedet-1.1/tests/cit-srec.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-symref.elc b/elisp/cedet-1.1/tests/cit-symref.elc
index 3860153..2756bf4 100644
Binary files a/elisp/cedet-1.1/tests/cit-symref.elc and b/elisp/cedet-1.1/tests/cit-symref.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-texi.elc b/elisp/cedet-1.1/tests/cit-texi.elc
index d9f7367..a1c0dc0 100644
Binary files a/elisp/cedet-1.1/tests/cit-texi.elc and b/elisp/cedet-1.1/tests/cit-texi.elc differ
diff --git a/elisp/cedet-1.1/tests/cit-uml.elc b/elisp/cedet-1.1/tests/cit-uml.elc
index 2ce6a0e..df83d12 100644
Binary files a/elisp/cedet-1.1/tests/cit-uml.elc and b/elisp/cedet-1.1/tests/cit-uml.elc differ
diff --git a/rc/emacs-rc-cedet.el b/rc/emacs-rc-cedet.el
index 61d6826..70314ba 100644
--- a/rc/emacs-rc-cedet.el
+++ b/rc/emacs-rc-cedet.el
@@ -107,6 +107,8 @@
   (semanticdb-enable-gnu-global-databases 'c-mode)
   (semanticdb-enable-gnu-global-databases 'c++-mode))
 
+(setq semantic-symref-tool 'global)
+
 ;; ctags
 (when (cedet-ectag-version-check t)
   (require 'semanticdb-ectag)
-- 
2.0.4

