# -*- mode: snippet -*-
# name: viewfactory
# key: viewfactory
# group: pfmvp
# --
#include <memory>

#include "snail/i_${1:$(downcase yas-text)}_model.h"
#include "src/qtui/${1:$(downcase yas-text)}_presenter.h"
#include "src/qtui/${1:$(downcase yas-text)}_view.h"
#include "pfmvp/pf_view_factory_manager.h"

using namespace pfmvp;  // NOLINT
using namespace snailcore;  // NOLINT

class ${1:name}ViewFactory : public IPfViewFactory {
 public:
  $1ViewFactory() = default;
  virtual ~$1ViewFactory() = default;

  DEF_VIEW_FACTORY_ID($1ViewFactory)

  std::shared_ptr<PfPresenter>
  createView(std::shared_ptr<IPfModel> model) override {
    auto the_model = std::dynamic_pointer_cast<I$1Model>(model);
    if (the_model) {
      auto view = std::make_shared<$1View>();
      return std::make_shared<$1Presenter>(the_model, view);
    }

    return nullptr;
  }

 private:
  $1ViewFactory(const $1ViewFactory& other) = delete;
  $1ViewFactory& operator=(const $1ViewFactory& other) = delete;
};

static view_factory_t<I$1Model, $1ViewFactory>
g_$1_view_factory;